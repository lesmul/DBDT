<?xml version="1.0"?>
<doc>
    <assembly>
        <name>netDxf</name>
    </assembly>
    <members>
        <member name="T:netDxf.AciColor">
            <summary>
            Represents an ACI color (AutoCAD Color Index) that also supports true color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.ByLayer">
            <summary>
            Gets the ByLayer color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.ByBlock">
            <summary>
            Gets the ByBlock color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.Red">
            <summary>
            Defines a default red color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.Yellow">
            <summary>
            Defines a default yellow color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.Green">
            <summary>
            Defines a default green color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.Cyan">
            <summary>
            Defines a default cyan color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.Blue">
            <summary>
            Defines a default blue color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.Magenta">
            <summary>
            Defines a default magenta color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.Default">
            <summary>
            Defines a default white/black color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.DarkGray">
            <summary>
            Defines a default dark gray color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.LightGray">
            <summary>
            Defines a default light gray color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.IndexRgb">
            <summary>
            A dictionary that contains the indexed colors, the key represents the color index and the value the RGB components of the color.
            </summary>
            <remarks>
            This is the AutoCad default ACI color index to RGB values table.
            Changes in the actual view background color in AutoCad might produce changes in the RGB equivalents in some ACI color indexes,
            specially the darkest ones.
            </remarks>
        </member>
        <member name="M:netDxf.AciColor.#ctor">
            <summary>
            Initializes a new instance of the <c>AciColor</c> class with black/white color index 7.
            </summary>
        </member>
        <member name="M:netDxf.AciColor.#ctor(System.Byte,System.Byte,System.Byte)">
             <summary>
             Initializes a new instance of the <c>AciColor</c> class.
             </summary>
            <param name="r">Red component (input values range from 0 to 255).</param>
            <param name="g">Green component (input values range from 0 to 255).</param>
            <param name="b">Blue component (input values range from 0 to 255).</param>
             <remarks>By default the UseTrueColor will be set to true.</remarks>
        </member>
        <member name="M:netDxf.AciColor.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>AciColor</c> class.
            </summary>
            <param name="r">Red component (input values range from 0 to 1).</param>
            <param name="g">Green component (input values range from 0 to 1).</param>
            <param name="b">Blue component (input values range from 0 to 1).</param>
            <remarks>By default the UseTrueColor will be set to true.</remarks>
        </member>
        <member name="M:netDxf.AciColor.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <c>AciColor</c> class.
            </summary>
            <param name="color">A <see cref="T:System.Drawing.Color">color</see>.</param>
            <remarks>By default the UseTrueColor will be set to true.</remarks>
        </member>
        <member name="M:netDxf.AciColor.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the <c>AciColor</c> class.
            </summary>
            <param name="index">Color index.</param>
            <remarks>
            By default the UseTrueColor will be set to false.<br />
            Accepted color index values range from 1 to 255.<br />
            Indexes from 1 to 255 represents a color, the index 0 and 256 are reserved for ByLayer and ByBlock colors.
            </remarks>
        </member>
        <member name="P:netDxf.AciColor.IsByLayer">
            <summary>
            Defines if the color is defined by layer.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.IsByBlock">
            <summary>
            Defines if the color is defined by block.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.R">
            <summary>
            Gets the red component of the AciColor.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.G">
            <summary>
            Gets the green component of the AciColor.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.B">
            <summary>
            Gets the blue component of the AciColor.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.UseTrueColor">
            <summary>
            Get or set if the AciColor should use true color values.
            </summary>
            <remarks>
            By default, the constructors that use RGB values will set this boolean to true
            while the constants and the constructor that use a color index will set it to false.
            </remarks>
        </member>
        <member name="P:netDxf.AciColor.Index">
            <summary>
            Gets or sets the color index.
            </summary>
            <remarks>
            Accepted color index values range from 1 to 255.
            Indexes from 1 to 255 represents a color, the index 0 and 256 are reserved for ByLayer and ByBlock colors.
            </remarks>
        </member>
        <member name="M:netDxf.AciColor.RgbToAci(System.Byte,System.Byte,System.Byte)">
            <summary>
            Obtains the approximate color index from the RGB components.
            </summary>
            <param name="r">Red component.</param>
            <param name="g">Green component.</param>
            <param name="b">Blue component.</param>
            <returns>The approximate color index from the RGB components.</returns>
        </member>
        <member name="M:netDxf.AciColor.FromHsl(netDxf.Vector3)">
            <summary>
            Converts HSL (hue, saturation, lightness) value to an <see cref="T:netDxf.AciColor">AciColor</see>.
            </summary>
            <param name="hsl">A Vector3 containing the hue, saturation, and lightness components.</param>
            <returns>An <see cref="T:System.Drawing.Color">AciColor</see> that represents the actual HSL value.</returns>
        </member>
        <member name="M:netDxf.AciColor.FromHsl(System.Double,System.Double,System.Double)">
            <summary>
            Converts HSL (hue, saturation, lightness) value to an <see cref="T:netDxf.AciColor">AciColor</see>.
            </summary>
            <param name="hue">Hue (input values range from 0 to 1).</param>
            <param name="saturation">Saturation (input values range from 0 to 1).</param>
            <param name="lightness">Lightness (input values range from 0 to 1).</param>
            <returns>An <see cref="T:System.Drawing.Color">AciColor</see> that represents the actual HSL value.</returns>
        </member>
        <member name="M:netDxf.AciColor.ToHsl(netDxf.AciColor,netDxf.Vector3@)">
            <summary>
            Converts the RGB (red, green, blue) components of an <see cref="T:netDxf.AciColor">AciColor</see> to HSL (hue, saturation, lightness) values.
            </summary>
            <param name="color">A <see cref="T:netDxf.AciColor">color</see>.</param>
            <param name="hsl">A Vector3 containing the hue, saturation, and lightness components (output values range from 0 to 1).</param>
        </member>
        <member name="M:netDxf.AciColor.ToHsl(netDxf.AciColor,System.Double@,System.Double@,System.Double@)">
            <summary>
            Converts the RGB (red, green, blue) components of an <see cref="T:netDxf.AciColor">AciColor</see> to HSL (hue, saturation, lightness) values.
            </summary>
            <param name="color">A <see cref="T:netDxf.AciColor">color</see>.</param>
            <param name="hue">Hue (output values range from 0 to 1).</param>
            <param name="saturation">Saturation (output values range from 0 to 1).</param>
            <param name="lightness">Lightness (output values range from 0 to 1).</param>
        </member>
        <member name="M:netDxf.AciColor.ToHsl(netDxf.AciColor)">
            <summary>
            Converts the RGB (red, green, blue) components of an <see cref="T:netDxf.AciColor">AciColor</see> to HSL (hue, saturation, lightness) values.
            </summary>
            <param name="color">A <see cref="T:netDxf.AciColor">color</see>.</param>
            <returns>
            A Vector3 where the three coordinates x, y, z represents the hue, saturation, and lightness components (output values range from 0 to 1).
            </returns>
        </member>
        <member name="M:netDxf.AciColor.ToColor">
            <summary>
            Converts the AciColor to a <see cref="T:System.Drawing.Color">color</see>.
            </summary>
            <returns>A <see cref="T:System.Drawing.Color">System.Drawing.Color</see> that represents the actual AciColor.</returns>
            <remarks>
            A default color white will be used for ByLayer and ByBlock colors.
            </remarks>
        </member>
        <member name="M:netDxf.AciColor.FromColor(System.Drawing.Color)">
            <summary>
            Converts a <see cref="T:System.Drawing.Color">color</see> to an <see cref="T:System.Drawing.Color">AciColor</see>.
            </summary>
            <param name="color">A <see cref="T:System.Drawing.Color">color</see>.</param>
        </member>
        <member name="M:netDxf.AciColor.FromCadIndex(System.Int16)">
            <summary>
            Gets the <see cref="T:netDxf.AciColor">color</see> from an index.
            </summary>
            <param name="index">A CAD indexed AciColor index.</param>
            <returns>A <see cref="T:netDxf.AciColor">color</see>.</returns>
            <remarks>
            Accepted index values range from 0 to 256. An index 0 represents a ByBlock color and an index 256 is a ByLayer color;
            any other value will return one of the 255 indexed AciColors.
            </remarks>
        </member>
        <member name="M:netDxf.AciColor.FromTrueColor(System.Int32)">
            <summary>
            Gets the <see cref="T:netDxf.AciColor">color</see> from a 24-bit color value.
            </summary>
            <param name="value">A 32-bit color value.</param>
            <returns>A <see cref="T:netDxf.AciColor">color</see>.</returns>
        </member>
        <member name="M:netDxf.AciColor.ToTrueColor(netDxf.AciColor)">
            <summary>
            Gets the 32-bit color value from an AciColor.
            </summary>
            <param name="color">A <see cref="T:netDxf.AciColor">color</see>.</param>
            <returns>A 32-bit color value.</returns>
        </member>
        <member name="M:netDxf.AciColor.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:netDxf.AciColor.Clone">
            <summary>
            Creates a new color that is a copy of the current instance.
            </summary>
            <returns>A new color that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.AciColor.Equals(netDxf.AciColor)">
            <summary>
            Check if the components of two colors are equal.
            </summary>
            <param name="other">Another color to compare to.</param>
            <returns>True if the three components are equal or false in any other case.</returns>
        </member>
        <member name="T:netDxf.BezierCurve">
            <summary>
            Represent a bezier curve.
            </summary>
        </member>
        <member name="M:netDxf.BezierCurve.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector3})">
            <summary>
            Initializes a new instance of the <c>BezierCurve</c> class.
            </summary>
            <param name="controlPoints">A list of control points.</param>
            <remarks>
            The curve degree will be equal to the number of control points minus one.
            </remarks>
        </member>
        <member name="P:netDxf.BezierCurve.ControlPoints">
            <summary>
            Gets the control points.
            </summary>
        </member>
        <member name="P:netDxf.BezierCurve.Degree">
            <summary>
            Gets the bezier curve degree.
            </summary>
        </member>
        <member name="M:netDxf.BezierCurve.CalculatePoint(System.Double)">
            <summary>
            Obtains a point along the curve at parameter t.
            </summary>
            <param name="t">Parameter t, between 0.0 and 1.0.</param>
            <returns>A point along the curve.</returns>
        </member>
        <member name="M:netDxf.BezierCurve.CalculateTangent(System.Double)">
            <summary>
            Calculates the tangent vector at parameter t.
            </summary>
            <param name="t">Parameter t, between 0.0 and 1.0.</param>
            <returns>A normalized tangent vector.</returns>
        </member>
        <member name="T:netDxf.BezierCurveCubic">
            <summary>
            Represent a cubic bezier curve.
            </summary>
        </member>
        <member name="M:netDxf.BezierCurveCubic.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector3})">
            <summary>
            Initializes a new instance of the <c>BezierCurve</c> class.
            </summary>
            <param name="controlPoints">A list of four control points.</param>
            <remarks>
            The list must contain four control points.
            The first index represents the start point or anchor,
            the second represents the first control point,
            the third the second control point,
            and the last the end point.
            </remarks>
        </member>
        <member name="M:netDxf.BezierCurveCubic.#ctor(netDxf.Vector3,netDxf.Vector3,netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>BezierCurve</c> class.
            </summary>
            <param name="startPoint">Start anchor point.</param>
            <param name="firstControlPoint">First control point.</param>
            <param name="secondControlPoint">Second control point.</param>
            <param name="endPoint">End anchor point.</param>
        </member>
        <member name="P:netDxf.BezierCurveCubic.StartPoint">
            <summary>
            Gets or sets the curve start point.
            </summary>
        </member>
        <member name="P:netDxf.BezierCurveCubic.FirstControlPoint">
            <summary>
            Gets or sets the first control point.
            </summary>
        </member>
        <member name="P:netDxf.BezierCurveCubic.SecondControlPoint">
            <summary>
            Gets or sets the second control point.
            </summary>
        </member>
        <member name="P:netDxf.BezierCurveCubic.EndPoint">
            <summary>
            Gets or sets the curve end point.
            </summary>
        </member>
        <member name="M:netDxf.BezierCurveCubic.CalculatePoint(System.Double)">
            <summary>
            Obtains a point along the curve at parameter t.
            </summary>
            <param name="t">Parameter t, between 0.0 and 1.0.</param>
            <returns>A point along the curve.</returns>
        </member>
        <member name="M:netDxf.BezierCurveCubic.CalculateTangent(System.Double)">
            <summary>
            Calculates the tangent vector at parameter t.
            </summary>
            <param name="t">Parameter t, between 0.0 and 1.0.</param>
            <returns>A normalized tangent vector.</returns>
        </member>
        <member name="M:netDxf.BezierCurveCubic.Split(System.Double)">
            <summary>
            Splits the actual bezier curve in two at parameter t.
            </summary>
            <param name="t">Parameter t, between 0.0 and 1.0.</param>
            <returns>The two curves result of dividing the actual curve at parameter t.</returns>
        </member>
        <member name="M:netDxf.BezierCurveCubic.Reverse">
            <summary>
            Switch the bezier curve direction.
            </summary>
        </member>
        <member name="M:netDxf.BezierCurveCubic.PolygonalVertexes(System.Int32)">
            <summary>
            Converts the bezier curve in a list of vertexes.
            </summary>
            <param name="precision">Number of vertexes generated.</param>
            <returns>A list vertexes that represents the bezier curve.</returns>
        </member>
        <member name="M:netDxf.BezierCurveCubic.CreateFromFitPoints(System.Collections.Generic.IEnumerable{netDxf.Vector3})">
            <summary>
            Generate a list of continuous cubic bezier curves that passes through a set of points.
            </summary>
            <param name="fitPoints">List of points.</param>
            <returns>A list of cubic bezier curves.</returns>
            <returns>
            Original https://www.codeproject.com/Articles/31859/Draw-a-Smooth-Curve-through-a-Set-of-2D-Points-wit by Oleg V. Polikarpotchkin and Peter Lee.
            Modified to allow the use of 3D points, and other minor changes to accomodate the existing classes of this library.<br />
            The total number of curves returned will be equal to the number of fit points minus 1,
            therefore this method is not suitable to use over large number of fit points,
            where other, more computational heavy methods, like the least-squares bezier curve fitting would return a less amount of curves.
            In such cases, it is advisable to perform some method to reduce the number of points and to avoid duplicates or very close points.
            </returns>
        </member>
        <member name="M:netDxf.BezierCurveCubic.GetFirstControlPoints(System.Double[])">
            <summary>
            Solves a tri-diagonal system for one of coordinates (X, Y, or Z) of first Bezier control points.
            </summary>
            <param name="rhs">Right hand side vector.</param>
            <returns>Solution vector.</returns>
        </member>
        <member name="T:netDxf.BezierCurveQuadratic">
            <summary>
            Represent a quadratic bezier curve.
            </summary>
        </member>
        <member name="M:netDxf.BezierCurveQuadratic.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector3})">
            <summary>
            Initializes a new instance of the <c>BezierCurveQuadratic</c> class.
            </summary>
            <param name="controlPoints">A list of three control points.</param>
            <remarks>
            The list must contain three control points.
            The first index represents the start point or anchor,
            the second represents the control point,
            and the last the end point.
            </remarks>
        </member>
        <member name="M:netDxf.BezierCurveQuadratic.#ctor(netDxf.Vector3,netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>BezierCurve</c> class.
            </summary>
            <param name="startPoint">Start anchor point.</param>
            <param name="controlPoint">Second control point.</param>
            <param name="endPoint">End anchor point.</param>
        </member>
        <member name="P:netDxf.BezierCurveQuadratic.StartPoint">
            <summary>
            Gets or sets the curve start point.
            </summary>
        </member>
        <member name="P:netDxf.BezierCurveQuadratic.ControlPoint">
            <summary>
            Gets or sets the control point.
            </summary>
        </member>
        <member name="P:netDxf.BezierCurveQuadratic.EndPoint">
            <summary>
            Gets or sets the curve end point.
            </summary>
        </member>
        <member name="M:netDxf.BezierCurveQuadratic.CalculatePoint(System.Double)">
            <summary>
            Obtains a point along the curve at parameter t.
            </summary>
            <param name="t">Parameter t, between 0.0 and 1.0.</param>
            <returns>A point along the curve.</returns>
        </member>
        <member name="M:netDxf.BezierCurveQuadratic.CalculateTangent(System.Double)">
            <summary>
            Calculates the tangent vector at parameter t.
            </summary>
            <param name="t">Parameter t, between 0.0 and 1.0.</param>
            <returns>A normalized tangent vector.</returns>
        </member>
        <member name="M:netDxf.BezierCurveQuadratic.Split(System.Double)">
            <summary>
            Splits the actual bezier curve in two at parameter t.
            </summary>
            <param name="t">Parameter t, between 0.0 and 1.0.</param>
            <returns>The two curves result of dividing the actual curve at parameter t.</returns>
        </member>
        <member name="M:netDxf.BezierCurveQuadratic.Reverse">
            <summary>
            Switch the bezier curve direction.
            </summary>
        </member>
        <member name="M:netDxf.BezierCurveQuadratic.PolygonalVertexes(System.Int32)">
            <summary>
            Converts the bezier curve in a list of vertexes.
            </summary>
            <param name="precision">Number of vertexes generated.</param>
            <returns>A list vertexes that represents the bezier curve.</returns>
        </member>
        <member name="T:netDxf.Blocks.Block">
            <summary>
            Represents a block definition.
            </summary>
        </member>
        <member name="F:netDxf.Blocks.Block.DefaultModelSpaceName">
            <summary>
            Default ModelSpace block name.
            </summary>
        </member>
        <member name="F:netDxf.Blocks.Block.DefaultPaperSpaceName">
            <summary>
            Default PaperSpace block name.
            </summary>
        </member>
        <member name="P:netDxf.Blocks.Block.ModelSpace">
            <summary>
            Gets the default *Model_Space block.
            </summary>
        </member>
        <member name="P:netDxf.Blocks.Block.PaperSpace">
            <summary>
            Gets the default *Paper_Space block.
            </summary>
        </member>
        <member name="M:netDxf.Blocks.Block.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>Block</c> class as an external reference drawing. 
            </summary>
            <param name="name">Block name.</param>
            <param name="xrefFile">External reference path name.</param>
            <remarks>Only DWG files can be used as externally referenced blocks.</remarks>
        </member>
        <member name="M:netDxf.Blocks.Block.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>Block</c> class as an external reference drawing. 
            </summary>
            <param name="name">Block name.</param>
            <param name="xrefFile">External reference path name.</param>
            <param name="overlay">Specifies if the external reference is an overlay, by default it is set to false.</param>
            <remarks>Only DWG files can be used as externally referenced blocks.</remarks>
        </member>
        <member name="M:netDxf.Blocks.Block.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>Block</c> class.
            </summary>
            <param name="name">Block name.</param>
        </member>
        <member name="M:netDxf.Blocks.Block.#ctor(System.String,System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject})">
            <summary>
            Initializes a new instance of the <c>Block</c> class.
            </summary>
            <param name="name">Block name.</param>
            <param name="entities">The list of entities that make the block.</param>
        </member>
        <member name="M:netDxf.Blocks.Block.#ctor(System.String,System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject},System.Collections.Generic.IEnumerable{netDxf.Entities.AttributeDefinition})">
            <summary>
            Initializes a new instance of the <c>Block</c> class.
            </summary>
            <param name="name">Block name.</param>
            <param name="entities">The list of entities that make the block.</param>
            <param name="attributes">The list of attribute definitions that make the block.</param>
        </member>
        <member name="P:netDxf.Blocks.Block.Name">
            <summary>
            Gets the name of the table object.
            </summary>
            <remarks>
            Table object names are case insensitive.<br />
            The internal blocks that start with "*U" or "*T" can be safely renamed.
            They are internally created to represent dynamic blocks, arrays, and tables;
            although the information of those objects is lost when importing the DXF,
            the block that represent its graphical appearance is imported.
            </remarks>
        </member>
        <member name="P:netDxf.Blocks.Block.Description">
            <summary>
            Gets or sets the block description.
            </summary>
            <remarks>
            AutoCAD has an unknown limit on the number of characters for the description when loading an external DXF,
            while, on the other hand is perfectly capable of saving a Block description that surpasses such limit.<br />
            Keep in mind that when saving a DXF prior to the AutoCad2007 version, non-ASCII characters will be encoded,
            therefore a single letter might consume more characters when saved into the DXF.<br />
            New line characters are not allowed.
            </remarks>
        </member>
        <member name="P:netDxf.Blocks.Block.Origin">
            <summary>
            Gets or sets the block origin in world coordinates, it is recommended to always keep this value to the default Vector3.Zero.
            </summary>
        </member>
        <member name="P:netDxf.Blocks.Block.Layer">
            <summary>
            Gets or sets the block <see cref="P:netDxf.Blocks.Block.Layer">layer</see>.
            </summary>
            <remarks>It seems that the block layer is always the default "0" regardless of what is defined here, so it is pointless to change this value.</remarks>
        </member>
        <member name="P:netDxf.Blocks.Block.Entities">
            <summary>
            Gets the <see cref="T:netDxf.Entities.EntityObject">entity</see> list of the block.
            </summary>
            <remarks>Null entities, attribute definitions or entities already owned by another block or document cannot be added to the list.</remarks>
        </member>
        <member name="P:netDxf.Blocks.Block.AttributeDefinitions">
            <summary>
            Gets the <see cref="T:netDxf.Entities.AttributeDefinition">entity</see> list of the block.
            </summary>
            <remarks>
            Null or attribute definitions already owned by another block or document cannot be added to the list.
            Additionally Paper Space blocks do not contain attribute definitions.
            </remarks>
        </member>
        <member name="P:netDxf.Blocks.Block.Record">
            <summary>
            Gets the block record associated with this block.
            </summary>
            <remarks>It returns the same object as the owner property.</remarks>
        </member>
        <member name="P:netDxf.Blocks.Block.Flags">
            <summary>
            Gets the block-type flags (bit-coded values, may be combined).
            </summary>
        </member>
        <member name="P:netDxf.Blocks.Block.XrefFile">
            <summary>
            Gets the external reference path name.
            </summary>
            <remarks>
            This property is only applicable to externally referenced blocks.
            </remarks>
        </member>
        <member name="P:netDxf.Blocks.Block.IsXRef">
            <summary>
            Gets if the block is an external reference.
            </summary>
        </member>
        <member name="P:netDxf.Blocks.Block.IsForInternalUseOnly">
            <summary>
            All blocks that starts with "*" are for internal use only.
            </summary>
        </member>
        <member name="P:netDxf.Blocks.Block.End">
            <summary>
            Gets or sets the block end object.
            </summary>
        </member>
        <member name="M:netDxf.Blocks.Block.Create(netDxf.DxfDocument,System.String)">
            <summary>
            Creates a block from the content of a <see cref="T:netDxf.DxfDocument">document</see>.
            </summary>
            <param name="doc">A <see cref="T:netDxf.DxfDocument">DxfDocument</see> instance.</param>
            <param name="name">Name of the new block.</param>
            <returns>The block build from the <see cref="T:netDxf.DxfDocument">document</see> content.</returns>
            <remarks>Only the entities contained in ModelSpace will make part of the block.</remarks>
        </member>
        <member name="M:netDxf.Blocks.Block.Load(System.String)">
            <summary>
            Creates a block from an external DXF file.
            </summary>
            <param name="file">DXF file name.</param>
            <returns>The block build from the DXF file content. It will return null if the file has not been able to load.</returns>
            <remarks>
            The name of the block will be the file name without extension, and
            only the entities contained in ModelSpace will make part of the block.
            </remarks>
        </member>
        <member name="M:netDxf.Blocks.Block.Load(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a block from an external DXF file.
            </summary>
            <param name="file">DXF file name.</param>
            <param name="supportFolders">List of the document support folders.</param>
            <returns>The block build from the DXF file content. It will return null if the file has not been able to load.</returns>
            <remarks>
            The name of the block will be the file name without extension, and
            only the entities contained in ModelSpace will make part of the block.
            </remarks>
        </member>
        <member name="M:netDxf.Blocks.Block.Load(System.String,System.String)">
            <summary>
            Creates a block from an external DXF file.
            </summary>
            <param name="file">DXF file name.</param>
            <param name="name">Name of the new block.</param>
            <returns>The block build from the DXF file content. It will return null if the file has not been able to load.</returns>
            <remarks>Only the entities contained in ModelSpace will make part of the block.</remarks>
        </member>
        <member name="M:netDxf.Blocks.Block.Load(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a block from an external DXF file.
            </summary>
            <param name="file">DXF file name.</param>
            <param name="name">Name of the new block.</param>
            <param name="supportFolders">List of the document support folders.</param>
            <returns>The block build from the DXF file content. It will return null if the file has not been able to load.</returns>
            <remarks>Only the entities contained in ModelSpace will make part of the block.</remarks>
        </member>
        <member name="M:netDxf.Blocks.Block.Save(System.String,netDxf.Header.DxfVersion)">
            <summary>
            Saves a block to a text DXF file.
            </summary>
            <param name="file">DXF file name.</param>
            <param name="version">Version of the DXF database version.</param>
            <returns>Return true if the file has been successfully save, false otherwise.</returns>
        </member>
        <member name="M:netDxf.Blocks.Block.Save(System.String,netDxf.Header.DxfVersion,System.Boolean)">
            <summary>
            Saves a block to a DXF file.
            </summary>
            <param name="file">DXF file name.</param>
            <param name="version">Version of the DXF database version.</param>
            <param name="isBinary">Defines if the file will be saved as binary.</param>
            <returns>Return true if the file has been successfully save, false otherwise.</returns>
        </member>
        <member name="M:netDxf.Blocks.Block.Clone(System.String)">
            <summary>
            Creates a new Block that is a copy of the current instance.
            </summary>
            <param name="newName">Block name of the copy.</param>
            <returns>A new Block that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Blocks.Block.Clone">
            <summary>
            Creates a new Block that is a copy of the current instance.
            </summary>
            <returns>A new Block that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Blocks.Block.AssignHandle(System.Int64)">
            <summary>
            Assigns a handle to the object based in a integer counter.
            </summary>
            <param name="entityNumber">Number to assign.</param>
            <returns>Next available entity number.</returns>
            <remarks>
            Some objects might consume more than one, is, for example, the case of polylines that will assign
            automatically a handle to its vertexes. The entity number will be converted to an hexadecimal number.
            </remarks>
        </member>
        <member name="T:netDxf.Blocks.BlockAttributeDefinitionChangeEventArgs">
            <summary>
            Represents the arguments thrown when an attribute definition is added ore removed from a <see cref="T:netDxf.Blocks.Block">Block</see>.
            </summary>
        </member>
        <member name="M:netDxf.Blocks.BlockAttributeDefinitionChangeEventArgs.#ctor(netDxf.Entities.AttributeDefinition)">
            <summary>
            Initializes a new instance of <c>BlockAttributeDefinitionChangeEventArgs</c>.
            </summary>
            <param name="item">The attribute definition that is being added or removed from the block.</param>
        </member>
        <member name="P:netDxf.Blocks.BlockAttributeDefinitionChangeEventArgs.Item">
            <summary>
            Gets the attribute definition that is being added or removed.
            </summary>
        </member>
        <member name="T:netDxf.Blocks.BlockEntityChangeEventArgs">
            <summary>
            Represents the arguments thrown when an entity is added ore removed from a <see cref="T:netDxf.Blocks.Block">Block</see>.
            </summary>
        </member>
        <member name="M:netDxf.Blocks.BlockEntityChangeEventArgs.#ctor(netDxf.Entities.EntityObject)">
            <summary>
            Initializes a new instance of <c>BlockEntityChangeEventArgs</c>.
            </summary>
            <param name="item">The entity that is being added or removed from the block.</param>
        </member>
        <member name="P:netDxf.Blocks.BlockEntityChangeEventArgs.Item">
            <summary>
            Gets the entity that is being added or removed.
            </summary>
        </member>
        <member name="T:netDxf.Blocks.BlockRecord">
            <summary>
            Represent the record of a block in the tables section.
            </summary>
        </member>
        <member name="M:netDxf.Blocks.BlockRecord.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>BlockRecord</c> class.
            </summary>
            <param name="name">Block definition name.</param>
        </member>
        <member name="P:netDxf.Blocks.BlockRecord.Name">
            <summary>
            Gets the name of the block record.
            </summary>
            <remarks>
            Block record names are case insensitive.<br />
            The block which name starts with "*" are for internal purpose only.
            </remarks>
        </member>
        <member name="P:netDxf.Blocks.BlockRecord.Layout">
            <summary>
            Gets the associated Layout.
            </summary>
        </member>
        <member name="P:netDxf.Blocks.BlockRecord.Units">
            <summary>
            Gets or sets the block insertion units.
            </summary>
        </member>
        <member name="P:netDxf.Blocks.BlockRecord.DefaultUnits">
            <summary>
            Gets or sets the default block units.
            </summary>
            <remarks>These are the units that all new blocks will use as default.</remarks>
        </member>
        <member name="P:netDxf.Blocks.BlockRecord.AllowExploding">
            <summary>
            Gets or sets if the block can be exploded.
            </summary>
            <remarks>
            This property is only compatible with DXF version AutoCad2007 and upwards.
            </remarks>
        </member>
        <member name="P:netDxf.Blocks.BlockRecord.ScaleUniformly">
            <summary>
            Gets or sets if the block must be scaled uniformly.
            </summary>
            <remarks>
            This property is only compatible with DXF version AutoCad2007 and upwards.
            </remarks>
        </member>
        <member name="P:netDxf.Blocks.BlockRecord.Owner">
            <summary>
            Gets the owner of the actual DXF object.
            </summary>
        </member>
        <member name="P:netDxf.Blocks.BlockRecord.IsForInternalUseOnly">
            <summary>
            Gets if the block record is for internal use only.
            </summary>
            <remarks>
            All blocks which name starts with "*" are for internal use and should not be modified.
            </remarks>
        </member>
        <member name="M:netDxf.Blocks.BlockRecord.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:netDxf.Blocks.BlockTypeFlags">
            <summary>
            Block-type flags (bit-coded values, may be combined).
            </summary>
        </member>
        <member name="F:netDxf.Blocks.BlockTypeFlags.None">
            <summary>
            Indicates none of the following flags apply.
            </summary>
        </member>
        <member name="F:netDxf.Blocks.BlockTypeFlags.AnonymousBlock">
            <summary>
            This is an anonymous block generated by hatching, associative dimensioning, other internal operations, or an application.
            </summary>
        </member>
        <member name="F:netDxf.Blocks.BlockTypeFlags.NonConstantAttributeDefinitions">
            <summary>
            This block has non-constant attribute definitions
            (this bit is not set if the block has any attribute definitions that are constant, or has no attribute definitions at all).
            </summary>
        </member>
        <member name="F:netDxf.Blocks.BlockTypeFlags.XRef">
            <summary>
            This block is an external reference.
            </summary>
        </member>
        <member name="F:netDxf.Blocks.BlockTypeFlags.XRefOverlay">
            <summary>
            This block is an external reference overlay.
            </summary>
        </member>
        <member name="F:netDxf.Blocks.BlockTypeFlags.ExternallyDependent">
            <summary>
            This block is externally dependent.
            </summary>
        </member>
        <member name="F:netDxf.Blocks.BlockTypeFlags.ResolvedExternalReference">
            <summary>
            This is a resolved external reference, or dependent of an external reference (ignored on input).
            </summary>
        </member>
        <member name="F:netDxf.Blocks.BlockTypeFlags.DefinitionExternalReference">
            <summary>
            This definition is a referenced external reference (ignored on input).
            </summary>
        </member>
        <member name="T:netDxf.Blocks.EndBlock">
            <summary>
            Represents the termination element of the block definition.
            </summary>
        </member>
        <member name="M:netDxf.Blocks.EndBlock.#ctor(netDxf.DxfObject)">
            <summary>
            Initializes a new instance of the <c>BlockEnd</c> class.
            </summary>
        </member>
        <member name="T:netDxf.BoundingRectangle">
            <summary>
            Represents an axis aligned bounding rectangle.
            </summary>
        </member>
        <member name="M:netDxf.BoundingRectangle.#ctor(netDxf.Vector2,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new axis aligned bounding rectangle from a rotated ellipse.
            </summary>
            <param name="center">Center of the ellipse.</param>
            <param name="majorAxis">Major axis of the ellipse.</param>
            <param name="minorAxis">Minor axis of the ellipse.</param>
            <param name="rotation">Rotation in degrees of the ellipse.</param>
        </member>
        <member name="M:netDxf.BoundingRectangle.#ctor(netDxf.Vector2,System.Double)">
            <summary>
            Initializes a new axis aligned bounding rectangle from a circle.
            </summary>
            <param name="center">Center of the bounding rectangle.</param>
            <param name="radius">Radius of the circle.</param>
        </member>
        <member name="M:netDxf.BoundingRectangle.#ctor(netDxf.Vector2,System.Double,System.Double)">
            <summary>
            Initializes a new axis aligned bounding rectangle.
            </summary>
            <param name="center">Center of the bounding rectangle.</param>
            <param name="width">Width of the bounding rectangle.</param>
            <param name="height">Height of the bounding rectangle.</param>
        </member>
        <member name="M:netDxf.BoundingRectangle.#ctor(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Initializes a new axis aligned bounding rectangle.
            </summary>
            <param name="min">Lower-left corner.</param>
            <param name="max">Upper-right corner.</param>
        </member>
        <member name="M:netDxf.BoundingRectangle.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector2})">
            <summary>
            Initializes a new axis aligned bounding rectangle.
            </summary>
            <param name="points">A list of Vector2.</param>
        </member>
        <member name="P:netDxf.BoundingRectangle.Min">
            <summary>
            Gets or sets the bounding rectangle lower-left corner.
            </summary>
        </member>
        <member name="P:netDxf.BoundingRectangle.Max">
            <summary>
            Gets or sets the bounding rectangle upper-right corner.
            </summary>
        </member>
        <member name="P:netDxf.BoundingRectangle.Center">
            <summary>
            Gets the bounding rectangle center.
            </summary>
        </member>
        <member name="P:netDxf.BoundingRectangle.Radius">
            <summary>
            Gets the radius of the circle that contains the bounding rectangle.
            </summary>
        </member>
        <member name="P:netDxf.BoundingRectangle.Width">
            <summary>
            Gets the bounding rectangle width.
            </summary>
        </member>
        <member name="P:netDxf.BoundingRectangle.Height">
            <summary>
            Gets the bounding rectangle height.
            </summary>
        </member>
        <member name="M:netDxf.BoundingRectangle.PointInside(netDxf.Vector2)">
            <summary>
            Checks if a point is inside the bounding rectangle.
            </summary>
            <param name="point">Vector2 to check.</param>
            <returns>True if the point is inside the bounding rectangle, false otherwise.</returns>
            <remarks></remarks>
        </member>
        <member name="M:netDxf.BoundingRectangle.Union(netDxf.BoundingRectangle,netDxf.BoundingRectangle)">
            <summary>
            Obtains the union between two bounding rectangles.
            </summary>
            <param name="aabr1">A bounding rectangle.</param>
            <param name="aabr2">A bounding rectangle.</param>
            <returns>The resulting bounding rectangle.</returns>
        </member>
        <member name="M:netDxf.BoundingRectangle.Union(System.Collections.Generic.IEnumerable{netDxf.BoundingRectangle})">
            <summary>
            Obtains the union of a bounding rectangles list.
            </summary>
            <param name="rectangles">A list of bounding rectangles.</param>
            <returns>The resulting bounding rectangle.</returns>
        </member>
        <member name="T:netDxf.ClippingBoundary">
            <summary>
            Represent a clipping boundary to display specific portions of
            an <see cref="T:netDxf.Entities.Image">Image</see>,
            an <see cref="T:netDxf.Entities.Underlay">Underlay</see>,
            or a <see cref="T:netDxf.Entities.Wipeout">Wipeout</see>.
            </summary>
        </member>
        <member name="M:netDxf.ClippingBoundary.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>ClippingBoundary</c> class as a rectangular clipping boundary.
            </summary>
            <param name="x">Rectangle x-coordinate of the first corner.</param>
            <param name="y">Rectangle y-coordinate of the first corner.</param>
            <param name="width">Rectangle width.</param>
            <param name="height">Rectangle height.</param>
        </member>
        <member name="M:netDxf.ClippingBoundary.#ctor(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>ClippingBoundary</c> class as a rectangular clipping boundary from two opposite corners.
            </summary>
            <param name="firstCorner">Rectangle first corner.</param>
            <param name="secondCorner">Rectangle second corner.</param>
        </member>
        <member name="M:netDxf.ClippingBoundary.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector2})">
            <summary>
            Initializes a new instance of the <c>ClippingBoundary</c> class as a polygonal clipping boundary.
            </summary>
            <param name="vertexes">The list of vertexes of the polygonal boundary.</param>
        </member>
        <member name="P:netDxf.ClippingBoundary.Type">
            <summary>
            Gets the clipping boundary type, rectangular or polygonal.
            </summary>
        </member>
        <member name="P:netDxf.ClippingBoundary.Vertexes">
            <summary>
            Gets the list of vertexes of the polygonal boundary, or the opposite vertexes if the boundary is rectangular.
            </summary>
        </member>
        <member name="M:netDxf.ClippingBoundary.Clone">
            <summary>
            Creates a new ClippingBoundary that is a copy of the current instance.
            </summary>
            <returns>A new ClippingBoundary that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.ClippingBoundaryType">
            <summary>
            Image clipping boundary type.
            </summary>
        </member>
        <member name="F:netDxf.ClippingBoundaryType.Rectangular">
            <summary>
            Rectangular.
            </summary>
        </member>
        <member name="F:netDxf.ClippingBoundaryType.Polygonal">
            <summary>
            Polygonal.
            </summary>
        </member>
        <member name="T:netDxf.Collections.ApplicationRegistries">
            <summary>
            Represents a collection of application registries.
            </summary>
        </member>
        <member name="M:netDxf.Collections.ApplicationRegistries.Add(netDxf.Tables.ApplicationRegistry,System.Boolean)">
            <summary>
            Adds an application registry to the list.
            </summary>
            <param name="appReg"><see cref="T:netDxf.Tables.ApplicationRegistry">ApplicationRegistry</see> to add to the list.</param>
            <param name="assignHandle">Checks if the appReg parameter requires a handle.</param>
            <returns>
            If a an application registry already exists with the same name as the instance that is being added the method returns the existing application registry,
            if not it will return the new application registry.
            </returns>
        </member>
        <member name="M:netDxf.Collections.ApplicationRegistries.Remove(System.String)">
            <summary>
            Removes an application registry.
            </summary>
            <param name="name"><see cref="T:netDxf.Tables.ApplicationRegistry">ApplicationRegistry</see> name to remove from the document.</param>
            <returns>True if the application registry has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved application registries or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.ApplicationRegistries.Remove(netDxf.Tables.ApplicationRegistry)">
            <summary>
            Removes an application registry.
            </summary>
            <param name="item"><see cref="T:netDxf.Tables.ApplicationRegistry">ApplicationRegistry</see> to remove from the document.</param>
            <returns>True if the application registry has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved application registries or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.AttributeCollection">
            <summary>
            Represents a collection of <see cref="T:netDxf.Entities.Attribute">Attributes</see>.
            </summary>
        </member>
        <member name="M:netDxf.Collections.AttributeCollection.#ctor">
            <summary>
            Initializes a new instance of <c>AttributeCollection</c> with the specified collection of attributes.
            </summary>
        </member>
        <member name="M:netDxf.Collections.AttributeCollection.#ctor(System.Collections.Generic.IEnumerable{netDxf.Entities.Attribute})">
            <summary>
            Initializes a new instance of <c>AttributeCollection</c> with the specified collection of attributes.
            </summary>
            <param name="attributes">The collection of attributes from which build the dictionary.</param>
        </member>
        <member name="P:netDxf.Collections.AttributeCollection.Count">
            <summary>
            Gets the number of object contained in the collection.
            </summary>
        </member>
        <member name="P:netDxf.Collections.AttributeCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="P:netDxf.Collections.AttributeCollection.Item(System.Int32)">
            <summary>
            Gets the attribute at the specified index.
            </summary>
            <param name="index"> The zero-based index of the element to get or set.</param>
            <returns>The object at the specified index.</returns>
        </member>
        <member name="M:netDxf.Collections.AttributeCollection.Contains(netDxf.Entities.Attribute)">
            <summary>
            Determines whether an attribute is in the collection.
            </summary>
            <param name="item">The attribute to locate in the collection.</param>
            <returns>True if attribute is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.AttributeCollection.CopyTo(netDxf.Entities.Attribute[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array"> The one-dimensional System.Array that is the destination of the elements copied from the collection. The System.Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:netDxf.Collections.AttributeCollection.IndexOf(netDxf.Entities.Attribute)">
            <summary>
            Searches for the specified attribute and returns the zero-based index of the first occurrence within the entire collection.
            </summary>
            <param name="item">The attribute to locate in the collection.</param>
            <returns>The zero-based index of the first occurrence of item within the entire collection, if found; otherwise, –1.</returns>
        </member>
        <member name="M:netDxf.Collections.AttributeCollection.AttributeWithTag(System.String)">
            <summary>
            Searches for the first occurrence attribute with the specified attribute definition tag within the entire collection
            </summary>
            <param name="tag"></param>
            <returns>The first occurrence of the attribute with the specified attribute definition tag within the entire collection.</returns>
        </member>
        <member name="M:netDxf.Collections.AttributeCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:netDxf.Collections.AttributeDefinitionDictionary">
            <summary>
            Represents a dictionary of <see cref="T:netDxf.Entities.AttributeDefinition">AttributeDefinitions</see>.
            </summary>
        </member>
        <member name="M:netDxf.Collections.AttributeDefinitionDictionary.#ctor">
            <summary>
            Initializes a new instance of <c>AttributeDefinitionDictionary</c>.
            </summary>
        </member>
        <member name="M:netDxf.Collections.AttributeDefinitionDictionary.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <c>AttributeDefinitionDictionary</c> and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of items the collection can initially store.</param>
        </member>
        <member name="P:netDxf.Collections.AttributeDefinitionDictionary.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> with the specified tag.
            </summary>
            <param name="tag">The tag of the attribute definition to get or set.</param>
            <returns>The <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> with the specified tag.</returns>
        </member>
        <member name="P:netDxf.Collections.AttributeDefinitionDictionary.Tags">
            <summary>
            Gets an ICollection containing the tags of the current dictionary.
            </summary>
        </member>
        <member name="P:netDxf.Collections.AttributeDefinitionDictionary.Values">
            <summary>
            Gets an ICollection containing the <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> list of the current dictionary.
            </summary>
        </member>
        <member name="P:netDxf.Collections.AttributeDefinitionDictionary.Count">
            <summary>
            Gets the number of <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> contained in the current dictionary.
            </summary>
        </member>
        <member name="P:netDxf.Collections.AttributeDefinitionDictionary.IsReadOnly">
            <summary>
            Gets a value indicating whether the actual dictionary is read-only.
            </summary>
        </member>
        <member name="M:netDxf.Collections.AttributeDefinitionDictionary.Add(netDxf.Entities.AttributeDefinition)">
            <summary>
            Adds an <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> to the dictionary.
            </summary>
            <param name="item">The <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> to add.</param>
        </member>
        <member name="M:netDxf.Collections.AttributeDefinitionDictionary.AddRange(System.Collections.Generic.IEnumerable{netDxf.Entities.AttributeDefinition})">
            <summary>
            Adds an <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> list to the dictionary.
            </summary>
            <param name="collection">The collection whose elements should be added.</param>
        </member>
        <member name="M:netDxf.Collections.AttributeDefinitionDictionary.Remove(System.String)">
            <summary>
            Removes an <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> with the specified tag from the current dictionary.
            </summary>
            <param name="tag">The tag of the <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> to remove.</param>
            <returns>True if the <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> is successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.AttributeDefinitionDictionary.Clear">
            <summary>
            Removes all <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> from the current dictionary.
            </summary>
        </member>
        <member name="M:netDxf.Collections.AttributeDefinitionDictionary.ContainsTag(System.String)">
            <summary>
            Determines whether current dictionary contains an <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> with the specified tag.
            </summary>
            <param name="tag">The tag to locate in the current dictionary.</param>
            <returns>True if the current dictionary contains an <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> with the tag; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.AttributeDefinitionDictionary.ContainsValue(netDxf.Entities.AttributeDefinition)">
            <summary>
            Determines whether current dictionary contains a specified <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see>.
            </summary>
            <param name="value">The <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> to locate in the current dictionary.</param>
            <returns>True if the current dictionary contains the <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see>; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.AttributeDefinitionDictionary.TryGetValue(System.String,netDxf.Entities.AttributeDefinition@)">
            <summary>
            Gets the <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> associated with the specified tag.
            </summary>
            <param name="tag">The tag whose value to get.</param>
            <param name="value">When this method returns, the <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> associated with the specified tag,
            if the tag is found; otherwise, null. This parameter is passed uninitialized.</param>
            <returns>True if the current dictionary contains an <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> with the specified tag; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.AttributeDefinitionDictionary.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the dictionary.
            </summary>
            <returns>An enumerator that can be used to iterate through the dictionary.</returns>
        </member>
        <member name="T:netDxf.Collections.AttributeDefinitionDictionaryEventArgs">
            <summary>
            Represents the arguments thrown by the <see cref="T:netDxf.Collections.AttributeDefinitionDictionary">AttributeDefinitionDictionary</see> events.
            </summary>
        </member>
        <member name="M:netDxf.Collections.AttributeDefinitionDictionaryEventArgs.#ctor(netDxf.Entities.AttributeDefinition)">
            <summary>
            Initializes a new instance of <c>AttributeDefinitionDictionaryEventArgs</c>.
            </summary>
            <param name="item">Item that is being added or removed from the dictionary.</param>
        </member>
        <member name="P:netDxf.Collections.AttributeDefinitionDictionaryEventArgs.Item">
            <summary>
            Get the item that is being added to or removed from the dictionary.
            </summary>
        </member>
        <member name="P:netDxf.Collections.AttributeDefinitionDictionaryEventArgs.Cancel">
            <summary>
            Gets or sets if the operation must be canceled.
            </summary>
            <remarks>This property is used by the BeforeAddItem and BeforeRemoveItem events to cancel the add or remove operations.</remarks>
        </member>
        <member name="T:netDxf.Collections.BlockRecords">
            <summary>
            Represents a collection of blocks.
            </summary>
        </member>
        <member name="M:netDxf.Collections.BlockRecords.Add(netDxf.Blocks.Block,System.Boolean)">
            <summary>
            Adds a block to the list.
            </summary>
            <param name="block"><see cref="T:netDxf.Blocks.Block">Block</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the block parameter.</param>
            <returns>
            If a block already exists with the same name as the instance that is being added the method returns the existing block,
            if not it will return the new block.
            </returns>
        </member>
        <member name="M:netDxf.Collections.BlockRecords.Remove(System.String)">
            <summary>
            Removes a block.
            </summary>
            <param name="name"><see cref="T:netDxf.Blocks.Block">Block</see> name to remove from the document.</param>
            <returns>True if the block has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved blocks or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.BlockRecords.Remove(netDxf.Blocks.Block)">
            <summary>
            Removes a block.
            </summary>
            <param name="item"><see cref="T:netDxf.Blocks.Block">Block</see> to remove from the document.</param>
            <returns>True if the block has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved blocks or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.DimensionStyleOverrideDictionary">
            <summary>
            Represents a dictionary of <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverrides</see>.
            </summary>
        </member>
        <member name="M:netDxf.Collections.DimensionStyleOverrideDictionary.#ctor">
            <summary>
            Initializes a new instance of <c>DimensionStyleOverrideDictionary</c>.
            </summary>
        </member>
        <member name="M:netDxf.Collections.DimensionStyleOverrideDictionary.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <c>DimensionStyleOverrideDictionary</c> and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of items the collection can initially store.</param>
        </member>
        <member name="P:netDxf.Collections.DimensionStyleOverrideDictionary.Item(netDxf.Tables.DimensionStyleOverrideType)">
            <summary>
            Gets or sets the <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> with the specified type.
            </summary>
            <param name="type">The type of the DimensionStyleOverride to get or set.</param>
            <returns>The <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> with the specified type.</returns>
        </member>
        <member name="P:netDxf.Collections.DimensionStyleOverrideDictionary.Types">
            <summary>
            Gets an ICollection containing the types of the current dictionary.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DimensionStyleOverrideDictionary.Values">
            <summary>
            Gets an ICollection containing the <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> list of the current dictionary.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DimensionStyleOverrideDictionary.Count">
            <summary>
            Gets the number of <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> contained in the current dictionary.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DimensionStyleOverrideDictionary.IsReadOnly">
            <summary>
            Gets a value indicating whether the actual dictionary is read-only.
            </summary>
        </member>
        <member name="M:netDxf.Collections.DimensionStyleOverrideDictionary.Add(netDxf.Tables.DimensionStyleOverrideType,System.Object)">
            <summary>
            Adds a <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> to the dictionary from its type and value.
            </summary>
            <param name="type">Dimension style override type.</param>
            <param name="value">Dimension style override value.</param>
            <remarks>A new DimensionStyleOverride will be created from the specified arguments.</remarks>
        </member>
        <member name="M:netDxf.Collections.DimensionStyleOverrideDictionary.Add(netDxf.Tables.DimensionStyleOverride)">
            <summary>
            Adds an <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> to the dictionary.
            </summary>
            <param name="item">The <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> to add.</param>
        </member>
        <member name="M:netDxf.Collections.DimensionStyleOverrideDictionary.AddRange(System.Collections.Generic.IEnumerable{netDxf.Tables.DimensionStyleOverride})">
            <summary>
            Adds an <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> list to the dictionary.
            </summary>
            <param name="collection">The collection whose elements should be added.</param>
        </member>
        <member name="M:netDxf.Collections.DimensionStyleOverrideDictionary.Remove(netDxf.Tables.DimensionStyleOverrideType)">
            <summary>
            Removes an <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> of the specified type from the current dictionary.
            </summary>
            <param name="type">The type of the <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> to remove.</param>
            <returns>True if the <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> is successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.DimensionStyleOverrideDictionary.Clear">
            <summary>
            Removes all <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> from the current dictionary.
            </summary>
        </member>
        <member name="M:netDxf.Collections.DimensionStyleOverrideDictionary.ContainsType(netDxf.Tables.DimensionStyleOverrideType)">
            <summary>
            Determines whether current dictionary contains an <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> of the specified type.
            </summary>
            <param name="type">The type to locate in the current dictionary.</param>
            <returns>True if the current dictionary contains an <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> of the type; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.DimensionStyleOverrideDictionary.ContainsValue(netDxf.Tables.DimensionStyleOverride)">
            <summary>
            Determines whether current dictionary contains a specified <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see>.
            </summary>
            <param name="value">The <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> to locate in the current dictionary.</param>
            <returns>True if the current dictionary contains the <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see>; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.DimensionStyleOverrideDictionary.TryGetValue(netDxf.Tables.DimensionStyleOverrideType,netDxf.Tables.DimensionStyleOverride@)">
            <summary>
            Gets the <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> associated of the specified type.
            </summary>
            <param name="type">The type whose value to get.</param>
            <param name="value">When this method returns, the <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> associated of the specified type,
            if the tag is found; otherwise, null. This parameter is passed uninitialized.</param>
            <returns>True if the current dictionary contains an <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> of the specified type; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.DimensionStyleOverrideDictionary.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the dictionary.
            </summary>
            <returns>An enumerator that can be used to iterate through the dictionary.</returns>
        </member>
        <member name="T:netDxf.Collections.DimensionStyleOverrideDictionaryEventArgs">
            <summary>
            Represents the arguments thrown by the <see cref="T:netDxf.Collections.DimensionStyleOverrideDictionary">DimensionStyleOverrideDictionary</see> events.
            </summary>
        </member>
        <member name="M:netDxf.Collections.DimensionStyleOverrideDictionaryEventArgs.#ctor(netDxf.Tables.DimensionStyleOverride)">
            <summary>
            Initializes a new instance of <c>DimensionStyleOverrideDictionaryEventArgs</c>.
            </summary>
            <param name="item">Item that is being added or removed from the dictionary.</param>
        </member>
        <member name="P:netDxf.Collections.DimensionStyleOverrideDictionaryEventArgs.Item">
            <summary>
            Get the item that is being added to or removed from the dictionary.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DimensionStyleOverrideDictionaryEventArgs.Cancel">
            <summary>
            Gets or sets if the operation must be canceled.
            </summary>
            <remarks>This property is used by the BeforeAddItem and BeforeRemoveItem events to cancel the add or remove operations.</remarks>
        </member>
        <member name="T:netDxf.Collections.DimensionStyles">
            <summary>
            Represents a collection of dimension styles.
            </summary>
        </member>
        <member name="M:netDxf.Collections.DimensionStyles.Add(netDxf.Tables.DimensionStyle,System.Boolean)">
            <summary>
            Adds a dimension style to the list.
            </summary>
            <param name="style"><see cref="T:netDxf.Tables.DimensionStyle">DimensionStyle</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the dimension style parameter.</param>
            <returns>
            If a dimension style already exists with the same name as the instance that is being added the method returns the existing dimension style,
            if not it will return the new dimension style.
            </returns>
        </member>
        <member name="M:netDxf.Collections.DimensionStyles.Remove(System.String)">
            <summary>
            Removes a dimension style.
            </summary>
            <param name="name"><see cref="T:netDxf.Tables.DimensionStyle">DimensionStyle</see> name to remove from the document.</param>
            <returns>True if the dimension style has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved dimension styles or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.DimensionStyles.Remove(netDxf.Tables.DimensionStyle)">
            <summary>
            Removes a dimension style.
            </summary>
            <param name="item"><see cref="T:netDxf.Tables.DimensionStyle">DimensionStyle</see> to remove from the document.</param>
            <returns>True if the dimension style has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved dimension styles or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.DrawingEntities">
            <summary>
            Gives direct access to operations related with the entities in a drawing.
            These are no more than shortcuts to the real place where the entities are stored in a document (drawing.Layouts[layoutName].AssociatedBlock.Entities).
            The layout where the operations are performed is defined by the ActiveLayout property, by default the active layout is the Model.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.ActiveLayout">
            <summary>
            Gets or sets the name of the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.All">
            <summary>
            Gets the complete list <see cref="T:netDxf.Entities.EntityObject">entities</see> contained in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Arcs">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Arc">arcs</see> contained in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Ellipses">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Ellipse">ellipses</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Circles">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Circle">circles</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Faces3D">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Face3D">3d faces</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Solids">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Solid">solids</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Traces">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Trace">traces</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Inserts">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Insert">inserts</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Lines">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Line">lines</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Shapes">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Shape">shapes</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Polylines2D">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Polyline2D">polylines</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Polylines3D">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Polyline3D">polylines</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.PolyfaceMeshes">
            <summary>
            Gets the list of <see cref="P:netDxf.Collections.DrawingEntities.PolyfaceMeshes">polyface meshes</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.PolygonMeshes">
            <summary>
            Gets the list of <see cref="P:netDxf.Collections.DrawingEntities.PolygonMeshes">polygon meshes</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Points">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Point">points</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Texts">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Text">texts</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.MTexts">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.MText">multiline texts</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Hatches">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Hatch">hatches</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Images">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Image">images</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Meshes">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Mesh">mesh</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Leaders">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Leader">leader</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Tolerances">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Tolerance">tolerance</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Underlays">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Underlay">underlay</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.MLines">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.MLine">multilines</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Dimensions">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Dimension">dimensions</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Splines">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Spline">splines</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Rays">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Ray">rays</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Viewports">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Viewport">viewports</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.XLines">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.XLine">extension lines</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Wipeouts">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Wipeout">wipeouts</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.AttributeDefinitions">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.AttributeDefinition">attribute definitions</see> in the active layout.
            </summary>
        </member>
        <member name="M:netDxf.Collections.DrawingEntities.Add(System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject})">
            <summary>
            Adds a list of <see cref="T:netDxf.Entities.EntityObject">entities</see> to the active layout of the document.
            </summary>
            <param name="entities">A list of <see cref="T:netDxf.Entities.EntityObject">entities</see> to add to the document.</param>
        </member>
        <member name="M:netDxf.Collections.DrawingEntities.Add(netDxf.Entities.EntityObject)">
            <summary>
            Adds an <see cref="T:netDxf.Entities.EntityObject">entity</see> to the active layout of the document.
            </summary>
            <param name="entity">An <see cref="T:netDxf.Entities.EntityObject">entity</see> to add to the document.</param>
        </member>
        <member name="M:netDxf.Collections.DrawingEntities.Remove(System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject})">
            <summary>
            Removes a list of <see cref="T:netDxf.Entities.EntityObject">entities</see> from the document.
            </summary>
            <param name="entities">A list of <see cref="T:netDxf.Entities.EntityObject">entities</see> to remove from the document.</param>
            <remarks>
            This function will not remove other tables objects that might be not in use as result from the elimination of the entity.<br />
            This includes empty layers, blocks not referenced anymore, line types, text styles, dimension styles, and application registries.<br />
            Entities that are part of a block definition will not be removed.
            </remarks>
        </member>
        <member name="M:netDxf.Collections.DrawingEntities.Remove(netDxf.Entities.EntityObject)">
            <summary>
            Removes an <see cref="T:netDxf.Entities.EntityObject">entity</see> from the document.
            </summary>
            <param name="entity">The <see cref="T:netDxf.Entities.EntityObject">entity</see> to remove from the document.</param>
            <returns>True if item is successfully removed; otherwise, false.</returns>
            <remarks>
            This function will not remove other tables objects that might be not in use as result from the elimination of the entity.<br />
            This includes empty layers, blocks not referenced anymore, line types, text styles, dimension styles, multiline styles, groups, and application registries.<br />
            Entities that are part of a block definition will not be removed.
            </remarks>
        </member>
        <member name="T:netDxf.Collections.EntityCollection">
            <summary>
            Represent a collection of <see cref="T:netDxf.Entities.EntityObject">entities</see> that fire events when it is modified. 
            </summary>
        </member>
        <member name="M:netDxf.Collections.EntityCollection.#ctor">
            <summary>
            Initializes a new instance of <c>EntityCollection</c>.
            </summary>
        </member>
        <member name="M:netDxf.Collections.EntityCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <c>EntityCollection</c> and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of items the collection can initially store.</param>
        </member>
        <member name="P:netDxf.Collections.EntityCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:netDxf.Entities.EntityObject">entity</see> at the specified index.
            </summary>
            <param name="index"> The zero-based index of the element to get or set.</param>
            <returns>The <see cref="T:netDxf.Entities.EntityObject">entity</see> at the specified index.</returns>
        </member>
        <member name="P:netDxf.Collections.EntityCollection.Count">
            <summary>
            Gets the number of <see cref="T:netDxf.Entities.EntityObject">entities</see> contained in the collection.
            </summary>
        </member>
        <member name="P:netDxf.Collections.EntityCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="M:netDxf.Collections.EntityCollection.Add(netDxf.Entities.EntityObject)">
            <summary>
            Adds an <see cref="T:netDxf.Entities.EntityObject">entity</see> to the collection.
            </summary>
            <param name="item"> The <see cref="T:netDxf.Entities.EntityObject">entity</see> to add to the collection.</param>
            <returns>True if the <see cref="T:netDxf.Entities.EntityObject">entity</see> has been added to the collection, or false otherwise.</returns>
        </member>
        <member name="M:netDxf.Collections.EntityCollection.AddRange(System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject})">
            <summary>
            Adds an <see cref="T:netDxf.Entities.EntityObject">entity</see> list to the end of the collection.
            </summary>
            <param name="collection">The collection whose elements should be added.</param>
        </member>
        <member name="M:netDxf.Collections.EntityCollection.Insert(System.Int32,netDxf.Entities.EntityObject)">
            <summary>
            Inserts an <see cref="T:netDxf.Entities.EntityObject">entity</see> into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The <see cref="T:netDxf.Entities.EntityObject">entity</see> to insert. The value can not be null.</param>
        </member>
        <member name="M:netDxf.Collections.EntityCollection.Remove(netDxf.Entities.EntityObject)">
            <summary>
            Removes the first occurrence of a specific <see cref="T:netDxf.Entities.EntityObject">entity</see> from the collection
            </summary>
            <param name="item">The <see cref="T:netDxf.Entities.EntityObject">entity</see> to remove from the collection.</param>
            <returns>True if <see cref="T:netDxf.Entities.EntityObject">entity</see> is successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.EntityCollection.Remove(System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject})">
            <summary>
            Removes the first occurrence of a specific object from the collection
            </summary>
            <param name="items">The list of objects to remove from the collection.</param>
            <returns>True if object is successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.EntityCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:netDxf.Entities.EntityObject">entity</see> at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:netDxf.Entities.EntityObject">entity</see> to remove.</param>
        </member>
        <member name="M:netDxf.Collections.EntityCollection.Clear">
            <summary>
            Removes all <see cref="T:netDxf.Entities.EntityObject">entities</see> from the collection.
            </summary>
        </member>
        <member name="M:netDxf.Collections.EntityCollection.IndexOf(netDxf.Entities.EntityObject)">
            <summary>
            Searches for the specified <see cref="T:netDxf.Entities.EntityObject">entity</see> and returns the zero-based index of the first occurrence within the entire collection.
            </summary>
            <param name="item">The <see cref="T:netDxf.Entities.EntityObject">entity</see> to locate in the collection.</param>
            <returns>The zero-based index of the first occurrence of item within the entire collection, if found; otherwise, –1.</returns>
        </member>
        <member name="M:netDxf.Collections.EntityCollection.Contains(netDxf.Entities.EntityObject)">
            <summary>
            Determines whether an <see cref="T:netDxf.Entities.EntityObject">entity</see> is in the collection.
            </summary>
            <param name="item">The <see cref="T:netDxf.Entities.EntityObject">entity</see> to locate in the collection.</param>
            <returns>True if item is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.EntityCollection.CopyTo(netDxf.Entities.EntityObject[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array"> The one-dimensional System.Array that is the destination of the elements copied from the collection. The System.Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:netDxf.Collections.EntityCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:netDxf.Collections.EntityCollectionEventArgs">
            <summary>
            Represents the arguments thrown by the <c>EntityCollection</c> events.
            </summary>
        </member>
        <member name="M:netDxf.Collections.EntityCollectionEventArgs.#ctor(netDxf.Entities.EntityObject)">
            <summary>
            Initializes a new instance of <c>EntityCollectionEventArgs</c>.
            </summary>
            <param name="item">Item that is being added or removed from the collection.</param>
        </member>
        <member name="P:netDxf.Collections.EntityCollectionEventArgs.Item">
            <summary>
            Get the item that is being added or removed from the collection.
            </summary>
        </member>
        <member name="P:netDxf.Collections.EntityCollectionEventArgs.Cancel">
            <summary>
            Gets or sets if the operation must be canceled.
            </summary>
            <remarks>This property is used by the OnBeforeAdd and OnBeforeRemove events to cancel the add or remove operation.</remarks>
        </member>
        <member name="T:netDxf.Collections.Groups">
            <summary>
            Represents a collection of groups.
            </summary>
        </member>
        <member name="M:netDxf.Collections.Groups.Add(netDxf.Objects.Group,System.Boolean)">
            <summary>
            Adds a group to the list.
            </summary>
            <param name="group"><see cref="T:netDxf.Objects.Group">Group</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the group parameter.</param>
            <returns>
            If a group already exists with the same name as the instance that is being added the method returns the existing group,
            if not it will return the new group.<br />
            The methods will automatically add the grouped entities to the document, if they have not been added previously.
            </returns>
        </member>
        <member name="M:netDxf.Collections.Groups.Remove(System.String)">
            <summary>
            Deletes a group.
            </summary>
            <param name="name"><see cref="T:netDxf.Objects.Group">Group</see> name to remove from the document.</param>
            <returns>True if the group has been successfully removed, or false otherwise.</returns>
            <remarks>Removing a group only deletes it from the collection, the entities that once belonged to the group are not deleted.</remarks>
        </member>
        <member name="M:netDxf.Collections.Groups.Remove(netDxf.Objects.Group)">
            <summary>
            Deletes a group.
            </summary>
            <param name="item"><see cref="T:netDxf.Objects.Group">Group</see> to remove from the document.</param>
            <returns>True if the group has been successfully removed, or false otherwise.</returns>
            <remarks>Removing a group only deletes it from the collection, the entities that once belonged to the group are not deleted.</remarks>
        </member>
        <member name="T:netDxf.Collections.ImageDefinitions">
            <summary>
            Represents a collection of image definitions.
            </summary>
        </member>
        <member name="M:netDxf.Collections.ImageDefinitions.Add(netDxf.Objects.ImageDefinition,System.Boolean)">
            <summary>
            Adds an image definition to the list.
            </summary>
            <param name="imageDefinition"><see cref="T:netDxf.Objects.ImageDefinition">ImageDefinition</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the image definition parameter.</param>
            <returns>
            If an image definition already exists with the same name as the instance that is being added the method returns the existing image definition,
            if not it will return the new image definition.
            </returns>
        </member>
        <member name="M:netDxf.Collections.ImageDefinitions.Remove(System.String)">
            <summary>
            Removes an image definition.
            </summary>
            <param name="name"><see cref="T:netDxf.Objects.ImageDefinition">ImageDefinition</see> name to remove from the document.</param>
            <returns>True if the image definition has been successfully removed, or false otherwise.</returns>
            <remarks>Any image definition referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.ImageDefinitions.Remove(netDxf.Objects.ImageDefinition)">
            <summary>
            Removes an image definition.
            </summary>
            <param name="item"><see cref="T:netDxf.Objects.ImageDefinition">ImageDefinition</see> to remove from the document.</param>
            <returns>True if the image definition has been successfully removed, or false otherwise.</returns>
            <remarks>Any image definition referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.Layers">
            <summary>
            Represents a collection of layers.
            </summary>
        </member>
        <member name="P:netDxf.Collections.Layers.StateManager">
            <summary>
            Gets the layer state manager.
            </summary>
        </member>
        <member name="M:netDxf.Collections.Layers.Add(netDxf.Tables.Layer,System.Boolean)">
            <summary>
            Adds a layer to the list.
            </summary>
            <param name="layer"><see cref="T:netDxf.Tables.Layer">Layer</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the layer parameter.</param>
            <returns>
            If a layer already exists with the same name as the instance that is being added the method returns the existing layer,
            if not it will return the new layer.
            </returns>
        </member>
        <member name="M:netDxf.Collections.Layers.Remove(System.String)">
            <summary>
            Removes a layer.
            </summary>
            <param name="name"><see cref="T:netDxf.Tables.Layer">Layer</see> name to remove from the document.</param>
            <returns>True if the layer has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved layers or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.Layers.Remove(netDxf.Tables.Layer)">
            <summary>
            Removes a layer.
            </summary>
            <param name="item"><see cref="T:netDxf.Tables.Layer">Layer</see> to remove from the document.</param>
            <returns>True if the layer has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved layers or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.LayerStateManager">
            <summary>
            Manages the list of layer states in a drawing.
            </summary>
        </member>
        <member name="M:netDxf.Collections.LayerStateManager.#ctor(netDxf.DxfDocument)">
            <summary>
            Initializes a new instance of the <c>LayerStateManager</c> class.
            </summary>
            <param name="owner">Layers list associated with the current <c>LayerStateManager</c>.</param>
        </member>
        <member name="P:netDxf.Collections.LayerStateManager.Options">
            <summary>
            Gets or sets the restoring options when updating the layer state from the layers list and vice versa.
            </summary>
        </member>
        <member name="M:netDxf.Collections.LayerStateManager.AddNew(System.String)">
            <summary>
            Adds a new LayerState from the current state of the layers.
            </summary>
            <param name="layerStateName">Layer state name.</param>
        </member>
        <member name="M:netDxf.Collections.LayerStateManager.AddNew(System.String,System.String)">
            <summary>
            Adds a new LayerState from the current state of the layers.
            </summary>
            <param name="layerStateName">Layer state name.</param>
            <param name="layerStateDescription">Layer state description.</param>
        </member>
        <member name="M:netDxf.Collections.LayerStateManager.Restore(System.String)">
            <summary>
            Restores the properties of the current layers list according to the specified layers state.
            </summary>
            <param name="layerStateName">Layer state name to restore.</param>
        </member>
        <member name="M:netDxf.Collections.LayerStateManager.Update(System.String)">
            <summary>
            Updates the specified layer state according to the properties of the current layers list.
            </summary>
            <param name="layerStateName">Layer state name to update.</param>
        </member>
        <member name="M:netDxf.Collections.LayerStateManager.Import(System.String,System.Boolean)">
            <summary>
            Imports a layer state from a LAS file.
            </summary>
            <param name="file">LAS file to import.</param>
            <param name="overwrite">Defines if the imported layer state will overwrite any existing one with the same name.</param>
        </member>
        <member name="M:netDxf.Collections.LayerStateManager.Export(System.String,System.String)">
            <summary>
            Exports a layer state to a LAS file.
            </summary>
            <param name="file">LAS file to export.</param>
            <param name="layerStateName">Layer state name to export.</param>
        </member>
        <member name="M:netDxf.Collections.LayerStateManager.RemoveAll">
            <summary>
            Removes all layers states.
            </summary>
        </member>
        <member name="M:netDxf.Collections.LayerStateManager.Add(netDxf.Objects.LayerState,System.Boolean)">
            <summary>
            Adds a LayerState to the list.
            </summary>
            <param name="layerState"><see cref="T:netDxf.Objects.LayerState">LayerState</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the layerState parameter.</param>
            <returns>
            If a LayerState already exists with the same name as the instance that is being added the method returns the existing LayerState,
            if not it will return the new LayerState.
            </returns>
        </member>
        <member name="M:netDxf.Collections.LayerStateManager.Remove(System.String)">
            <summary>
            Removes a LayerState.
            </summary>
            <param name="name"><see cref="T:netDxf.Objects.LayerState">LayerState</see> name to remove from the document.</param>
            <returns>True if the LayerState has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved LayerState or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.LayerStateManager.Remove(netDxf.Objects.LayerState)">
            <summary>
            Removes a LayerState.
            </summary>
            <param name="item"><see cref="T:netDxf.Objects.LayerState">LayerState</see> to remove from the document.</param>
            <returns>True if the LayerState has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved LayerState or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.Layouts">
            <summary>
            Represents a collection of layouts.
            </summary>
            <remarks>
            You can add a maximum of 255 layouts to your drawing, the "Model" layout is always present what limits the maximum number of layouts to 256.
            Even though this limit is imposed through the AutoCad UI, it can import larger numbers, but exceeding this limit might make it to crash.
            </remarks>
        </member>
        <member name="M:netDxf.Collections.Layouts.GetReferences(System.String)">
            <summary>
            Gets the <see cref="T:netDxf.DxfObject">dxf objects</see> referenced by a T.
            </summary>
            <param name="name">Table object name.</param>
            <returns>The list of DxfObjects that reference the specified table object.</returns>
            <remarks>
            If there is no table object with the specified name in the list the method an empty list.<br />
            The Groups collection method GetReferences will always return an empty list since there are no DxfObjects that references them.
            </remarks>
        </member>
        <member name="M:netDxf.Collections.Layouts.GetReferences(netDxf.Objects.Layout)">
            <summary>
            Gets the <see cref="T:netDxf.DxfObject">dxf objects</see> referenced by a T.
            </summary>
            <param name="item">Table object.</param>
            <returns>The list of DxfObjects that reference the specified table object.</returns>
            <remarks>
            If there is no table object with the specified name in the list the method an empty list.<br />
            The Groups collection method GetReferences will always return an empty list since there are no DxfObjects that references them.
            </remarks>
        </member>
        <member name="M:netDxf.Collections.Layouts.Add(netDxf.Objects.Layout,System.Boolean)">
            <summary>
            Adds a layout to the list.
            </summary>
            <param name="layout"><see cref="T:netDxf.Objects.Layout">Layout</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the layout parameter.</param>
            <returns>
            You can add a maximum of 255 layouts to your drawing, the "Model" layout is always present what limits the maximum number of layouts to 256.
            If a layout already exists with the same name as the instance that is being added the method returns the existing layout.
            </returns>
        </member>
        <member name="M:netDxf.Collections.Layouts.Remove(System.String)">
            <summary>
            Deletes a layout and removes the layout entities from the document.
            </summary>
            <param name="name"><see cref="T:netDxf.Objects.Layout">Layout</see> name to remove from the document.</param>
            <returns>True if the layout has been successfully removed, or false otherwise.</returns>
            <remarks>
            The ModelSpace layout cannot be removed. If all PaperSpace layouts have been removed a default PaperSpace will be created since it is required by the DXF implementation.<br />
            When a Layout is deleted all entities that has been added to it will also be removed.<br />
            Removing a Layout will rebuild the PaperSpace block names, to follow the naming rule: Paper_Space, Paper_Space0, Paper_Space1, ...
            </remarks>
        </member>
        <member name="M:netDxf.Collections.Layouts.Remove(netDxf.Objects.Layout)">
            <summary>
            Deletes a layout and removes the layout entities from the document.
            </summary>
            <param name="item"><see cref="T:netDxf.Objects.Layout">Layout</see> to remove from the document.</param>
            <returns>True if the layout has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved layouts or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.Linetypes">
            <summary>
            Represents a collection of line types.
            </summary>
        </member>
        <member name="M:netDxf.Collections.Linetypes.NamesFromFile(System.String)">
            <summary>
            Gets the list of linetype names defined in a LIN file.
            </summary>
            <param name="file">Linetype definitions file.</param>
            <returns>List of linetype names contained in the specified LIN file.</returns>
            <remarks>
            If the file is not found in the specified folder, it will try to find them in the list of supported folders defined in the DxfDocument.<br />
            </remarks>
        </member>
        <member name="M:netDxf.Collections.Linetypes.AddFromFile(System.String,System.Boolean)">
            <summary>
            Adds all linetypes to the list from the definition in a LIN file.
            </summary>
            <param name="file">File where the definition is located.</param>
            <param name="reload">Specifies if the linetype definitions of the file will overwrite the existing ones, in case another with the same name exists in the file.</param>
            <remarks>
            If the file is not found in the specified folder, it will try to find them in the list of supported folders defined in the DxfDocument.<br />
            Any text style or shape present in the linetype definition must be previously defined in the DxfDocument, if not an exception will be generated.
            </remarks>
        </member>
        <member name="M:netDxf.Collections.Linetypes.AddFromFile(System.String,System.String,System.Boolean)">
            <summary>
            Adds a linetype to the list from the definition in a LIN file.
            </summary>
            <param name="file">File where the definition is located.</param>
            <param name="linetypeName">Name of the line type definition to read (ignore case).</param>
            <param name="reload">Specifies if the linetype definition of the file will overwrite the existing one, in case another with the same name exists in the file.</param>
            <returns>
            True if the linetype has been added from the linetype definitions LIN file; false otherwise.
            It will return false if the linetype is present in the file and the reload argument is false.
            </returns>
            <remarks>
            If the file is not found in the specified folder, it will try to find them in the list of supported folders defined in the DxfDocument.<br />
            Any text style or shape present in the linetype definition must be previously defined in the DxfDocument, if not an exception will be generated.
            </remarks>
        </member>
        <member name="M:netDxf.Collections.Linetypes.Save(System.String,System.Boolean)">
            <summary>
            Saves all linetype definitions to a LIN file.
            </summary>
            <param name="file">File where the linetype definitions will be saved.</param>
            <param name="overwrite">Defines if the file will be overwritten in case exits another one.</param>
            <remarks>Only non reserved linetypes will be saved, therefore Continuous, ByLayer, and ByBlock will be excluded.</remarks>
        </member>
        <member name="M:netDxf.Collections.Linetypes.Add(netDxf.Tables.Linetype,System.Boolean)">
            <summary>
            Adds a line type to the list.
            </summary>
            <param name="linetype"><see cref="T:netDxf.Tables.Linetype">Linetype</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the line type parameter.</param>
            <returns>
            If a line type already exists with the same name as the instance that is being added the method returns the existing line type,
            if not it will return the new line type.
            </returns>
        </member>
        <member name="M:netDxf.Collections.Linetypes.Remove(System.String)">
            <summary>
            Removes a line type.
            </summary>
            <param name="name"><see cref="T:netDxf.Tables.Linetype">Linetype</see> name to remove from the document.</param>
            <returns>True if the line type has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved line types or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.Linetypes.Remove(netDxf.Tables.Linetype)">
            <summary>
            Removes a line type.
            </summary>
            <param name="item"><see cref="T:netDxf.Tables.Linetype">Linetype</see> to remove from the document.</param>
            <returns>True if the line type has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved line types or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.MLineStyles">
            <summary>
            Represents a collection of multiline styles.
            </summary>
        </member>
        <member name="M:netDxf.Collections.MLineStyles.Add(netDxf.Objects.MLineStyle,System.Boolean)">
            <summary>
            Adds a multiline style to the list.
            </summary>
            <param name="style"><see cref="T:netDxf.Objects.MLineStyle">MLineStyle</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the multiline style parameter.</param>
            <returns>
            If a multiline style already exists with the same name as the instance that is being added the method returns the existing multiline style,
            if not it will return the new multiline style.
            </returns>
        </member>
        <member name="M:netDxf.Collections.MLineStyles.Remove(System.String)">
            <summary>
            Removes a multiline style.
            </summary>
            <param name="name"><see cref="T:netDxf.Objects.MLineStyle">MLineStyle</see> name to remove from the document.</param>
            <returns>True if the multiline style has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved multiline styles or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.MLineStyles.Remove(netDxf.Objects.MLineStyle)">
            <summary>
            Removes a multiline style.
            </summary>
            <param name="item"><see cref="T:netDxf.Objects.MLineStyle">MLineStyle</see> to remove from the document.</param>
            <returns>True if the multiline style has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved multiline styles or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.ObservableCollection`1">
            <summary>
            Represent a collection of items that fire events when it is modified. 
            </summary>
            <typeparam name="T">Type of items.</typeparam>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.#ctor">
            <summary>
            Initializes a new instance of <c>ObservableCollection</c>.
            </summary>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <c>ObservableCollection</c> and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of items the collection can initially store.</param>
        </member>
        <member name="P:netDxf.Collections.ObservableCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the object at the specified index.
            </summary>
            <param name="index"> The zero-based index of the element to get or set.</param>
            <returns>The object at the specified index.</returns>
        </member>
        <member name="P:netDxf.Collections.ObservableCollection`1.Count">
            <summary>
            Gets the number of object contained in the collection.
            </summary>
        </member>
        <member name="P:netDxf.Collections.ObservableCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.Reverse">
            <summary>
            Reverses the order of the elements in the entire list.
            </summary>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the elements in the entire System.Collections.Generic.List&lt;T&gt; using the specified System.Comparison&lt;T&gt;.
            </summary>
            <param name="comparision">The System.Comparison&lt;T&gt; to use when comparing elements.</param>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in a range of elements in System.Collections.Generic.List&lt;T&gt; using the specified comparer.
            </summary>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <param name="count">The length of the range to sort.</param>
            <param name="comparer">The System.Collections.Generic.IComparer&lt;T&gt; implementation to use when comparing elements, or null to use the default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default.</param>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in a range of elements in System.Collections.Generic.List&lt;T&gt; using the specified comparer.
            </summary>
            <param name="comparer">The System.Collections.Generic.IComparer&lt;T&gt; implementation to use when comparing elements, or null to use the default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default.</param>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.Sort">
            <summary>
            Sorts the elements in the entire System.Collections.Generic.List&lt;T&gt; using the default comparer.
            </summary>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.Add(`0)">
            <summary>
            Adds an object to the collection.
            </summary>
            <param name="item"> The object to add to the collection.</param>
            <returns>True if the object has been added to the collection, or false otherwise.</returns>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds an object list to the end of the collection.
            </summary>
            <param name="collection">The collection whose elements should be added.</param>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an object into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert. The value can not be null.</param>
            <returns>True if the object has been inserted to the collection; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the collection
            </summary>
            <param name="item">The object to remove from the collection.</param>
            <returns>True if object is successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.Remove(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes the first occurrence of a specific object from the collection
            </summary>
            <param name="items">The list of objects to remove from the collection.</param>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the object at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the object to remove.</param>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.Clear">
            <summary>
            Removes all object from the collection.
            </summary>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.IndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the entire collection.
            </summary>
            <param name="item">The object to locate in the collection.</param>
            <returns>The zero-based index of the first occurrence of item within the entire collection, if found; otherwise, –1.</returns>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.Contains(`0)">
            <summary>
            Determines whether an object is in the collection.
            </summary>
            <param name="item">The object to locate in the collection.</param>
            <returns>True if item is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array"> The one-dimensional System.Array that is the destination of the elements copied from the collection. The System.Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:netDxf.Collections.ObservableCollectionEventArgs`1">
            <summary>
            Represents the arguments thrown by the <c>ObservableCollection</c> events.
            </summary>
            <typeparam name="T">Type of items.</typeparam>
        </member>
        <member name="M:netDxf.Collections.ObservableCollectionEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of <c>ObservableCollectionEventArgs</c>.
            </summary>
            <param name="item">Item that is being added or removed from the collection.</param>
        </member>
        <member name="P:netDxf.Collections.ObservableCollectionEventArgs`1.Item">
            <summary>
            Get the item that is being added or removed from the collection.
            </summary>
        </member>
        <member name="P:netDxf.Collections.ObservableCollectionEventArgs`1.Cancel">
            <summary>
            Gets or sets if the operation must be canceled.
            </summary>
            <remarks>This property is used by the OnBeforeAdd and OnBeforeRemove events to cancel the add or remove operation.</remarks>
        </member>
        <member name="T:netDxf.Collections.ObservableDictionaryEventArgs`2">
            <summary>
            Represents the arguments thrown by the <c>ObservableDictionaryEventArgs</c> events.
            </summary>
            <typeparam name="TKey">Type of items.</typeparam>
            <typeparam name="TValue">Type of items.</typeparam>
        </member>
        <member name="M:netDxf.Collections.ObservableDictionaryEventArgs`2.#ctor(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Initializes a new instance of <c>ObservableDictionaryEventArgs</c>.
            </summary>
            <param name="item">Item that is being added or removed from the dictionary.</param>
        </member>
        <member name="P:netDxf.Collections.ObservableDictionaryEventArgs`2.Item">
            <summary>
            Get the item that is being added to or removed from the dictionary.
            </summary>
        </member>
        <member name="P:netDxf.Collections.ObservableDictionaryEventArgs`2.Cancel">
            <summary>
            Gets or sets if the operation must be canceled.
            </summary>
            <remarks>This property is used by the OnBeforeAdd and OnBeforeRemove events to cancel the add or remove operations.</remarks>
        </member>
        <member name="T:netDxf.Collections.ShapeStyles">
            <summary>
            Represents a collection of shape styles.
            </summary>
        </member>
        <member name="M:netDxf.Collections.ShapeStyles.ContainsShapeName(System.String)">
            <summary>
            Looks for a shape style that contains a shape with the specified name.
            </summary>
            <param name="name">Shape name.</param>
            <returns>The shape style that contains a shape with the specified name, null otherwise.</returns>
        </member>
        <member name="M:netDxf.Collections.ShapeStyles.Add(netDxf.Tables.ShapeStyle,System.Boolean)">
            <summary>
            Adds a shape style to the list.
            </summary>
            <param name="style"><see cref="T:netDxf.Tables.ShapeStyle">ShapeStyle</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the shape style parameter.</param>
            <returns>
            If a shape style already exists with the same name as the instance that is being added the method returns the existing shape style,
            if not it will return the new text style.
            </returns>
        </member>
        <member name="M:netDxf.Collections.ShapeStyles.Remove(System.String)">
            <summary>
            Removes a shape style.
            </summary>
            <param name="name"><see cref="T:netDxf.Tables.ShapeStyle">ShapeStyle</see> name to remove from the document.</param>
            <returns>True if the shape style has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved shape styles or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.ShapeStyles.Remove(netDxf.Tables.ShapeStyle)">
            <summary>
            Removes a shape style.
            </summary>
            <param name="item"><see cref="T:netDxf.Tables.ShapeStyle">ShapeStyle</see> to remove from the document.</param>
            <returns>True if the shape style has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved shape styles or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.SupportFolders">
            <summary>
            Represents a list of support folders for the document.
            </summary>
        </member>
        <member name="M:netDxf.Collections.SupportFolders.#ctor">
            <summary>
            Initializes a new instance of <c>SupportFolders</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Collections.SupportFolders.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <c>SupportFolders</c> class.
            </summary>
            <param name="capacity">Initial capacity of the list.</param>
        </member>
        <member name="M:netDxf.Collections.SupportFolders.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of <c>SupportFolders</c> class.
            </summary>
            <param name="folders">The collection whose elements should be added to the list. The items in the collection cannot be null.</param>
        </member>
        <member name="M:netDxf.Collections.SupportFolders.FindFile(System.String)">
            <summary>
            Looks for a file in one of the support folders.
            </summary>
            <param name="file">File name to find in one of the support folders.</param>
            <returns>The path to the file found in one of the support folders. It includes both the path and the specified file name.</returns>
            <remarks>If the specified file already exists it return the same value, if neither it cannot be found in any of the support folders it will return an empty string.</remarks>
        </member>
        <member name="P:netDxf.Collections.SupportFolders.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
            </returns>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="P:netDxf.Collections.SupportFolders.Count">
            <summary>
            Gets the number of elements contained in the list.
            </summary>
            <returns>The number of elements contained in the list.</returns>
        </member>
        <member name="P:netDxf.Collections.SupportFolders.IsReadOnly">
            <summary>
            Returns if the list is read only.
            </summary>
            <returns>Return always true.</returns>
        </member>
        <member name="M:netDxf.Collections.SupportFolders.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the list.
            </summary>
            <returns>The enumerator for the list.</returns>
        </member>
        <member name="M:netDxf.Collections.SupportFolders.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the list.
            </summary>
            <returns>The enumerator for the list.</returns>
        </member>
        <member name="M:netDxf.Collections.SupportFolders.Add(System.String)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="item">Folder path to add to the list. The item cannot be null.</param>
        </member>
        <member name="M:netDxf.Collections.SupportFolders.AddRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the elements of the collection to the list.
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the list. The items in the collection cannot be null.</param>
        </member>
        <member name="M:netDxf.Collections.SupportFolders.Clear">
            <summary>
            Removes all elements from the list.
            </summary>
        </member>
        <member name="M:netDxf.Collections.SupportFolders.Contains(System.String)">
            <summary>
            Determines whether an element is in the list.
            </summary>
            <param name="item">The object to locate in the list. The value cannot be null.</param>
            <returns>True if the item is found in the list; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.SupportFolders.CopyTo(System.String[],System.Int32)">
            <summary>
            Copies the entire list to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from list. The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in the array at which copying begins.</param>
        </member>
        <member name="M:netDxf.Collections.SupportFolders.Remove(System.String)">
            <summary>
            Removes the first occurrence of a specific object from the list.
            </summary>
            <param name="item">The object to remove from the list. The value cannot be null.</param>
            <returns>True if the item is successfully removed; otherwise, false. This method also returns false the item was not found in the list.</returns>
        </member>
        <member name="M:netDxf.Collections.SupportFolders.IndexOf(System.String)">
            <summary>
            Determines the index of a specific item in the list.
            </summary>
            <param name="item">The object to locate in the list.</param>
            <returns>The index of <paramref name="item"/> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:netDxf.Collections.SupportFolders.Insert(System.Int32,System.String)">
            <summary>
            Inserts an item to the list at the specified index.
            </summary>
            <param name="index">The zero-based index at which the item should be inserted.</param>
            <param name="item">The object to insert into the list.</param>
        </member>
        <member name="M:netDxf.Collections.SupportFolders.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index from the list.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="T:netDxf.Collections.TableObjects`1">
            <summary>
            Represents a list of table objects
            </summary>
            <typeparam name="T"><see cref="T:netDxf.Tables.TableObject">TableObject</see>.</typeparam>
        </member>
        <member name="P:netDxf.Collections.TableObjects`1.Item(System.String)">
            <summary>
            Gets a table object from the list by name.
            </summary>
            <param name="name">Table object name.</param>
            <returns>The table object with the specified name.</returns>
            <remarks>Table object names are case insensitive.</remarks>
        </member>
        <member name="P:netDxf.Collections.TableObjects`1.Items">
            <summary>
            Gets the table object list.
            </summary>
        </member>
        <member name="P:netDxf.Collections.TableObjects`1.Names">
            <summary>
            Gets the ObjectTable names.
            </summary>
        </member>
        <member name="P:netDxf.Collections.TableObjects`1.Count">
            <summary>
            Gets the number of table objects.
            </summary>
        </member>
        <member name="P:netDxf.Collections.TableObjects`1.Owner">
            <summary>
            Gets the owner of the actual DXF object.
            </summary>
        </member>
        <member name="P:netDxf.Collections.TableObjects`1.References">
            <summary>
            Gets the <see cref="T:netDxf.DxfObject">dxf objects</see> referenced by a T.
            </summary>
        </member>
        <member name="M:netDxf.Collections.TableObjects`1.GetReferences(System.String)">
            <summary>
            Gets the <see cref="T:netDxf.DxfObject">dxf objects</see> referenced by a T.
            </summary>
            <param name="name">Table object name.</param>
            <returns>The list of DxfObjects that reference the specified table object.</returns>
            <remarks>
            If there is no table object with the specified name in the list the method an empty list.<br />
            The Groups collection method GetReferences will always return an empty list since there are no DxfObjects that references them.
            </remarks>
        </member>
        <member name="M:netDxf.Collections.TableObjects`1.GetReferences(`0)">
            <summary>
            Gets the <see cref="T:netDxf.DxfObject">dxf objects</see> referenced by a T.
            </summary>
            <param name="item">Table object.</param>
            <returns>The list of DxfObjects that reference the specified table object.</returns>
            <remarks>
            If there is no table object with the specified name in the list the method an empty list.<br />
            The Groups collection method GetReferences will always return an empty list since there are no DxfObjects that references them.
            </remarks>
        </member>
        <member name="M:netDxf.Collections.TableObjects`1.Contains(System.String)">
            <summary>
            Checks if a table object already exists in the list. 
            </summary>
            <param name="name">Table object name.</param>
            <returns>True is a table object exists with the specified name, false otherwise.</returns>
        </member>
        <member name="M:netDxf.Collections.TableObjects`1.Contains(`0)">
            <summary>
            Checks if a table object already exists in the list. 
            </summary>
            <param name="item">Table object.</param>
            <returns>True is a table object exists, false otherwise.</returns>
        </member>
        <member name="M:netDxf.Collections.TableObjects`1.TryGetValue(System.String,`0@)">
            <summary>
            Gets the table object associated with the specified name.
            </summary>
            <param name="name"> The name of the table object to get.</param>
            <param name="item">When this method returns, contains the table object associated with the specified name, if the key is found;
            otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>True if the table contains an element with the specified name; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.TableObjects`1.Add(`0)">
            <summary>
            Adds a table object to the list.
            </summary>
            <param name="item"><see cref="T:netDxf.Tables.TableObject">Table object</see> to add to the list.</param>
            <returns>
            If a table object already exists with the same name as the instance that is being added the method returns the existing table object,
            if not it will return the new table object.
            </returns>
        </member>
        <member name="M:netDxf.Collections.TableObjects`1.Remove(System.String)">
            <summary>
            Removes a table object.
            </summary>
            <param name="name">Table object name to remove from the document.</param>
            <returns>True is the table object has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved table objects or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.TableObjects`1.Remove(`0)">
            <summary>
            Removes a table object.
            </summary>
            <param name="item"><see cref="T:netDxf.Tables.TableObject">Table object</see> to remove from the document.</param>
            <returns>True is the table object has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved table objects or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.TableObjects`1.Clear">
            <summary>
            Removes all table objects that are not reserved and have no references.
            </summary>
        </member>
        <member name="M:netDxf.Collections.TableObjects`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the table object collection.
            </summary>
            <returns>An enumerator for the table object collection.</returns>
        </member>
        <member name="M:netDxf.Collections.TableObjects`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the table object collection.
            </summary>
            <returns>An enumerator for the table object collection.</returns>
        </member>
        <member name="T:netDxf.Collections.TextStyles">
            <summary>
            Represents a collection of text styles.
            </summary>
        </member>
        <member name="M:netDxf.Collections.TextStyles.Add(netDxf.Tables.TextStyle,System.Boolean)">
            <summary>
            Adds a text style to the list.
            </summary>
            <param name="style"><see cref="T:netDxf.Tables.TextStyle">TextStyle</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the text style parameter.</param>
            <returns>
            If a text style already exists with the same name as the instance that is being added the method returns the existing text style,
            if not it will return the new text style.
            </returns>
        </member>
        <member name="M:netDxf.Collections.TextStyles.Remove(System.String)">
            <summary>
            Removes a text style.
            </summary>
            <param name="name"><see cref="T:netDxf.Tables.TextStyle">TextStyle</see> name to remove from the document.</param>
            <returns>True if the text style has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved text styles or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.TextStyles.Remove(netDxf.Tables.TextStyle)">
            <summary>
            Removes a text style.
            </summary>
            <param name="item"><see cref="T:netDxf.Tables.TextStyle">TextStyle</see> to remove from the document.</param>
            <returns>True if the text style has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved text styles or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.UCSs">
            <summary>
            Represents a collection of user coordinate systems.
            </summary>
            <remarks>The UCSs collection method GetReferences will always return an empty list since there are no DxfObjects that references them.</remarks>
        </member>
        <member name="M:netDxf.Collections.UCSs.Add(netDxf.Tables.UCS,System.Boolean)">
            <summary>
            Adds a user coordinate system to the list.
            </summary>
            <param name="ucs"><see cref="T:netDxf.Tables.UCS">User coordinate system</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the user coordinate system parameter.</param>
            <returns>
            If a user coordinate system already exists with the same name as the instance that is being added the method returns the existing user coordinate system,
            if not it will return the new user coordinate system.
            </returns>
        </member>
        <member name="M:netDxf.Collections.UCSs.Remove(System.String)">
            <summary>
            Removes a user coordinate system.
            </summary>
            <param name="name"><see cref="T:netDxf.Tables.UCS">User coordinate system</see> name to remove from the document.</param>
            <returns>True if the user coordinate system has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved user coordinate system or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.UCSs.Remove(netDxf.Tables.UCS)">
            <summary>
            Removes a user coordinate system.
            </summary>
            <param name="item"><see cref="T:netDxf.Tables.UCS">User coordinate system</see> to remove from the document.</param>
            <returns>True if the user coordinate system has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved user coordinate system or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.UnderlayDgnDefinitions">
            <summary>
            Represents a collection of DGN underlay definitions.
            </summary>
        </member>
        <member name="M:netDxf.Collections.UnderlayDgnDefinitions.Add(netDxf.Objects.UnderlayDgnDefinition,System.Boolean)">
            <summary>
            Adds a DGN underlay definition to the list.
            </summary>
            <param name="underlayDgnDefinition"><see cref="T:netDxf.Objects.UnderlayDgnDefinition">UnderlayDgnDefinition</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the underlay definition parameter.</param>
            <returns>
            If an underlay definition already exists with the same name as the instance that is being added the method returns the existing underlay definition,
            if not it will return the new underlay definition.
            </returns>
        </member>
        <member name="M:netDxf.Collections.UnderlayDgnDefinitions.Remove(System.String)">
            <summary>
            Removes an DGN underlay definition.
            </summary>
            <param name="name"><see cref="T:netDxf.Objects.UnderlayDgnDefinition">UnderlayDgnDefinition</see> name to remove from the document.</param>
            <returns>True if the underlay definition has been successfully removed, or false otherwise.</returns>
            <remarks>Any underlay definition referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.UnderlayDgnDefinitions.Remove(netDxf.Objects.UnderlayDgnDefinition)">
            <summary>
            Removes a DGN underlay definition.
            </summary>
            <param name="item"><see cref="T:netDxf.Objects.UnderlayDgnDefinition">UnderlayDgnDefinition</see> to remove from the document.</param>
            <returns>True if the underlay definition has been successfully removed, or false otherwise.</returns>
            <remarks>Any underlay definition referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.UnderlayDwfDefinitions">
            <summary>
            Represents a collection of DWF underlay definitions.
            </summary>
        </member>
        <member name="M:netDxf.Collections.UnderlayDwfDefinitions.Add(netDxf.Objects.UnderlayDwfDefinition,System.Boolean)">
            <summary>
            Adds a DWF underlay definition to the list.
            </summary>
            <param name="underlayDwfDefinition"><see cref="T:netDxf.Objects.UnderlayDwfDefinition">UnderlayDwfDefinition</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the underlay definition parameter.</param>
            <returns>
            If an underlay definition already exists with the same name as the instance that is being added the method returns the existing underlay definition,
            if not it will return the new underlay definition.
            </returns>
        </member>
        <member name="M:netDxf.Collections.UnderlayDwfDefinitions.Remove(System.String)">
            <summary>
            Removes a DWF underlay definition.
            </summary>
            <param name="name"><see cref="T:netDxf.Objects.UnderlayDwfDefinition">UnderlayDwfDefinition</see> name to remove from the document.</param>
            <returns>True if the underlay definition has been successfully removed, or false otherwise.</returns>
            <remarks>Any underlay definition referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.UnderlayDwfDefinitions.Remove(netDxf.Objects.UnderlayDwfDefinition)">
            <summary>
            Removes a DWF underlay definition.
            </summary>
            <param name="item"><see cref="T:netDxf.Objects.UnderlayDwfDefinition">UnderlayDwfDefinition</see> to remove from the document.</param>
            <returns>True if the underlay definition has been successfully removed, or false otherwise.</returns>
            <remarks>Any underlay definition referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.UnderlayPdfDefinitions">
            <summary>
            Represents a collection of PDF underlay definitions.
            </summary>
        </member>
        <member name="M:netDxf.Collections.UnderlayPdfDefinitions.Add(netDxf.Objects.UnderlayPdfDefinition,System.Boolean)">
            <summary>
            Adds a PDF underlay definition to the list.
            </summary>
            <param name="underlayPdfDefinition"><see cref="T:netDxf.Objects.UnderlayPdfDefinition">UnderlayPdfDefinition</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the underlay definition parameter.</param>
            <returns>
            If an underlay definition already exists with the same name as the instance that is being added the method returns the existing underlay definition,
            if not it will return the new underlay definition.
            </returns>
        </member>
        <member name="M:netDxf.Collections.UnderlayPdfDefinitions.Remove(System.String)">
            <summary>
            Removes a PDF underlay definition.
            </summary>
            <param name="name"><see cref="T:netDxf.Objects.UnderlayPdfDefinition">UnderlayPdfDefinition</see> name to remove from the document.</param>
            <returns>True if the underlay definition has been successfully removed, or false otherwise.</returns>
            <remarks>Any underlay definition referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.UnderlayPdfDefinitions.Remove(netDxf.Objects.UnderlayPdfDefinition)">
            <summary>
            Removes a PDF underlay definition.
            </summary>
            <param name="item"><see cref="T:netDxf.Objects.UnderlayPdfDefinition">UnderlayPdfDefinition</see> to remove from the document.</param>
            <returns>True if the underlay definition has been successfully removed, or false otherwise.</returns>
            <remarks>Any underlay definition referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.Views">
            <summary>
            Represents a collection of views.
            </summary>
        </member>
        <member name="M:netDxf.Collections.Views.Add(netDxf.Tables.View,System.Boolean)">
            <summary>
            Adds a view to the list.
            </summary>
            <param name="view"><see cref="T:netDxf.Tables.View">View</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the view parameter.</param>
            <returns>
            If a view already exists with the same name as the instance that is being added the method returns the existing view,
            if not it will return the new view.
            </returns>
        </member>
        <member name="M:netDxf.Collections.Views.Remove(System.String)">
            <summary>
            Removes view.
            </summary>
            <param name="name"><see cref="T:netDxf.Tables.View">View</see> name to remove from the document.</param>
            <returns>True if the view has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved views or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.Views.Remove(netDxf.Tables.View)">
            <summary>
            Removes a view.
            </summary>
            <param name="item"><see cref="T:netDxf.Tables.View">View</see> to remove from the document.</param>
            <returns>True if the view has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved views or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.VPorts">
            <summary>
            Represents a collection of viewports.
            </summary>
            <remarks>
            Multiple Model viewports are not supported, there can be only one called "*Active".
            </remarks>
        </member>
        <member name="M:netDxf.Collections.VPorts.Add(netDxf.Tables.VPort,System.Boolean)">
            <summary>
            Adds an viewports to the list.
            </summary>
            <param name="vport"><see cref="T:netDxf.Tables.VPort">VPort</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the viewport parameter.</param>
            <returns>
            If a viewports already exists with the same name as the instance that is being added the method returns the existing viewports,
            if not it will return the new viewports.
            </returns>
        </member>
        <member name="M:netDxf.Collections.VPorts.Remove(System.String)">
            <summary>
            Removes a viewports.
            </summary>
            <param name="name"><see cref="T:netDxf.Tables.VPort">VPort</see> name to remove from the document.</param>
            <returns>True if the viewports has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved viewports or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.VPorts.Remove(netDxf.Tables.VPort)">
            <summary>
            Removes a viewports.
            </summary>
            <param name="item"><see cref="T:netDxf.Tables.VPort">VPort</see> to remove from the document.</param>
            <returns>True if the viewports has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved viewports or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.XDataDictionary">
            <summary>
            Represents a dictionary of <see cref="T:netDxf.XData">XData</see>.
            </summary>
        </member>
        <member name="M:netDxf.Collections.XDataDictionary.#ctor">
            <summary>
            Initializes a new instance of <c>XDataDictionary</c>.
            </summary>
        </member>
        <member name="M:netDxf.Collections.XDataDictionary.#ctor(System.Collections.Generic.IEnumerable{netDxf.XData})">
            <summary>
            Initializes a new instance of <c>XDataDictionary</c> and has the specified items.
            </summary>
            <param name="items">The list of <see cref="T:netDxf.XData">extended data</see> items initially stored.</param>
        </member>
        <member name="M:netDxf.Collections.XDataDictionary.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <c>XDataDictionary</c> and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of items the collection can initially store.</param>
        </member>
        <member name="P:netDxf.Collections.XDataDictionary.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:netDxf.XData">extended data</see> with the specified application registry name.
            </summary>
            <param name="appId">The application registry name to get or set.</param>
            <returns>The <see cref="T:netDxf.XData">extended data</see> of the application registry.</returns>
        </member>
        <member name="P:netDxf.Collections.XDataDictionary.AppIds">
            <summary>
            Gets an ICollection containing the application registry names of the current dictionary.
            </summary>
        </member>
        <member name="P:netDxf.Collections.XDataDictionary.Values">
            <summary>
            Gets an ICollection containing the <see cref="T:netDxf.XData">extended data</see> list of the current dictionary.
            </summary>
        </member>
        <member name="P:netDxf.Collections.XDataDictionary.Count">
            <summary>
            Gets the number of <see cref="T:netDxf.XData">extended data</see> contained in the current dictionary.
            </summary>
        </member>
        <member name="P:netDxf.Collections.XDataDictionary.IsReadOnly">
            <summary>
            Gets a value indicating whether the actual dictionary is read-only.
            </summary>
        </member>
        <member name="M:netDxf.Collections.XDataDictionary.Add(netDxf.XData)">
            <summary>
            Adds an <see cref="T:netDxf.XData">extended data</see> to the current dictionary.
            </summary>
            <param name="item">The <see cref="T:netDxf.XData">extended data</see> to add.</param>
            <remarks>
            If the current dictionary already contains an appId equals to the extended data that is being added
            the <see cref="T:netDxf.XDataRecord">XDataRecords</see> will be added to the existing one.
            </remarks>
        </member>
        <member name="M:netDxf.Collections.XDataDictionary.AddRange(System.Collections.Generic.IEnumerable{netDxf.XData})">
            <summary>
            Adds a list of <see cref="T:netDxf.XData">extended data</see> to the current dictionary.
            </summary>
            <param name="items">The list of <see cref="T:netDxf.XData">extended data</see> to add.</param>
        </member>
        <member name="M:netDxf.Collections.XDataDictionary.Remove(System.String)">
            <summary>
            Removes an <see cref="T:netDxf.XData">extended data</see> with the specified application registry name from the current dictionary.
            </summary>
            <param name="appId">The application registry name of the <see cref="T:netDxf.XData">extended data</see> to remove.</param>
            <returns>True if the <see cref="T:netDxf.XData">extended data</see> is successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.XDataDictionary.Clear">
            <summary>
            Removes all <see cref="T:netDxf.XData">extended data</see> from the current dictionary.
            </summary>
        </member>
        <member name="M:netDxf.Collections.XDataDictionary.ContainsAppId(System.String)">
            <summary>
            Determines whether current dictionary contains an <see cref="T:netDxf.XData">extended data</see> with the specified application registry name.
            </summary>
            <param name="appId">The application registry name to locate in the current dictionary.</param>
            <returns>True if the current dictionary contains an <see cref="T:netDxf.XData">extended data</see> with the application registry name; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.XDataDictionary.ContainsValue(netDxf.XData)">
            <summary>
            Determines whether current dictionary contains a specified <see cref="T:netDxf.XData">extended data</see>.
            </summary>
            <param name="value">The <see cref="T:netDxf.XData">extended data</see> to locate in the current dictionary.</param>
            <returns>True if the current dictionary contains the <see cref="T:netDxf.XData">extended data</see>; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.XDataDictionary.TryGetValue(System.String,netDxf.XData@)">
            <summary>
            Gets the <see cref="T:netDxf.XData">extended data</see> associated with the specified application registry name.
            </summary>
            <param name="appId">The application registry name whose value to get.</param>
            <param name="value">When this method returns, the <see cref="T:netDxf.XData">extended data</see> associated with the specified application registry name,
            if the application registry name is found; otherwise, null. This parameter is passed uninitialized.</param>
            <returns>True if the current dictionary contains an <see cref="T:netDxf.XData">extended data</see> with the specified application registry name; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.XDataDictionary.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the dictionary.
            </summary>
            <returns>An enumerator that can be used to iterate through the dictionary.</returns>
        </member>
        <member name="T:netDxf.CoordinateSystem">
            <summary>
            Defines the coordinate system reference.
            </summary>
        </member>
        <member name="F:netDxf.CoordinateSystem.World">
            <summary>
            World coordinates.
            </summary>
        </member>
        <member name="F:netDxf.CoordinateSystem.Object">
            <summary>
            Object/Local coordinates.
            </summary>
        </member>
        <member name="T:netDxf.DxfDocument">
            <summary>
            Represents a document to read and write DXF files.
            </summary>
            <remarks>
            The DxfDocument class derives from DxfObject for convenience of this library not because of the DXF structure.
            It can contain external data (XData) information, but it is not saved in the DXF.
            </remarks>
        </member>
        <member name="M:netDxf.DxfDocument.#ctor">
            <summary>
            Initializes a new instance of the <c>DxfDocument</c> class.
            </summary>
            <remarks>The default <see cref="T:netDxf.Header.HeaderVariables">drawing variables</see> of the document will be used.</remarks>
        </member>
        <member name="M:netDxf.DxfDocument.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <c>DxfDocument</c> class.
            </summary>
            <param name="supportFolders">List of the document support folders.</param>
            <remarks>The default <see cref="T:netDxf.Header.HeaderVariables">drawing variables</see> of the document will be used.</remarks>
        </member>
        <member name="M:netDxf.DxfDocument.#ctor(netDxf.Header.DxfVersion)">
            <summary>
            Initializes a new instance of the <c>DxfDocument</c> class.
            </summary>
            <param name="version">AutoCAD drawing database version number.</param>
        </member>
        <member name="M:netDxf.DxfDocument.#ctor(netDxf.Header.DxfVersion,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <c>DxfDocument</c> class.
            </summary>
            <param name="version">AutoCAD drawing database version number.</param>
            <param name="supportFolders">List of the document support folders.</param>
        </member>
        <member name="M:netDxf.DxfDocument.#ctor(netDxf.Header.HeaderVariables)">
            <summary>
            Initializes a new instance of the <c>DxfDocument</c> class.
            </summary>
            <param name="drawingVariables"><see cref="T:netDxf.Header.HeaderVariables">Drawing variables</see> of the document.</param>
        </member>
        <member name="M:netDxf.DxfDocument.#ctor(netDxf.Header.HeaderVariables,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <c>DxfDocument</c> class.
            </summary>
            <param name="drawingVariables"><see cref="T:netDxf.Header.HeaderVariables">Drawing variables</see> of the document.</param>
            <param name="supportFolders">List of the document support folders.</param>
        </member>
        <member name="M:netDxf.DxfDocument.#ctor(netDxf.Header.HeaderVariables,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <c>DxfDocument</c> class.
            </summary>
            <param name="drawingVariables"><see cref="T:netDxf.Header.HeaderVariables">Drawing variables</see> of the document.</param>
            <param name="createDefaultObjects">Check if the default objects need to be created.</param>
            <param name="supportFolders">List of the document support folders.</param>
        </member>
        <member name="P:netDxf.DxfDocument.NumHandles">
            <summary>
            Gets or sets the number of handles generated, this value is saved as an hexadecimal in the drawing variables HandleSeed property.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.SupportFolders">
            <summary>
            Gets the list of folders where the drawing support files are present.
            </summary>
            <remarks>
            When shape linetype segments are used, the shape number will be obtained reading the .shp file equivalent to the .shx file,
            that file will be looked for in the same folder as the .shx file or one of the document support folders.
            </remarks>
        </member>
        <member name="P:netDxf.DxfDocument.BuildDimensionBlocks">
            <remarks>
            By default this value is set to false, no dimension blocks will be generated when adding dimension entities to the document.
            It will be the responsibility of the program importing the DXF to generate the drawing that represent the dimensions.<br />
            When set to true the block that represents the dimension will be generated,
            keep in mind that this process is limited and not all options available in the dimension style will be reflected in the final result.<br />
            When importing a file if the dimension block is present it will be read, regardless of this value.
            If, later, the dimension is modified all updates will be done with the limited dimension drawing capabilities of the library,
            in this case, if you want that the new modifications to be reflected when the file is saved again you can set the dimension block to null,
            and the program reading the resulting file will regenerate the block with the new modifications.
            </remarks>
        </member>
        <member name="P:netDxf.DxfDocument.Viewport">
            <summary>
            Gets the document viewport.
            </summary>
            <remarks>
            This is the same as the *Active VPort in the VPorts list, it describes the current viewport.
            </remarks>
        </member>
        <member name="P:netDxf.DxfDocument.RasterVariables">
            <summary>
            Gets or sets the <see cref="P:netDxf.DxfDocument.RasterVariables">RasterVariables</see> applied to image entities.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Comments">
            <summary>
            Gets or sets the name of the document, once a file is saved or loaded this field is equals the file name without extension.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.DrawingVariables">
            <summary>
            Gets the DXF <see cref="T:netDxf.Header.HeaderVariables">drawing variables</see>.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Name">
            <summary>
            Gets or sets the name of the document.
            </summary>
            <remarks>
            When a file is loaded this field is equals the file name without extension.
            </remarks>
        </member>
        <member name="P:netDxf.DxfDocument.ApplicationRegistries">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.ApplicationRegistries">application registries</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Layers">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.Layers">layers</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Linetypes">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.Linetypes">line types</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.TextStyles">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.TextStyles">text styles</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.ShapeStyles">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.ShapeStyles">shape styles</see> collection.
            </summary>
            <remarks>
            The DXF stores the TextStyles and ShapeStyles in the same table list, here, they are separated since they serve a different role.
            Under normal circumstances you should not need to access this list.
            </remarks>
        </member>
        <member name="P:netDxf.DxfDocument.DimensionStyles">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.DimensionStyles">dimension styles</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.MlineStyles">
            <summary>
            Gets the <see cref="T:netDxf.Collections.MLineStyles">MLine styles</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.UCSs">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.UCSs">User coordinate systems</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Blocks">
            <summary>
            Gets the <see cref="T:netDxf.Collections.BlockRecords">block</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.ImageDefinitions">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.ImageDefinitions">image definitions</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.UnderlayDgnDefinitions">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.UnderlayDgnDefinitions">dgn underlay definitions</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.UnderlayDwfDefinitions">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.UnderlayDwfDefinitions">dwf underlay definitions</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.UnderlayPdfDefinitions">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.UnderlayPdfDefinitions">pdf underlay definitions</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Groups">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.Groups">groups</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Layouts">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.Layouts">layouts</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.VPorts">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.VPorts">viewports</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Views">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.Views">views</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Entities">
            <summary>
            Gets the <see cref="T:netDxf.Collections.DrawingEntities">entities</see> shortcuts.
            </summary>
        </member>
        <member name="M:netDxf.DxfDocument.Load(System.String)">
            <summary>
            Loads a DXF file.
            </summary>
            <param name="file">File name.</param>
            <returns>Returns a DxfDocument. It will return null if the file has not been able to load.</returns>
            <exception cref="T:netDxf.IO.DxfVersionNotSupportedException"></exception>
            <remarks>
            Loading DXF files prior to AutoCad 2000 is not supported.<br />
            The Load method will still raise an exception if they are unable to create the FileStream.<br />
            On Debug mode it will raise any exception that might occur during the whole process.
            </remarks>
        </member>
        <member name="M:netDxf.DxfDocument.Load(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads a DXF file.
            </summary>
            <param name="file">File name.</param>
            <param name="supportFolders">List of the document support folders.</param>
            <returns>Returns a DxfDocument. It will return null if the file has not been able to load.</returns>
            <exception cref="T:netDxf.IO.DxfVersionNotSupportedException"></exception>
            <remarks>
            Loading DXF files prior to AutoCad 2000 is not supported.<br />
            The Load method will still raise an exception if they are unable to create the FileStream.<br />
            On Debug mode it will raise any exception that might occur during the whole process.
            </remarks>
        </member>
        <member name="M:netDxf.DxfDocument.Load(System.IO.Stream)">
            <summary>
            Loads a DXF file.
            </summary>
            <param name="stream">Stream.</param>
            <returns>Returns a DxfDocument. It will return null if the file has not been able to load.</returns>
            <exception cref="T:netDxf.IO.DxfVersionNotSupportedException"></exception>
            <remarks>
            Loading DXF files prior to AutoCad 2000 is not supported.<br />
            On Debug mode it will raise any exception that might occur during the whole process.<br />
            The caller will be responsible of closing the stream.
            </remarks>
        </member>
        <member name="M:netDxf.DxfDocument.Load(System.IO.Stream,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads a DXF file.
            </summary>
            <param name="stream">Stream.</param>
            <param name="supportFolders">List of the document support folders.</param>
            <returns>Returns a DxfDocument. It will return null if the file has not been able to load.</returns>
            <exception cref="T:netDxf.IO.DxfVersionNotSupportedException"></exception>
            <remarks>
            Loading DXF files prior to AutoCad 2000 is not supported.<br />
            On Debug mode it will raise any exception that might occur during the whole process.<br />
            The caller will be responsible of closing the stream.
            </remarks>
        </member>
        <member name="M:netDxf.DxfDocument.Save(System.String)">
            <summary>
            Saves the database of the actual DxfDocument to a text DXF file.
            </summary>
            <param name="file">File name.</param>
            <returns>Return true if the file has been successfully save, false otherwise.</returns>
            <exception cref="T:netDxf.IO.DxfVersionNotSupportedException"></exception>
            <remarks>
            If the file already exists it will be overwritten.<br />
            The Save method will still raise an exception if they are unable to create the FileStream.<br />
            On Debug mode they will raise any exception that might occur during the whole process.
            </remarks>
        </member>
        <member name="M:netDxf.DxfDocument.Save(System.String,System.Boolean)">
            <summary>
            Saves the database of the actual DxfDocument to a DXF file.
            </summary>
            <param name="file">File name.</param>
            <param name="isBinary">Defines if the file will be saved as binary.</param>
            <returns>Returns true if the file has been successfully saved, false otherwise.</returns>
            <exception cref="T:netDxf.IO.DxfVersionNotSupportedException"></exception>
            <remarks>
            If the file already exists it will be overwritten.<br />
            The Save method will still raise an exception if they are unable to create the FileStream.<br />
            On Debug mode they will raise any exception that might occur during the whole process.
            </remarks>
        </member>
        <member name="M:netDxf.DxfDocument.Save(System.IO.Stream)">
            <summary>
            Saves the database of the actual DxfDocument to a text stream.
            </summary>
            <param name="stream">Stream.</param>
            <returns>Return true if the stream has been successfully saved, false otherwise.</returns>
            <exception cref="T:netDxf.IO.DxfVersionNotSupportedException"></exception>
            <remarks>
            On Debug mode it will raise any exception that might occur during the whole process.<br />
            The caller will be responsible of closing the stream.
            </remarks>
        </member>
        <member name="M:netDxf.DxfDocument.Save(System.IO.Stream,System.Boolean)">
            <summary>
            Saves the database of the actual DxfDocument to a stream.
            </summary>
            <param name="stream">Stream.</param>
            <param name="isBinary">Defines if the file will be saved as binary.</param>
            <returns>Return true if the stream has been successfully saved, false otherwise.</returns>
            <exception cref="T:netDxf.IO.DxfVersionNotSupportedException"></exception>
            <remarks>
            On Debug mode it will raise any exception that might occur during the whole process.<br />
            The caller will be responsible of closing the stream.
            </remarks>
        </member>
        <member name="M:netDxf.DxfDocument.CheckDxfFileVersion(System.String)">
            <summary>
            Checks the AutoCAD DXF file database version.
            </summary>
            <param name="file">File name.</param>
            <returns>String that represents the DXF file version.</returns>
        </member>
        <member name="M:netDxf.DxfDocument.CheckDxfFileVersion(System.String,System.Boolean@)">
            <summary>
            Checks the AutoCAD DXF file database version.
            </summary>
            <param name="file">File name.</param>
            <param name="isBinary">Returns true if the DXF is a binary file.</param>
            <returns>String that represents the DXF file version.</returns>
        </member>
        <member name="M:netDxf.DxfDocument.CheckDxfFileVersion(System.IO.Stream)">
            <summary>
            Checks the AutoCAD DXF file database version.
            </summary>
            <param name="stream">Stream</param>
            <returns>String that represents the DXF file version.</returns>
            <remarks>The caller will be responsible of closing the stream.</remarks>
        </member>
        <member name="M:netDxf.DxfDocument.CheckDxfFileVersion(System.IO.Stream,System.Boolean@)">
            <summary>
            Checks the AutoCAD DXF file database version.
            </summary>
            <param name="stream">Stream</param>
            <param name="isBinary">Returns true if the DXF is a binary file.</param>
            <returns>String that represents the DXF file version.</returns>
            <remarks>The caller will be responsible of closing the stream.</remarks>
        </member>
        <member name="M:netDxf.DxfDocument.GetObjectByHandle(System.String)">
            <summary>
            Gets a DXF object by its handle.
            </summary>
            <param name="objectHandle">DxfObject handle.</param>
            <returns>The DxfObject that has the provided handle, null otherwise.</returns>
        </member>
        <member name="T:netDxf.DxfObject">
            <summary>
            Represents the base class for all DXF objects.
            </summary>
        </member>
        <member name="M:netDxf.DxfObject.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>DxfObject</c> class.
            </summary>
            <param name="codename"><see cref="T:netDxf.DxfObjectCode">DXF object name</see>.</param>
        </member>
        <member name="P:netDxf.DxfObject.CodeName">
            <summary>
            Gets the <see cref="T:netDxf.DxfObjectCode">DXF object name</see>.
            </summary>
        </member>
        <member name="P:netDxf.DxfObject.Handle">
            <summary>
            Gets the handle assigned to the DXF object.
            </summary>
            <remarks>
            The handle is a unique hexadecimal number assigned automatically to every DXF object,
            that has been added to a <see cref="T:netDxf.DxfDocument">DxfDocument</see>.
            </remarks>
        </member>
        <member name="P:netDxf.DxfObject.Owner">
            <summary>
            Gets the owner of the actual <see cref="T:netDxf.DxfObject">DxfObject</see>.
            </summary>
        </member>
        <member name="P:netDxf.DxfObject.XData">
            <summary>
            Gets the entity <see cref="T:netDxf.Collections.XDataDictionary">extended data</see>.
            </summary>
        </member>
        <member name="M:netDxf.DxfObject.AssignHandle(System.Int64)">
            <summary>
            Assigns a handle to the object based in a integer counter.
            </summary>
            <param name="entityNumber">Number to assign to the actual object.</param>
            <returns>Next available entity number.</returns>
            <remarks>
            Some objects might consume more than one, this is the case, for example, of polylines that will assign
            automatically a handle to its vertexes. The entity number will be converted to an hexadecimal number.
            </remarks>
        </member>
        <member name="M:netDxf.DxfObject.ToString">
            <summary>
            Obtains a string that represents the DXF object.
            </summary>
            <returns>A string text.</returns>
        </member>
        <member name="T:netDxf.DxfObjectCode">
            <summary>
            DXF string codes.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Unknown">
            <summary>
            Not defined.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.HeaderSection">
            <summary>
            Header section.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.ClassesSection">
            <summary>
            Classes section.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Class">
            <summary>
            Class entry.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.TablesSection">
            <summary>
            Tables section.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.BlocksSection">
            <summary>
            Blocks section.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.EntitiesSection">
            <summary>
            Entities section.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.ObjectsSection">
            <summary>
            Objects section.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.ThumbnailImageSection">
            <summary>
            Thumbnail section.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.AcdsDataSection">
            <summary>
            AcdsData section. Currently it is used for storing the data for solids, regions, surfaces, and the preview image.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.BeginSection">
            <summary>
            Begin section code.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.EndSection">
            <summary>
            End section code.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.LayerTable">
            <summary>
            Layers table.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.VportTable">
            <summary>
            Viewports table.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.ViewTable">
            <summary>
            Views table.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.UcsTable">
            <summary>
            User coordinate system table.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.BlockRecordTable">
            <summary>
            Block records table.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.LinetypeTable">
            <summary>
            Line types table.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.TextStyleTable">
            <summary>
            Text styles table.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.DimensionStyleTable">
            <summary>
            Dimension styles table.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.ApplicationIdTable">
            <summary>
            Extended data application registries  table.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Table">
            <summary>
            Begin table code.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.EndTable">
            <summary>
            End table code.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.BeginBlock">
            <summary>
            Begin block code.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.EndBlock">
            <summary>
            End block code.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.GroupDictionary">
            <summary>
            Group dictionary.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.LayoutDictionary">
            <summary>
            Layouts dictionary.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.MLineStyleDictionary">
            <summary>
            Multiline styles dictionary.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.ImageDefDictionary">
            <summary>
            Multiline styles dictionary.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.ImageVarsDictionary">
            <summary>
            MLine styles dictionary.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.UnderlayDgnDefinitionDictionary">
            <summary>
            DGN underlay definition dictionary.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.UnderlayDwfDefinitionDictionary">
            <summary>
            DWF underlay definition styles dictionary.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.UnderlayPdfDefinitionDictionary">
            <summary>
            PDF underlay definition styles dictionary.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.LayerStates">
            <summary>
            Layer states dictionary.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.EndOfFile">
            <summary>
            End of file.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.AppId">
            <summary>
            Application registry.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.DimStyle">
            <summary>
            Dimension style.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.BlockRecord">
            <summary>
            Block record.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Linetype">
            <summary>
            Line type.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Layer">
            <summary>
            Layer.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.VPort">
            <summary>
            Viewport table object.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.TextStyle">
            <summary>
            Text style.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.MLineStyle">
            <summary>
            Multiline style.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.View">
            <summary>
            View.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Ucs">
            <summary>
            User coordinate system.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Block">
            <summary>
            Block.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.BlockEnd">
            <summary>
            End block.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Line">
            <summary>
            Line.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Ray">
            <summary>
            Ray.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.XLine">
            <summary>
            XLine.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Ellipse">
            <summary>
            Ellipse.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Polyline">
            <summary>
            Polyline.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.LwPolyline">
            <summary>
            Lightweight polyline.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Circle">
            <summary>
            Circle.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Point">
            <summary>
            Point.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Arc">
            <summary>
            Arc.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Shape">
            <summary>
            Shape
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Spline">
            <summary>
            Spline (nonuniform rational B-splines, NURBS).
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Solid">
            <summary>
            Solid.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.AcadTable">
            <summary>
            Table made of rows and columns.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Trace">
            <summary>
            Trace.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Text">
            <summary>
            Text string.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Mesh">
            <summary>
            Mesh.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.MText">
            <summary>
            Multiline text string.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.MLine">
            <summary>
            MLine.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Face3d">
            <summary>
            3d face.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Insert">
            <summary>
            Block insertion.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Hatch">
            <summary>
            Hatch.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Leader">
            <summary>
            Leader.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Tolerance">
            <summary>
            Tolerance.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Wipeout">
            <summary>
            Wipeout.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Underlay">
            <summary>
            Underlay.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.UnderlayPdf">
            <summary>
            PDF underlay.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.UnderlayDwf">
            <summary>
            DWF underlay.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.UnderlayDgn">
            <summary>
            DGN underlay.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.UnderlayDefinition">
            <summary>
            Underlay definition.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.UnderlayPdfDefinition">
            <summary>
            PDF underlay definition.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.UnderlayDwfDefinition">
            <summary>
            DWF underlay definition.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.UnderlayDgnDefinition">
            <summary>
            DGN underlay definition.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.AttributeDefinition">
            <summary>
            Attribute definition.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Attribute">
            <summary>
            Attribute.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Vertex">
            <summary>
            Vertex.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.EndSequence">
            <summary>
            End sequence.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Dimension">
            <summary>
            Dimension.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Dictionary">
            <summary>
            Dictionary.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.XRecord">
            <summary>
            XRecord.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Image">
            <summary>
            Raster image.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Viewport">
            <summary>
            Viewport entity.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.ImageDef">
            <summary>
            Image definition.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.ImageDefReactor">
            <summary>
            Image definition reactor.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.RasterVariables">
            <summary>
            Raster variables.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Group">
            <summary>
            Groups.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Layout">
            <summary>
            Layouts.
            </summary>
        </member>
        <member name="T:netDxf.Entities.AlignedDimension">
            <summary>
            Represents a dimension <see cref="T:netDxf.Entities.EntityObject">entity</see> that is aligned the reference line.
            </summary>
        </member>
        <member name="M:netDxf.Entities.AlignedDimension.#ctor">
            <summary>
            Initializes a new instance of the <c>AlignedDimension</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.AlignedDimension.#ctor(netDxf.Entities.Line,System.Double)">
            <summary>
            Initializes a new instance of the <c>AlignedDimension</c> class.
            </summary>
            <param name="referenceLine">Reference <see cref="T:netDxf.Entities.Line">line</see> of the dimension.</param>
            <param name="offset">Distance between the reference line and the dimension line.</param>
            <remarks>The reference points define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.AlignedDimension.#ctor(netDxf.Entities.Line,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>AlignedDimension</c> class.
            </summary>
            <param name="referenceLine">Reference <see cref="T:netDxf.Entities.Line">line</see> of the dimension.</param>
            <param name="offset">Distance between the reference line and the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The reference points define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.AlignedDimension.#ctor(netDxf.Entities.Line,System.Double,netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>AlignedDimension</c> class.
            </summary>
            <param name="referenceLine">Reference <see cref="T:netDxf.Entities.Line">line</see> of the dimension.</param>
            <param name="offset">Distance between the reference line and the dimension line.</param>
            <param name="normal">Normal vector of the plane where the dimension is defined.</param>
            <remarks>The reference points define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.AlignedDimension.#ctor(netDxf.Entities.Line,System.Double,netDxf.Vector3,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>AlignedDimension</c> class.
            </summary>
            <param name="referenceLine">Reference <see cref="T:netDxf.Entities.Line">line</see> of the dimension.</param>
            <param name="offset">Distance between the reference line and the dimension line.</param>
            <param name="normal">Normal vector of the plane where the dimension is defined.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The reference line define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.AlignedDimension.#ctor(netDxf.Vector2,netDxf.Vector2,System.Double)">
            <summary>
            Initializes a new instance of the <c>AlignedDimension</c> class.
            </summary>
            <param name="firstPoint">First reference <see cref="T:netDxf.Vector2">point</see> of the dimension.</param>
            <param name="secondPoint">Second reference <see cref="T:netDxf.Vector2">point</see> of the dimension.</param>
            <param name="offset">Distance between the reference line and the dimension line.</param>
            <remarks>The reference points define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.AlignedDimension.#ctor(netDxf.Vector2,netDxf.Vector2,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>AlignedDimension</c> class.
            </summary>
            <param name="firstPoint">First reference <see cref="T:netDxf.Vector2">point</see> of the dimension.</param>
            <param name="secondPoint">Second reference <see cref="T:netDxf.Vector2">point</see> of the dimension.</param>
            <param name="offset">Distance between the reference line and the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The reference points define the distance to be measure.</remarks>
        </member>
        <member name="P:netDxf.Entities.AlignedDimension.FirstReferencePoint">
            <summary>
            Gets or sets the first definition point of the dimension in OCS (object coordinate system).
            </summary>
        </member>
        <member name="P:netDxf.Entities.AlignedDimension.SecondReferencePoint">
            <summary>
            Gets or sets the second definition point of the dimension in OCS (object coordinate system).
            </summary>
        </member>
        <member name="P:netDxf.Entities.AlignedDimension.DimLinePosition">
            <summary>
            Gets the location of the dimension line.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AlignedDimension.Offset">
            <summary>
            Gets or sets the distance between the reference line and the dimension line.
            </summary>
            <remarks>
            The offset value must be equal or greater than zero.<br />
            The side at which the dimension line is drawn depends of the direction of its reference line.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.AlignedDimension.Measurement">
            <summary>
            Actual measurement.
            </summary>
            <remarks>The dimension is always measured in the plane defined by the normal.</remarks>
        </member>
        <member name="M:netDxf.Entities.AlignedDimension.SetDimensionLinePosition(netDxf.Vector2)">
            <summary>
            Calculates the dimension offset from a point along the dimension line.
            </summary>
            <param name="point">Point along the dimension line.</param>
        </member>
        <member name="M:netDxf.Entities.AlignedDimension.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.AlignedDimension.CalculateReferencePoints">
            <summary>
            Calculate the dimension reference points.
            </summary>
        </member>
        <member name="M:netDxf.Entities.AlignedDimension.BuildBlock(System.String)">
            <summary>
            Gets the block that contains the entities that make up the dimension picture.
            </summary>
            <param name="name">Name to be assigned to the generated block.</param>
            <returns>The block that represents the actual dimension.</returns>
        </member>
        <member name="M:netDxf.Entities.AlignedDimension.Clone">
            <summary>
            Creates a new AlignedDimension that is a copy of the current instance.
            </summary>
            <returns>A new AlignedDimension that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.Angular2LineDimension">
            <summary>
            Represents a 3 point angular dimension <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Angular2LineDimension.#ctor">
            <summary>
            Initializes a new instance of the <c>Angular2LineDimension</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Angular2LineDimension.#ctor(netDxf.Entities.Line,netDxf.Entities.Line,System.Double)">
            <summary>
            Initializes a new instance of the <c>Angular2LineDimension</c> class.
            </summary>
            <param name="firstLine">First <see cref="T:netDxf.Entities.Line">line</see> that defines the angle to measure.</param>
            <param name="secondLine">Second <see cref="T:netDxf.Entities.Line">line</see> that defines the angle to measure.</param>
            <param name="offset">Distance between the center point and the dimension line.</param>
        </member>
        <member name="M:netDxf.Entities.Angular2LineDimension.#ctor(netDxf.Entities.Line,netDxf.Entities.Line,System.Double,netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>Angular2LineDimension</c> class.
            </summary>
            <param name="firstLine">First <see cref="T:netDxf.Entities.Line">line</see> that defines the angle to measure.</param>
            <param name="secondLine">Second <see cref="T:netDxf.Entities.Line">line</see> that defines the angle to measure.</param>
            <param name="offset">Distance between the center point and the dimension line.</param>
            <param name="normal">Normal vector of the plane where the dimension is defined.</param>
        </member>
        <member name="M:netDxf.Entities.Angular2LineDimension.#ctor(netDxf.Entities.Line,netDxf.Entities.Line,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>Angular2LineDimension</c> class.
            </summary>
            <param name="firstLine">First <see cref="T:netDxf.Entities.Line">line</see> that defines the angle to measure.</param>
            <param name="secondLine">Second <see cref="T:netDxf.Entities.Line">line</see> that defines the angle to measure.</param>
            <param name="offset">Distance between the center point and the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
        </member>
        <member name="M:netDxf.Entities.Angular2LineDimension.#ctor(netDxf.Entities.Line,netDxf.Entities.Line,System.Double,netDxf.Vector3,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>Angular2LineDimension</c> class.
            </summary>
            <param name="firstLine">First <see cref="T:netDxf.Entities.Line">line</see> that defines the angle to measure.</param>
            <param name="secondLine">Second <see cref="T:netDxf.Entities.Line">line</see> that defines the angle to measure.</param>
            <param name="offset">Distance between the center point and the dimension line.</param>
            <param name="normal">Normal vector of the plane where the dimension is defined.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
        </member>
        <member name="M:netDxf.Entities.Angular2LineDimension.#ctor(netDxf.Vector2,netDxf.Vector2,netDxf.Vector2,netDxf.Vector2,System.Double)">
            <summary>
            Initializes a new instance of the <c>Angular2LineDimension</c> class.
            </summary>
            <param name="startFirstLine">Start <see cref="T:netDxf.Vector2">point</see> of the first line that defines the angle to measure.</param>
            <param name="endFirstLine">End <see cref="T:netDxf.Vector2">point</see> of the first line that defines the angle to measure.</param>
            <param name="startSecondLine">Start <see cref="T:netDxf.Vector2">point</see> of the second line that defines the angle to measure.</param>
            <param name="endSecondLine">End <see cref="T:netDxf.Vector2">point</see> of the second line that defines the angle to measure.</param>
            <param name="offset">Distance between the center point and the dimension line.</param>
        </member>
        <member name="M:netDxf.Entities.Angular2LineDimension.#ctor(netDxf.Vector2,netDxf.Vector2,netDxf.Vector2,netDxf.Vector2,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>Angular2LineDimension</c> class.
            </summary>
            <param name="startFirstLine">Start <see cref="T:netDxf.Vector2">point</see> of the first line that defines the angle to measure.</param>
            <param name="endFirstLine">End <see cref="T:netDxf.Vector2">point</see> of the first line that defines the angle to measure.</param>
            <param name="startSecondLine">Start <see cref="T:netDxf.Vector2">point</see> of the second line that defines the angle to measure.</param>
            <param name="endSecondLine">End <see cref="T:netDxf.Vector2">point</see> of the second line that defines the angle to measure.</param>
            <param name="offset">Distance between the center point and the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
        </member>
        <member name="P:netDxf.Entities.Angular2LineDimension.CenterPoint">
            <summary>
            Gets the center <see cref="T:netDxf.Vector2">point</see> of the measured arc in local coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Angular2LineDimension.StartFirstLine">
            <summary>
            Start <see cref="T:netDxf.Vector2">point</see> of the first line that defines the angle to measure in local coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Angular2LineDimension.EndFirstLine">
            <summary>
            End <see cref="T:netDxf.Vector2">point</see> of the first line that defines the angle to measure in local coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Angular2LineDimension.StartSecondLine">
            <summary>
            Start <see cref="T:netDxf.Vector2">point</see> of the second line that defines the angle to measure in OCS (object coordinate system).
            </summary>
        </member>
        <member name="P:netDxf.Entities.Angular2LineDimension.EndSecondLine">
            <summary>
            End <see cref="T:netDxf.Vector2">point</see> of the second line that defines the angle to measure in OCS (object coordinate system).
            </summary>
        </member>
        <member name="P:netDxf.Entities.Angular2LineDimension.ArcDefinitionPoint">
            <summary>
            Gets the location of the dimension line arc.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Angular2LineDimension.Offset">
            <summary>
            Gets or sets the distance between the center point and the dimension line.
            </summary>
            <remarks>
            Offset values cannot be negative and, even thought, zero values are allowed, they are not recommended.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Angular2LineDimension.Measurement">
            <summary>
            Actual measurement.
            </summary>
            <remarks>The dimension is always measured in the plane defined by the normal.</remarks>
        </member>
        <member name="M:netDxf.Entities.Angular2LineDimension.SetDimensionLinePosition(netDxf.Vector2)">
            <summary>
            Calculates the dimension offset from a point along the dimension line.
            </summary>
            <param name="point">Point along the dimension line.</param>
            <remarks>
            The start and end points of the reference lines will be modified,
            the angle measurement is always made from the direction of the first line to the direction of the second line.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Angular2LineDimension.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>
            Non-uniform and zero scaling local to the dimension entity are not supported.<br />
            The transformation will not be applied if the resulting reference lines are parallel.<br />
            Matrix3 adopts the convention of using column vectors to represent a transformation matrix.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Angular2LineDimension.CalculateReferencePoints">
            <summary>
            Calculate the dimension reference points.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Angular2LineDimension.BuildBlock(System.String)">
            <summary>
            Gets the block that contains the entities that make up the dimension picture.
            </summary>
            <param name="name">Name to be assigned to the generated block.</param>
            <returns>The block that represents the actual dimension.</returns>
        </member>
        <member name="M:netDxf.Entities.Angular2LineDimension.Clone">
            <summary>
            Creates a new Angular2LineDimension that is a copy of the current instance.
            </summary>
            <returns>A new Angular2LineDimension that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.Angular3PointDimension">
            <summary>
            Represents a 3 point angular dimension <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Angular3PointDimension.#ctor">
            <summary>
            Initializes a new instance of the <c>Angular3PointDimension</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Angular3PointDimension.#ctor(netDxf.Entities.Arc,System.Double)">
            <summary>
            Initializes a new instance of the <c>Angular3PointDimension</c> class.
            </summary>
            <param name="arc"><see cref="T:netDxf.Entities.Arc">Arc</see> to measure.</param>
            <param name="offset">Distance between the center of the arc and the dimension line.</param>
        </member>
        <member name="M:netDxf.Entities.Angular3PointDimension.#ctor(netDxf.Entities.Arc,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>Angular3PointDimension</c> class.
            </summary>
            <param name="arc">Angle <see cref="T:netDxf.Entities.Arc">arc</see> to measure.</param>
            <param name="offset">Distance between the center of the arc and the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
        </member>
        <member name="M:netDxf.Entities.Angular3PointDimension.#ctor(netDxf.Vector2,netDxf.Vector2,netDxf.Vector2,System.Double)">
            <summary>
            Initializes a new instance of the <c>Angular3PointDimension</c> class.
            </summary>
            <param name="centerPoint">Center of the angle arc to measure.</param>
            <param name="startPoint">Angle start point.</param>
            <param name="endPoint">Angle end point.</param>
            <param name="offset">Distance between the center point and the dimension line.</param>
        </member>
        <member name="M:netDxf.Entities.Angular3PointDimension.#ctor(netDxf.Vector2,netDxf.Vector2,netDxf.Vector2,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>Angular3PointDimension</c> class.
            </summary>
            <param name="centerPoint">Center of the angle arc to measure.</param>
            <param name="startPoint">Angle start point.</param>
            <param name="endPoint">Angle end point.</param>
            <param name="offset">Distance between the center point and the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
        </member>
        <member name="P:netDxf.Entities.Angular3PointDimension.CenterPoint">
            <summary>
            Gets or sets the center <see cref="T:netDxf.Vector2">point</see> of the arc in OCS (object coordinate system).
            </summary>
        </member>
        <member name="P:netDxf.Entities.Angular3PointDimension.StartPoint">
            <summary>
            Gets or sets the angle start <see cref="T:netDxf.Vector2">point</see> of the dimension in OCS (object coordinate system).
            </summary>
        </member>
        <member name="P:netDxf.Entities.Angular3PointDimension.EndPoint">
            <summary>
            Gets or sets the angle end <see cref="T:netDxf.Vector2">point</see> of the dimension in OCS (object coordinate system).
            </summary>
        </member>
        <member name="P:netDxf.Entities.Angular3PointDimension.ArcDefinitionPoint">
            <summary>
            Gets the location of the dimension line arc.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Angular3PointDimension.Offset">
            <summary>
            Gets or sets the distance between the center point and the dimension line.
            </summary>
            <remarks>
            Offset values cannot be negative and, even thought, zero values are allowed, they are not recommended.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Angular3PointDimension.Measurement">
            <summary>
            Actual measurement.
            </summary>
            <remarks>The dimension is always measured in the plane defined by the normal.</remarks>
        </member>
        <member name="M:netDxf.Entities.Angular3PointDimension.SetDimensionLinePosition(netDxf.Vector2)">
            <summary>
            Calculates the dimension offset from a point along the dimension line.
            </summary>
            <param name="point">Point along the dimension line.</param>
            <remarks>
            The start and end points of the reference lines will be modified,
            the angle measurement is always made from the direction of the center-first point line to the direction of the center-second point line.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Angular3PointDimension.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>
            Non-uniform and zero scaling local to the dimension entity are not supported.<br />
            The transformation will not be applied if the resulting reference lines are parallel.<br />
            Matrix3 adopts the convention of using column vectors to represent a transformation matrix.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Angular3PointDimension.CalculateReferencePoints">
            <summary>
            Calculate the dimension reference points.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Angular3PointDimension.BuildBlock(System.String)">
            <summary>
            Gets the block that contains the entities that make up the dimension picture.
            </summary>
            <param name="name">Name to be assigned to the generated block.</param>
            <returns>The block that represents the actual dimension.</returns>
        </member>
        <member name="M:netDxf.Entities.Angular3PointDimension.Clone">
            <summary>
            Creates a new Angular3PointDimension that is a copy of the current instance.
            </summary>
            <returns>A new Angular3PointDimension that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.Arc">
            <summary>
            Represents a circular arc <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Arc.#ctor">
            <summary>
            Initializes a new instance of the <c>Arc</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Arc.#ctor(netDxf.Vector2,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>Arc</c> class.
            </summary>
            <param name="center">Arc <see cref="T:netDxf.Vector2">center</see> in world coordinates.</param>
            <param name="radius">Arc radius.</param>
            <param name="startAngle">Arc start angle in degrees.</param>
            <param name="endAngle">Arc end angle in degrees.</param>
        </member>
        <member name="M:netDxf.Entities.Arc.#ctor(netDxf.Vector3,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>Arc</c> class.
            </summary>
            <param name="center">Arc <see cref="T:netDxf.Vector3">center</see> in world coordinates.</param>
            <param name="radius">Arc radius.</param>
            <param name="startAngle">Arc start angle in degrees.</param>
            <param name="endAngle">Arc end angle in degrees.</param>
        </member>
        <member name="P:netDxf.Entities.Arc.Center">
            <summary>
            Gets or sets the arc <see cref="T:netDxf.Vector3">center</see> in world coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Arc.Radius">
            <summary>
            Gets or sets the arc radius.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Arc.StartAngle">
            <summary>
            Gets or sets the arc start angle in degrees.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Arc.EndAngle">
            <summary>
            Gets or sets the arc end angle in degrees.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Arc.Thickness">
            <summary>
            Gets or sets the arc thickness.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Arc.PolygonalVertexes(System.Int32)">
            <summary>
            Converts the arc in a list of vertexes.
            </summary>
            <param name="precision">Number of vertexes generated.</param>
            <returns>A list vertexes that represents the arc expressed in object coordinate system.</returns>
        </member>
        <member name="M:netDxf.Entities.Arc.ToPolyline2D(System.Int32)">
            <summary>
            Converts the arc in a Polyline2D.
            </summary>
            <param name="precision">Number of divisions.</param>
            <returns>A new instance of <see cref="T:netDxf.Entities.Polyline2D">Polyline2D</see> that represents the arc.</returns>
        </member>
        <member name="M:netDxf.Entities.Arc.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>
            Non-uniform scaling is not supported, create an ellipse arc from the arc data and transform that instead.<br />
            Matrix3 adopts the convention of using column vectors to represent a transformation matrix.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Arc.Clone">
            <summary>
            Creates a new Arc that is a copy of the current instance.
            </summary>
            <returns>A new Arc that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.Attribute">
            <summary>
            Represents an attribute.
            </summary>
            <remarks>
            The attribute position, rotation, height and width factor values also includes the transformation of the <see cref="T:netDxf.Entities.Insert">Insert</see> entity to which it belongs.<br />
            During the attribute initialization a copy of all attribute definition properties will be copied,
            so any changes made to the attribute definition will only be applied to new attribute instances and not to existing ones.
            This behavior is to allow imported <see cref="T:netDxf.Entities.Insert">Insert</see> entities to have attributes without definition in the block, 
            although this might sound not totally correct it is allowed by AutoCad.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Attribute.#ctor(netDxf.Entities.AttributeDefinition)">
            <summary>
            Initializes a new instance of the <c>Attribute</c> class.
            </summary>
            <param name="definition"><see cref="T:netDxf.Entities.AttributeDefinition">Attribute definition</see>.</param>
        </member>
        <member name="P:netDxf.Entities.Attribute.Color">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.AciColor">color</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Layer">
            <summary>
            Gets or sets the entity <see cref="P:netDxf.Entities.Attribute.Layer">layer</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Linetype">
            <summary>
            Gets or sets the entity <see cref="P:netDxf.Entities.Attribute.Linetype">line type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Lineweight">
            <summary>
            Gets or sets the entity line weight, one unit is always 1/100 mm (default = ByLayer).
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Transparency">
            <summary>
            Gets or sets layer transparency (default: ByLayer).
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.LinetypeScale">
            <summary>
            Gets or sets the entity line type scale.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.IsVisible">
            <summary>
            Gets or set the entity visibility.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Normal">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Vector3">normal</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Owner">
            <summary>
            Gets the owner of the actual DXF object.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Definition">
            <summary>
            Gets the attribute definition.
            </summary>
            <remarks>If the insert attribute has no definition it will return null.</remarks>
        </member>
        <member name="P:netDxf.Entities.Attribute.Tag">
            <summary>
            Gets the attribute tag.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Height">
            <summary>
            Gets or sets the text height.
            </summary>
            <remarks>
            Valid values must be greater than zero. Default: 1.0.<br />
            When Alignment.Aligned is used this value is not applicable, it will be automatically adjusted so the text will fit in the specified width.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Attribute.Width">
            <summary>
            Gets or sets the text width, only applicable for text Alignment.Fit and Alignment.Align.
            </summary>
            <remarks>Valid values must be greater than zero. Default: 1.0.</remarks>
        </member>
        <member name="P:netDxf.Entities.Attribute.WidthFactor">
            <summary>
            Gets or sets the width factor.
            </summary>
            <remarks>
            Valid values range from 0.01 to 100. Default: 1.0.<br />
            When Alignment.Fit is used this value is not applicable, it will be automatically adjusted so the text will fit in the specified width.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Attribute.ObliqueAngle">
            <summary>
            Gets or sets the font oblique angle.
            </summary>
            <remarks>Valid values range from -85 to 85. Default: 0.0.</remarks>
        </member>
        <member name="P:netDxf.Entities.Attribute.Value">
            <summary>
            Gets or sets the attribute value.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Style">
            <summary>
            Gets or sets the attribute text style.
            </summary>
            <remarks>
            The <see cref="T:netDxf.Tables.TextStyle">text style</see> defines the basic properties of the information text.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Attribute.Position">
            <summary>
            Gets or sets the attribute <see cref="T:netDxf.Vector3">position</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Flags">
            <summary>
            Gets or sets the attribute flags.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Rotation">
            <summary>
            Gets or sets the attribute text rotation in degrees.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Alignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.IsBackward">
            <summary>
            Gets or sets if the attribute text is backward (mirrored in X).
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.IsUpsideDown">
            <summary>
            Gets or sets if the attribute text is upside down (mirrored in Y).
            </summary>
        </member>
        <member name="M:netDxf.Entities.Attribute.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current attribute given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.Attribute.TransformBy(netDxf.Matrix4)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 4x4 transformation matrix.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <remarks>Matrix4 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.Attribute.Clone">
            <summary>
            Creates a new Attribute that is a copy of the current instance.
            </summary>
            <returns>A new Attribute that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Entities.AttributeChangeEventArgs.#ctor(netDxf.Entities.Attribute)">
            <summary>
            Initializes a new instance of <c>AttributeChangeEventArgs</c>.
            </summary>
            <param name="item">The attribute that is being added or removed from the insert.</param>
        </member>
        <member name="P:netDxf.Entities.AttributeChangeEventArgs.Item">
            <summary>
            Gets the attribute that is being added or removed.
            </summary>
        </member>
        <member name="T:netDxf.Entities.AttributeDefinition">
            <summary>
            Represents an attribute definition.
            </summary>
            <remarks>
            AutoCad allows to have duplicate tags in the attribute definitions list, but this library does not.
            To have duplicate tags is not recommended in any way, since there will be now way to know which is the definition associated to the insert attribute.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.AttributeDefinition.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>AttributeDefinition</c> class.
            </summary>
            <param name="tag">Attribute identifier.</param>
        </member>
        <member name="M:netDxf.Entities.AttributeDefinition.#ctor(System.String,netDxf.Tables.TextStyle)">
            <summary>
            Initializes a new instance of the <c>AttributeDefinition</c> class.
            </summary>
            <param name="tag">Attribute identifier.</param>
            <param name="style">Attribute <see cref="T:netDxf.Tables.TextStyle">text style</see>.</param>
        </member>
        <member name="M:netDxf.Entities.AttributeDefinition.#ctor(System.String,System.Double,netDxf.Tables.TextStyle)">
            <summary>
            Initializes a new instance of the <c>AttributeDefinition</c> class.
            </summary>
            <param name="tag">Attribute identifier.</param>
            <param name="textHeight">Height of the attribute definition text.</param>
            <param name="style">Attribute <see cref="T:netDxf.Tables.TextStyle">text style</see>.</param>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Color">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.AciColor">color</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Layer">
            <summary>
            Gets or sets the entity <see cref="P:netDxf.Entities.AttributeDefinition.Layer">layer</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Linetype">
            <summary>
            Gets or sets the entity <see cref="P:netDxf.Entities.AttributeDefinition.Linetype">line type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Lineweight">
            <summary>
            Gets or sets the entity line weight, one unit is always 1/100 mm (default = ByLayer).
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Transparency">
            <summary>
            Gets or sets layer transparency (default: ByLayer).
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.LinetypeScale">
            <summary>
            Gets or sets the entity line type scale.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.IsVisible">
            <summary>
            Gets or set the entity visibility.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Normal">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Vector3">normal</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Tag">
            <summary>
            Gets the attribute identifier.
            </summary>
            <remarks>
            Even thought the official DXF documentation clearly says that the attribute definition tag cannot contain spaces,
            most programs seems to allow them, but I cannot guarantee that all will behave this way.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Prompt">
            <summary>
            Gets or sets the attribute information text.
            </summary>
            <remarks>This is the text prompt shown to introduce the attribute value when new Insert entities are inserted into the drawing.</remarks>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Height">
            <summary>
            Gets or sets the text height.
            </summary>
            <remarks>
            Valid values must be greater than zero. Default: 1.0.<br />
            When Alignment.Aligned is used this value is not applicable, it will be automatically adjusted so the text will fit in the specified width.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Width">
            <summary>
            Gets or sets the text width, only applicable for text Alignment.Fit and Alignment.Align.
            </summary>
            <remarks>Valid values must be greater than zero. Default: 1.0.</remarks>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.WidthFactor">
            <summary>
            Gets or sets the width factor.
            </summary>
            <remarks>
            Valid values range from 0.01 to 100. Default: 1.0.<br />
            When Alignment.Fit is used this value is not applicable, it will be automatically adjusted so the text will fit in the specified width.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.ObliqueAngle">
            <summary>
            Gets or sets the font oblique angle.
            </summary>
            <remarks>Valid values range from -85 to 85. Default: 0.0.</remarks>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Value">
            <summary>
            Gets or sets the attribute default value.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Style">
            <summary>
            Gets or sets  the attribute text style.
            </summary>
            <remarks>
            The <see cref="T:netDxf.Tables.TextStyle">text style</see> defines the basic properties of the information text.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Position">
            <summary>
            Gets or sets the attribute <see cref="T:netDxf.Vector3">position</see> in object coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Flags">
            <summary>
            Gets or sets the attribute flags.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Rotation">
            <summary>
            Gets or sets the attribute text rotation in degrees.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Alignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.IsBackward">
            <summary>
            Gets or sets if the attribute definition text is backward (mirrored in X).
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.IsUpsideDown">
            <summary>
            Gets or sets if the attribute definition text is upside down (mirrored in Y).
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Owner">
            <summary>
            Gets the owner of the actual DXF object.
            </summary>
        </member>
        <member name="M:netDxf.Entities.AttributeDefinition.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current attribute definition given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.AttributeDefinition.TransformBy(netDxf.Matrix4)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 4x4 transformation matrix.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <remarks>Matrix4 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.AttributeDefinition.Clone">
            <summary>
            Creates a new AttributeDefinition that is a copy of the current instance.
            </summary>
            <returns>A new AttributeDefinition that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.AttributeFlags">
            <summary>Attribute flags.</summary>
        </member>
        <member name="F:netDxf.Entities.AttributeFlags.None">
            <summary>
            No flags equivalent to Visible/Not constant/Not verify/Not Predefined.
            </summary>
        </member>
        <member name="F:netDxf.Entities.AttributeFlags.Hidden">
            <summary>
            Attribute is invisible (does not appear).
            </summary>
        </member>
        <member name="F:netDxf.Entities.AttributeFlags.Constant">
            <summary>
            This is a constant attribute.
            </summary>
        </member>
        <member name="F:netDxf.Entities.AttributeFlags.Verify">
            <summary>
            Verification is required on input of this attribute.
            </summary>
        </member>
        <member name="F:netDxf.Entities.AttributeFlags.Predefined">
            <summary>
            Attribute is preset (no prompt during insertion).
            </summary>
        </member>
        <member name="T:netDxf.Entities.Circle">
            <summary>
            Represents a circle <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Circle.#ctor">
            <summary>
            Initializes a new instance of the <c>Circle</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Circle.#ctor(netDxf.Vector3,System.Double)">
            <summary>
            Initializes a new instance of the <c>Circle</c> class.
            </summary>
            <param name="center">Circle <see cref="T:netDxf.Vector3">center</see> in world coordinates.</param>
            <param name="radius">Circle radius.</param>
        </member>
        <member name="M:netDxf.Entities.Circle.#ctor(netDxf.Vector2,System.Double)">
            <summary>
            Initializes a new instance of the <c>Circle</c> class.
            </summary>
            <param name="center">Circle <see cref="T:netDxf.Vector2">center</see> in world coordinates.</param>
            <param name="radius">Circle radius.</param>
        </member>
        <member name="P:netDxf.Entities.Circle.Center">
            <summary>
            Gets or sets the circle <see cref="T:netDxf.Vector3">center</see> in world coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Circle.Radius">
            <summary>
            Gets or set the circle radius.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Circle.Thickness">
            <summary>
            Gets or sets the circle thickness.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Circle.PolygonalVertexes(System.Int32)">
            <summary>
            Converts the circle in a list of vertexes.
            </summary>
            <param name="precision">Number of vertexes generated.</param>
            <returns>A list vertexes that represents the circle expressed in object coordinate system.</returns>
        </member>
        <member name="M:netDxf.Entities.Circle.ToPolyline2D(System.Int32)">
            <summary>
            Converts the circle in a Polyline2D.
            </summary>
            <param name="precision">Number of vertexes generated.</param>
            <returns>A new instance of <see cref="T:netDxf.Entities.Polyline2D">Polyline2D</see> that represents the circle.</returns>
        </member>
        <member name="M:netDxf.Entities.Circle.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>
            Non-uniform scaling is not supported, create an ellipse from the circle data and transform that instead.<br />
            Matrix3 adopts the convention of using column vectors to represent a transformation matrix.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Circle.Clone">
            <summary>
            Creates a new Circle that is a copy of the current instance.
            </summary>
            <returns>A new Circle that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.DatumReferenceValue">
            <summary>
            Represents datum reference, a theoretically exact point, axis, or plane from which you make measurements and verify dimensions. 
            </summary>
        </member>
        <member name="M:netDxf.Entities.DatumReferenceValue.#ctor">
            <summary>
            Initializes a new instance of the <c>DatumReferenceValue</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.DatumReferenceValue.#ctor(System.String,netDxf.Entities.ToleranceMaterialCondition)">
            <summary>
            Initializes a new instance of the <c>DatumReferenceValue</c> class.
            </summary>
            <param name="value">Datum reference value.</param>
            <param name="materialCondition">Datum material condition.</param>
        </member>
        <member name="P:netDxf.Entities.DatumReferenceValue.Value">
            <summary>
            Gets or sets the datum value.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DatumReferenceValue.MaterialCondition">
            <summary>
            Gets or sets the datum material condition. 
            </summary>
        </member>
        <member name="M:netDxf.Entities.DatumReferenceValue.Clone">
            <summary>
            Creates a new DatumReferenceValue that is a copy of the current instance.
            </summary>
            <returns>A new DatumReferenceValue that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.DiametricDimension">
            <summary>
            Represents a diametric dimension <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.DiametricDimension.#ctor">
            <summary>
            Initializes a new instance of the <c>DiametricDimension</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.DiametricDimension.#ctor(netDxf.Entities.Arc,System.Double)">
            <summary>
            Initializes a new instance of the <c>DiametricDimension</c> class.
            </summary>
            <param name="arc"><see cref="T:netDxf.Entities.Arc">Arc</see> to measure.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <remarks>The center point and the definition point define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.DiametricDimension.#ctor(netDxf.Entities.Arc,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>DiametricDimension</c> class.
            </summary>
            <param name="arc"><see cref="T:netDxf.Entities.Arc">Arc</see> to measure.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The center point and the definition point define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.DiametricDimension.#ctor(netDxf.Entities.Circle,System.Double)">
            <summary>
            Initializes a new instance of the <c>DiametricDimension</c> class.
            </summary>
            <param name="circle"><see cref="T:netDxf.Entities.Circle">Circle</see> to measure.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <remarks>The center point and the definition point define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.DiametricDimension.#ctor(netDxf.Entities.Circle,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>DiametricDimension</c> class.
            </summary>
            <param name="circle"><see cref="T:netDxf.Entities.Circle">Circle</see> to measure.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The center point and the definition point define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.DiametricDimension.#ctor(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>DiametricDimension</c> class.
            </summary>
            <param name="centerPoint">Center <see cref="T:netDxf.Vector2">point</see> of the circumference.</param>
            <param name="referencePoint"><see cref="T:netDxf.Vector2">Point</see> on circle or arc.</param>
            <remarks>The center point and the definition point define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.DiametricDimension.#ctor(netDxf.Vector2,netDxf.Vector2,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>DiametricDimension</c> class.
            </summary>
            <param name="centerPoint">Center <see cref="T:netDxf.Vector2">point</see> of the circumference.</param>
            <param name="referencePoint"><see cref="T:netDxf.Vector2">Point</see> on circle or arc.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The center point and the definition point define the distance to be measure.</remarks>
        </member>
        <member name="P:netDxf.Entities.DiametricDimension.CenterPoint">
            <summary>
            Gets or sets the center <see cref="T:netDxf.Vector2">point</see> of the circumference in OCS (object coordinate system).
            </summary>
        </member>
        <member name="P:netDxf.Entities.DiametricDimension.ReferencePoint">
            <summary>
            Gets or sets the <see cref="T:netDxf.Vector2">point</see> on circumference or arc in OCS (object coordinate system).
            </summary>
        </member>
        <member name="P:netDxf.Entities.DiametricDimension.Measurement">
            <summary>
            Actual measurement.
            </summary>
        </member>
        <member name="M:netDxf.Entities.DiametricDimension.SetDimensionLinePosition(netDxf.Vector2)">
            <summary>
            Calculates the reference point and dimension offset from a point along the dimension line.
            </summary>
            <param name="point">Point along the dimension line.</param>
        </member>
        <member name="M:netDxf.Entities.DiametricDimension.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>
            Non-uniform and zero scaling local to the dimension entity are not supported.<br />
            The transformation will not be applied if the resulting center and reference points are the same.<br />
            Matrix3 adopts the convention of using column vectors to represent a transformation matrix.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.DiametricDimension.CalculateReferencePoints">
            <summary>
            Calculate the dimension reference points.
            </summary>
        </member>
        <member name="M:netDxf.Entities.DiametricDimension.BuildBlock(System.String)">
            <summary>
            Gets the block that contains the entities that make up the dimension picture.
            </summary>
            <param name="name">Name to be assigned to the generated block.</param>
            <returns>The block that represents the actual dimension.</returns>
        </member>
        <member name="M:netDxf.Entities.DiametricDimension.Clone">
            <summary>
            Creates a new DiametricDimension that is a copy of the current instance.
            </summary>
            <returns>A new DiametricDimension that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.Dimension">
            <summary>
            Represents the base class for a dimension <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
            <reamarks>
            Once a dimension is added to the DXF document, its properties should not be modified or the changes will not be reflected in the saved DXF file.
            </reamarks>
        </member>
        <member name="M:netDxf.Entities.Dimension.#ctor(netDxf.Entities.DimensionType)">
            <summary>
            Initializes a new instance of the <c>Dimension</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Dimension.DefinitionPoint">
            <summary>
            Gets the reference <see cref="T:netDxf.Vector2">position</see> for the dimension line in local coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Dimension.TextPositionManuallySet">
            <summary>
            Gets or sets if the text reference point has been set by the user. Set to false to reset the dimension text to its original position.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Dimension.TextReferencePoint">
            <summary>
            Gets or sets the text reference <see cref="T:netDxf.Vector2">position</see>, the middle point of dimension text in local coordinates.
            </summary>
            <remarks>
            This value is related to the style property <c>FitTextMove</c>.
            If the style FitTextMove is set to BesidesDimLine the text reference point will take precedence over the offset value to place the dimension line.
            In case of Ordinate dimensions if the text has been manually set the text position will take precedence over the EndLeaderPoint only if FitTextMove
            has been set to OverDimLineWithoutLeader.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Dimension.Style">
            <summary>
            Gets or sets the style associated with the dimension.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Dimension.StyleOverrides">
            <summary>
            Gets the dimension style overrides list.
            </summary>
            <remarks>Any dimension style value stored in this list will override its corresponding value in the assigned style to the dimension.</remarks>
        </member>
        <member name="P:netDxf.Entities.Dimension.DimensionType">
            <summary>
            Gets the dimension type.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Dimension.Measurement">
            <summary>
            Gets the actual measurement.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Dimension.AttachmentPoint">
            <summary>
            Gets or sets the dimension text attachment point.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Dimension.LineSpacingStyle">
            <summary>
            Get or sets the dimension text <see cref="T:netDxf.Entities.MTextLineSpacingStyle">line spacing style</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Dimension.LineSpacingFactor">
            <summary>
            Gets or sets the dimension text line spacing factor.
            </summary>
            <remarks>
            Percentage of default line spacing to be applied. Valid values range from 0.25 to 4.00, the default value 1.0.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Dimension.Block">
            <summary>
            Gets the block that contains the entities that make up the dimension picture.
            </summary>
            <remarks>
            Set this value to null to force the program that reads the resulting DXF file to generate the dimension drawing block,
            some programs do not even care about this block and will always generate their own dimension drawings.<br />
            You can even use your own dimension drawing setting this value with the resulting block.
            The assigned block name is irrelevant, it will be automatically modified to accommodate the naming conventions of the blocks for dimension (*D#).<br />
            The block will be overwritten when adding the dimension to a <see cref="T:netDxf.DxfDocument">DxfDocument</see> if <c>BuildDimensionBlocks</c> is set to true.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Dimension.TextRotation">
            <summary>
            Gets or sets the rotation angle in degrees of the dimension text away from its default orientation(the direction of the dimension line).
            </summary>
        </member>
        <member name="P:netDxf.Entities.Dimension.UserText">
            <summary>
            Gets or sets the dimension text explicitly.
            </summary>
            <remarks>
            Dimension text explicitly entered by the user. Optional; default is the measurement.
            If null or "&lt;&gt;", the dimension measurement is drawn as the text,
            if " " (one blank space), the text is suppressed. Anything else is drawn as the text.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Dimension.Elevation">
            <summary>
            Gets or sets the dimension elevation, its position along its normal.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Dimension.CalculateReferencePoints">
            <summary>
            Calculate the dimension reference points.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Dimension.BuildBlock(System.String)">
            <summary>
            Gets the block that contains the entities that make up the dimension picture.
            </summary>
            <param name="name">Name to be assigned to the generated block.</param>
            <returns> The block that represents the actual dimension.</returns>
        </member>
        <member name="M:netDxf.Entities.Dimension.Update">
            <summary>
            Updates the internal data of the dimension and if needed it rebuilds the block definition of the actual dimension.
            </summary>
            <remarks>
            This method needs to be manually called to reflect any change made to the dimension properties (geometry and/or style).
            </remarks>
        </member>
        <member name="T:netDxf.Entities.DimensionArrowhead">
            <summary>
            Predefined shapes for dimension style arrowheads.
            </summary>
            <remarks>
            Arrowhead block names and its representation.<br/>
            "" = closed filled<br/>
            "_DOT" = dot<br/>
            "_DOTSMALL" = dot small<br/>
            "_DOTBLANK" = dot blank<br/>
            "_ORIGIN" = origin indicator<br/>
            "_ORIGIN2" = origin indicator 2<br/>
            "_OPEN" = open<br/>
            "_OPEN90" = open 90 (right angle)<br/>
            "_OPEN30" = open 30<br/>
            "_CLOSED" = closed<br/>
            "_SMALL" = dot small blank<br/>
            "_NONE" = none<br/>
            "_OBLIQUE" = oblique<br/>
            "_BOXFILLED" = box filled<br/>
            "_BOXBLANK" = box<br/>
            "_CLOSEDBLANK" = closed blank<br/>
            "_DATUMFILLED" = datum triangle filled<br/>
            "_DATUMBLANK" = datum triangle<br/>
            "_INTEGRAL" = integral<br/>
            "_ARCHTICK" = architectural tick<br/>
            </remarks>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.Dot">
            <summary>
            Dot arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.DotSmall">
            <summary>
            Small dot arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.DotBlank">
            <summary>
            Blank dot arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.OriginIndicator">
            <summary>
            Origin indicator arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.OriginIndicator2">
            <summary>
            Origin indicator 2 arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.Open">
            <summary>
            Open arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.Open90">
            <summary>
            Open 90 degree arrowhead (right angle arrowhead).
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.Open30">
            <summary>
            Open 30 degree angle arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.Closed">
            <summary>
            Closed arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.DotSmallBlank">
            <summary>
            Small blank dot arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.None">
            <summary>
            Empty arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.Oblique">
            <summary>
            Oblique arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.BoxFilled">
            <summary>
            Filled box arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.Box">
            <summary>
            Box arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.ClosedBlank">
            <summary>
            Blank closed arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.DatumTriangleFilled">
            <summary>
            Filled datum triangle arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.DatumTriangle">
            <summary>
            Datum triangle arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.Integral">
            <summary>
            Integral symbol arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.ArchitecturalTick">
            <summary>
            Architectural tick arrowhead.
            </summary>
        </member>
        <member name="T:netDxf.Entities.DimensionBlock">
            <summary>
            Holds methods to build the dimension blocks.
            </summary>
        </member>
        <member name="M:netDxf.Entities.DimensionBlock.Build(netDxf.Entities.Dimension)">
            <summary>
            Creates a block that represents the drawing of the specified dimension.
            </summary>
            <param name="dim"><see cref="T:netDxf.Entities.Dimension">Dimension</see> from which the block will be created.</param>
            <returns>A block that represents the specified dimension.</returns>
            <remarks>
            By the fault the block will have the name "DimBlock". The block's name is irrelevant when the dimension belongs to a document,
            it will be automatically renamed to accommodate to the nomenclature of the DXF.<br />
            The dimension block creation only supports a limited number of <see cref="T:netDxf.Tables.DimensionStyle">dimension style</see> properties.
            Also the list of <see cref="T:netDxf.Tables.DimensionStyleOverride">dimension style overrides</see> associated with the specified dimension will be applied where necessary.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.DimensionBlock.Build(netDxf.Entities.Dimension,System.String)">
            <summary>
            Creates a block that represents the drawing of the specified dimension.
            </summary>
            <param name="dim"><see cref="T:netDxf.Entities.Dimension">Dimension</see> from which the block will be created.</param>
            <param name="name">The blocks name.</param>
            <returns>A block that represents the specified dimension.</returns>
            <remarks>
            The block's name is irrelevant when the dimension belongs to a document,
            it will be automatically renamed to accommodate to the nomenclature of the DXF.<br />
            The dimension block creation only supports a limited number of <see cref="T:netDxf.Tables.DimensionStyle">dimension style</see> properties.
            Also the list of <see cref="T:netDxf.Tables.DimensionStyleOverride">dimension style overrides</see> associated with the specified dimension will be applied where necessary.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.DimensionBlock.Build(netDxf.Entities.AlignedDimension,System.String)">
            <summary>
            Creates a block that represents the drawing of the specified dimension.
            </summary>
            <param name="dim"><see cref="T:netDxf.Entities.AlignedDimension">AlignedDimension</see> from which the block will be created.</param>
            <param name="name">The blocks name.</param>
            <returns>A block that represents the specified dimension.</returns>
            <remarks>
            The block's name is irrelevant when the dimension belongs to a document,
            it will be automatically renamed to accommodate to the nomenclature of the DXF.<br />
            The dimension block creation only supports a limited number of <see cref="T:netDxf.Tables.DimensionStyle">dimension style</see> properties.
            Also the list of <see cref="T:netDxf.Tables.DimensionStyleOverride">dimension style overrides</see> associated with the specified dimension will be applied where necessary.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.DimensionBlock.Build(netDxf.Entities.LinearDimension,System.String)">
            <summary>
            Creates a block that represents the drawing of the specified dimension.
            </summary>
            <param name="dim"><see cref="T:netDxf.Entities.LinearDimension">LinearDimension</see> from which the block will be created.</param>
            <param name="name">The blocks name.</param>
            <returns>A block that represents the specified dimension.</returns>
            <remarks>
            The block's name is irrelevant when the dimension belongs to a document,
            it will be automatically renamed to accommodate to the nomenclature of the DXF.<br />
            The dimension block creation only supports a limited number of <see cref="T:netDxf.Tables.DimensionStyle">dimension style</see> properties.
            Also the list of <see cref="T:netDxf.Tables.DimensionStyleOverride">dimension style overrides</see> associated with the specified dimension will be applied where necessary.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.DimensionBlock.Build(netDxf.Entities.Angular2LineDimension,System.String)">
            <summary>
            Creates a block that represents the drawing of the specified dimension.
            </summary>
            <param name="dim"><see cref="T:netDxf.Entities.Angular2LineDimension">Angular2LineDimension</see> from which the block will be created.</param>
            <param name="name">The blocks name.</param>
            <returns>A block that represents the specified dimension.</returns>
            <remarks>
            The block's name is irrelevant when the dimension belongs to a document,
            it will be automatically renamed to accommodate to the nomenclature of the DXF.<br />
            The dimension block creation only supports a limited number of <see cref="T:netDxf.Tables.DimensionStyle">dimension style</see> properties.
            Also the list of <see cref="T:netDxf.Tables.DimensionStyleOverride">dimension style overrides</see> associated with the specified dimension will be applied where necessary.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.DimensionBlock.Build(netDxf.Entities.Angular3PointDimension,System.String)">
            <summary>
            Creates a block that represents the drawing of the specified dimension.
            </summary>
            <param name="dim"><see cref="T:netDxf.Entities.Angular3PointDimension">Angular3PointDimension</see> from which the block will be created.</param>
            <param name="name">The blocks name.</param>
            <returns>A block that represents the specified dimension.</returns>
            <remarks>
            The block's name is irrelevant when the dimension belongs to a document,
            it will be automatically renamed to accommodate to the nomenclature of the DXF.<br />
            The dimension block creation only supports a limited number of <see cref="T:netDxf.Tables.DimensionStyle">dimension style</see> properties.
            Also the list of <see cref="T:netDxf.Tables.DimensionStyleOverride">dimension style overrides</see> associated with the specified dimension will be applied where necessary.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.DimensionBlock.Build(netDxf.Entities.DiametricDimension,System.String)">
            <summary>
            Creates a block that represents the drawing of the specified dimension.
            </summary>
            <param name="dim"><see cref="T:netDxf.Entities.DiametricDimension">DiametricDimension</see> from which the block will be created.</param>
            <param name="name">The blocks name.</param>
            <returns>A block that represents the specified dimension.</returns>
            <remarks>
            The block's name is irrelevant when the dimension belongs to a document,
            it will be automatically renamed to accommodate to the nomenclature of the DXF.<br />
            The dimension block creation only supports a limited number of <see cref="T:netDxf.Tables.DimensionStyle">dimension style</see> properties.
            Also the list of <see cref="T:netDxf.Tables.DimensionStyleOverride">dimension style overrides</see> associated with the specified dimension will be applied where necessary.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.DimensionBlock.Build(netDxf.Entities.RadialDimension,System.String)">
            <summary>
            Creates a block that represents the drawing of the specified dimension.
            </summary>
            <param name="dim"><see cref="T:netDxf.Entities.RadialDimension">RadialDimension</see> from which the block will be created.</param>
            <param name="name">The blocks name.</param>
            <returns>A block that represents the specified dimension.</returns>
            <remarks>
            The block's name is irrelevant when the dimension belongs to a document,
            it will be automatically renamed to accommodate to the nomenclature of the DXF.<br />
            The dimension block creation only supports a limited number of <see cref="T:netDxf.Tables.DimensionStyle">dimension style</see> properties.
            Also the list of <see cref="T:netDxf.Tables.DimensionStyleOverride">dimension style overrides</see> associated with the specified dimension will be applied where necessary.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.DimensionBlock.Build(netDxf.Entities.OrdinateDimension,System.String)">
            <summary>
            Creates a block that represents the drawing of the specified dimension.
            </summary>
            <param name="dim"><see cref="T:netDxf.Entities.OrdinateDimension">OrdinateDimension</see> from which the block will be created.</param>
            <param name="name">The blocks name.</param>
            <returns>A block that represents the specified dimension.</returns>
            <remarks>
            The block's name is irrelevant when the dimension belongs to a document,
            it will be automatically renamed to accommodate to the nomenclature of the DXF.<br />
            The dimension block creation only supports a limited number of <see cref="T:netDxf.Tables.DimensionStyle">dimension style</see> properties.
            Also the list of <see cref="T:netDxf.Tables.DimensionStyleOverride">dimension style overrides</see> associated with the specified dimension will be applied where necessary.
            </remarks>
        </member>
        <member name="T:netDxf.Entities.DimensionType">
            <summary>
            Dimension type.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionType.Linear">
            <summary>
            Rotated, horizontal, or vertical.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionType.Aligned">
            <summary>
            Aligned.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionType.Angular">
            <summary>
            Angular 2 lines.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionType.Diameter">
            <summary>
            Diameter.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionType.Radius">
            <summary>
            Radius.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionType.Angular3Point">
            <summary>
            Angular 3 points.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionType.Ordinate">
            <summary>
            Ordinate.
            </summary>
        </member>
        <member name="T:netDxf.Entities.DimensionTypeFlags">
            <summary>
            Dimension type.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionTypeFlags.Linear">
            <summary>
            Rotated, horizontal, or vertical.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionTypeFlags.Aligned">
            <summary>
            Aligned.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionTypeFlags.Angular">
            <summary>
            Angular 2 lines.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionTypeFlags.Diameter">
            <summary>
            Diameter.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionTypeFlags.Radius">
            <summary>
            Radius.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionTypeFlags.Angular3Point">
            <summary>
            Angular 3 points.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionTypeFlags.Ordinate">
            <summary>
            Ordinate.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionTypeFlags.BlockReference">
            <summary>
            Indicates that the block reference (group code 2) is referenced by this dimension only.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionTypeFlags.OrdinateType">
            <summary>
            Ordinate type. This is a bit value (bit 7) used only with integer value 6. If set, ordinate is X-type; if not set, ordinate is Y-type.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionTypeFlags.UserTextPosition">
            <summary>
            This is a bit value (bit 8) added to the other group 70 values if the dimension text has been positioned at a user-defined location rather than at the default location.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Ellipse">
            <summary>
            Represents an ellipse <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Ellipse.#ctor">
            <summary>
            Initializes a new instance of the <c>Ellipse</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Ellipse.#ctor(netDxf.Vector2,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>Ellipse</c> class.
            </summary>
            <param name="center">Ellipse <see cref="T:netDxf.Vector2">center</see> in object coordinates.</param>
            <param name="majorAxis">Ellipse major axis.</param>
            <param name="minorAxis">Ellipse minor axis.</param>
            <remarks>The center Z coordinate represents the elevation of the arc along the normal.</remarks>
        </member>
        <member name="M:netDxf.Entities.Ellipse.#ctor(netDxf.Vector3,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>Ellipse</c> class.
            </summary>
            <param name="center">Ellipse <see cref="T:netDxf.Vector3">center</see> in object coordinates.</param>
            <param name="majorAxis">Ellipse major axis.</param>
            <param name="minorAxis">Ellipse minor axis.</param>
            <remarks>The center Z coordinate represents the elevation of the arc along the normal.</remarks>
        </member>
        <member name="P:netDxf.Entities.Ellipse.Center">
            <summary>
            Gets or sets the ellipse <see cref="T:netDxf.Vector3">center</see> in world coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Ellipse.MajorAxis">
            <summary>
            Gets or sets the ellipse mayor axis.
            </summary>
            <remarks>The MajorAxis value must be positive and greater than the MinorAxis.</remarks>
        </member>
        <member name="P:netDxf.Entities.Ellipse.MinorAxis">
            <summary>
            Gets or sets the ellipse minor axis.
            </summary>
            <remarks>The MinorAxis value must be positive and smaller than the MajorAxis.</remarks>
        </member>
        <member name="P:netDxf.Entities.Ellipse.Rotation">
            <summary>
            Gets or sets the ellipse local rotation in degrees along its normal.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Ellipse.StartAngle">
            <summary>
            Gets or sets the ellipse start angle in degrees.
            </summary>
            <remarks>To get a full ellipse set the start angle equal to the end angle.</remarks>
        </member>
        <member name="P:netDxf.Entities.Ellipse.EndAngle">
            <summary>
            Gets or sets the ellipse end angle in degrees.
            </summary>
            <remarks>To get a full ellipse set the end angle equal to the start angle.</remarks>
        </member>
        <member name="P:netDxf.Entities.Ellipse.Thickness">
            <summary>
            Gets or sets the ellipse thickness.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Ellipse.IsFullEllipse">
            <summary>
            Checks if the actual instance is a full ellipse.
            </summary>
            <remarks>An ellipse is considered full when its start and end angles are equal.</remarks>
        </member>
        <member name="M:netDxf.Entities.Ellipse.SetAxis(System.Double,System.Double)">
            <summary>
            Sets the ellipse major and minor axis.
            </summary>
            <param name="major">Ellipse major axis.</param>
            <param name="minor">Ellipse minor axis.</param>
        </member>
        <member name="M:netDxf.Entities.Ellipse.PolarCoordinateRelativeToCenter(System.Double)">
            <summary>
            Calculate the local point on the ellipse for a given angle relative to the center.
            </summary>
            <param name="angle">Angle in degrees.</param>
            <returns>A local point on the ellipse for the given angle relative to the center.</returns>
        </member>
        <member name="M:netDxf.Entities.Ellipse.PolygonalVertexes(System.Int32)">
            <summary>
            Converts the ellipse in a list of vertexes.
            </summary>
            <param name="precision">Number of vertexes generated.</param>
            <returns>A list vertexes that represents the ellipse expressed in object coordinate system.</returns>
        </member>
        <member name="M:netDxf.Entities.Ellipse.ToPolyline2D(System.Int32)">
            <summary>
            Converts the ellipse in a Polyline2D.
            </summary>
            <param name="precision">Number of vertexes generated.</param>
            <returns>A new instance of <see cref="T:netDxf.Entities.Polyline2D">Polyline2D</see> that represents the ellipse.</returns>
        </member>
        <member name="M:netDxf.Entities.Ellipse.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.Ellipse.Clone">
            <summary>
            Creates a new Ellipse that is a copy of the current instance.
            </summary>
            <returns>A new Ellipse that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.EndSequence">
            <summary>
            Represents the terminator element of a vertex sequence in polylines or attributes in a block reference.
            </summary>
        </member>
        <member name="M:netDxf.Entities.EndSequence.#ctor">
            <summary>
            Initializes a new instance of the <c>EndSequence</c> class.
            </summary>
        </member>
        <member name="T:netDxf.Entities.EntityChangeEventArgs">
            <summary>
            Represents the arguments thrown when the reference of an entity is added ore removed from another entity.
            </summary>
        </member>
        <member name="M:netDxf.Entities.EntityChangeEventArgs.#ctor(netDxf.Entities.EntityObject)">
            <summary>
            Initializes a new instance of <c>EntityChangeEventArgs</c>.
            </summary>
            <param name="item">The entity that is being added or removed from another entity.</param>
        </member>
        <member name="P:netDxf.Entities.EntityChangeEventArgs.Item">
            <summary>
            Gets the entity that is being added or removed.
            </summary>
        </member>
        <member name="T:netDxf.Entities.EntityObject">
            <summary>
            Represents a generic entity.
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.Reactors">
            <summary>
            Gets the list of DXF objects that has been attached to this entity.
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.Type">
            <summary>
            Gets the entity <see cref="T:netDxf.Entities.EntityType">type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.Color">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.AciColor">color</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.Layer">
            <summary>
            Gets or sets the entity <see cref="P:netDxf.Entities.EntityObject.Layer">layer</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.Linetype">
            <summary>
            Gets or sets the entity <see cref="P:netDxf.Entities.EntityObject.Linetype">line type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.Lineweight">
            <summary>
            Gets or sets the entity <see cref="P:netDxf.Entities.EntityObject.Lineweight">line weight</see>, one unit is always 1/100 mm (default = ByLayer).
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.Transparency">
            <summary>
            Gets or sets layer <see cref="P:netDxf.Entities.EntityObject.Transparency">transparency</see> (default: ByLayer).
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.LinetypeScale">
            <summary>
            Gets or sets the entity line type scale.
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.IsVisible">
            <summary>
            Gets or set the entity visibility.
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.Normal">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Vector3">normal</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.Owner">
            <summary>
            Gets the owner of the actual DXF object.
            </summary>
        </member>
        <member name="M:netDxf.Entities.EntityObject.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.EntityObject.TransformBy(netDxf.Matrix4)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 4x4 transformation matrix.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <remarks>Matrix4 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.EntityObject.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:netDxf.Entities.EntityObject.Clone">
            <summary>
            Creates a new entity that is a copy of the current instance.
            </summary>
            <returns>A new entity that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.EntityType">
            <summary>
            Defines the entity type.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Arc">
            <summary>
            Arc entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Circle">
            <summary>
            Circle entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Dimension">
            <summary>
            Dimension entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Ellipse">
            <summary>
            Ellipse entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Face3D">
            <summary>
            3d face entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Hatch">
            <summary>
            Hatch entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Image">
            <summary>
            A raster image entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Insert">
            <summary>
            Block insertion entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Leader">
            <summary>
            Leader entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Line">
            <summary>
            Line entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Mesh">
            <summary>
            Mesh entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.MLine">
            <summary>
            Multiline entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.MText">
            <summary>
            Multiline text string entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Point">
            <summary>
            Point entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.PolyfaceMesh">
            <summary>
            Polyface mesh entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.PolygonMesh">
            <summary>
            Polygon mesh entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Polyline2D">
            <summary>
            Polyline2D entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Polyline3D">
            <summary>
            Polyline3D entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Ray">
            <summary>
            Ray entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Shape">
            <summary>
            Shape entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Solid">
            <summary>
            Solid entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Spline">
            <summary>
            Spline (nonuniform rational B-splines NURBS).
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Text">
            <summary>
            Text string entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Tolerance">
            <summary>
            Tolerance entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Trace">
            <summary>
            Trace entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Underlay">
            <summary>
            Underlay entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Viewport">
            <summary>
            Viewport entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Wipeout">
            <summary>
            Wipeout entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.XLine">
            <summary>
            XLine entity.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Face3D">
            <summary>
            Represents a 3d Face <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Face3D.#ctor">
            <summary>
            Initializes a new instance of the <c>Face3D</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Face3D.#ctor(netDxf.Vector2,netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>Face3D</c> class.
            </summary>
            <param name="firstVertex">Face3D <see cref="T:netDxf.Vector2">first vertex</see>.</param>
            <param name="secondVertex">Face3D <see cref="T:netDxf.Vector2">second vertex</see>.</param>
            <param name="thirdVertex">Face3D <see cref="T:netDxf.Vector2">third vertex</see>.</param>
        </member>
        <member name="M:netDxf.Entities.Face3D.#ctor(netDxf.Vector2,netDxf.Vector2,netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>Face3D</c> class.
            </summary>
            <param name="firstVertex">Face3D <see cref="T:netDxf.Vector2">first vertex</see>.</param>
            <param name="secondVertex">Face3D <see cref="T:netDxf.Vector2">second vertex</see>.</param>
            <param name="thirdVertex">Face3D <see cref="T:netDxf.Vector2">third vertex</see>.</param>
            <param name="fourthVertex">Face3D <see cref="T:netDxf.Vector2">fourth vertex</see>.</param>
        </member>
        <member name="M:netDxf.Entities.Face3D.#ctor(netDxf.Vector3,netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>Face3D</c> class.
            </summary>
            <param name="firstVertex">Face3D <see cref="T:netDxf.Vector3">first vertex</see>.</param>
            <param name="secondVertex">Face3D <see cref="T:netDxf.Vector3">second vertex</see>.</param>
            <param name="thirdVertex">Face3D <see cref="T:netDxf.Vector3">third vertex</see>.</param>
        </member>
        <member name="M:netDxf.Entities.Face3D.#ctor(netDxf.Vector3,netDxf.Vector3,netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>Face3D</c> class.
            </summary>
            <param name="firstVertex">Face3D <see cref="T:netDxf.Vector3">first vertex</see>.</param>
            <param name="secondVertex">Face3D <see cref="T:netDxf.Vector3">second vertex</see>.</param>
            <param name="thirdVertex">Face3D <see cref="T:netDxf.Vector3">third vertex</see>.</param>
            <param name="fourthVertex">Face3D <see cref="T:netDxf.Vector3">fourth vertex</see>.</param>
        </member>
        <member name="P:netDxf.Entities.Face3D.FirstVertex">
            <summary>
            Gets or sets the first Face3D <see cref="T:netDxf.Vector3">vertex</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Face3D.SecondVertex">
            <summary>
            Gets or sets the second Face3D <see cref="T:netDxf.Vector3">vertex</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Face3D.ThirdVertex">
            <summary>
            Gets or sets the third Face3D <see cref="T:netDxf.Vector3">vertex</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Face3D.FourthVertex">
            <summary>
            Gets or sets the fourth Face3D <see cref="T:netDxf.Vector3">vertex</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Face3D.EdgeFlags">
            <summary>
            Gets or sets the Face3D edge visibility.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Face3D.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.Face3D.Clone">
            <summary>
            Creates a new Face3D that is a copy of the current instance.
            </summary>
            <returns>A new Face3D that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.Face3DEdgeFlags">
            <summary>
            Defines the Face3D hidden edges.
            </summary>
        </member>
        <member name="F:netDxf.Entities.Face3DEdgeFlags.None">
            <summary>
            No flags equivalent to all edges are visible.
            </summary>
        </member>
        <member name="F:netDxf.Entities.Face3DEdgeFlags.First">
            <summary>
            First edge is invisible.
            </summary>
        </member>
        <member name="F:netDxf.Entities.Face3DEdgeFlags.Second">
            <summary>
            Second edge is invisible.
            </summary>
        </member>
        <member name="F:netDxf.Entities.Face3DEdgeFlags.Third">
            <summary>
            Third edge is invisible.
            </summary>
        </member>
        <member name="F:netDxf.Entities.Face3DEdgeFlags.Fourth">
            <summary>
            Fourth edge is invisible.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Hatch">
            <summary>
            Represents a hatch <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Hatch.#ctor(netDxf.Entities.HatchPattern,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>Hatch</c> class.
            </summary>
            <remarks>
            This constructor is initialized with an empty list of boundary paths, remember a hatch without boundaries will be discarded when saving the file.<br/>
            When creating an associative hatch do not add the entities that make the boundary to the document, it will be done automatically. Doing so will throw an exception.<br/>
            The hatch boundary paths must be on the same plane as the hatch.
            The normal and the elevation of the boundary paths will be omitted (the hatch elevation and normal will be used instead).
            Only the x and y coordinates for the center of the line, ellipse, circle and arc will be used.
            </remarks>
            <param name="pattern"><see cref="T:netDxf.Entities.HatchPattern">Hatch pattern</see>.</param>
            <param name="associative">Defines if the hatch is associative or not.</param>
        </member>
        <member name="M:netDxf.Entities.Hatch.#ctor(netDxf.Entities.HatchPattern,System.Collections.Generic.IEnumerable{netDxf.Entities.HatchBoundaryPath},System.Boolean)">
            <summary>
            Initializes a new instance of the <c>Hatch</c> class.
            </summary>
            <remarks>
            The hatch boundary paths must be on the same plane as the hatch.
            The normal and the elevation of the boundary paths will be omitted (the hatch elevation and normal will be used instead).
            Only the x and y coordinates for the center of the line, ellipse, circle and arc will be used.
            </remarks>
            <param name="pattern"><see cref="T:netDxf.Entities.HatchPattern">Hatch pattern</see>.</param>
            <param name="paths">A list of <see cref="T:netDxf.Entities.HatchBoundaryPath">boundary paths</see>.</param>
            <param name="associative">Defines if the hatch is associative or not.</param>
        </member>
        <member name="P:netDxf.Entities.Hatch.Pattern">
            <summary>
            Gets the hatch pattern.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Hatch.BoundaryPaths">
            <summary>
            Gets the hatch boundary paths.
            </summary>
            <remarks>
            The hatch must contain at least on valid boundary path to be able to add it to the DxfDocument, otherwise it will be rejected.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Hatch.Associative">
            <summary>
            Gets if the hatch is associative or not, which means if the hatch object is associated with the hatch boundary entities.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Hatch.Elevation">
            <summary>
            Gets or sets the hatch elevation, its position along its normal.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Hatch.UnLinkBoundary">
            <summary>
            Unlinks the boundary from the hatch, turning the associative property to false.
            </summary>
            <returns>The list of unlinked entities from the boundary of the hatch.</returns>
            <remarks>The entities that make the hatch boundaries will not be deleted from the document if they already belong to one.</remarks>
        </member>
        <member name="M:netDxf.Entities.Hatch.CreateBoundary(System.Boolean)">
            <summary>
            Creates a list of entities that represents the boundary of the hatch and optionally associates to it.
            </summary>
            <param name="linkBoundary">Indicates if the new boundary will be associated with the hatch, turning the associative property to true.</param>
            <returns>A list of entities that makes the boundary of the hatch.</returns>
            <remarks>
            If the actual hatch is already associative, the old boundary entities will be unlinked, but not deleted from the hatch document.
            If linkBoundary is true, the new boundary entities will be added to the same layout and document as the hatch, in case it belongs to one,
            so, in this case, if you also try to add the return list to the document it will cause an error.<br/>
            All entities are in world coordinates except the Polyline2D boundary path since by definition its vertexes are expressed in object coordinates.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Hatch.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.Hatch.Clone">
            <summary>
            Creates a new Hatch that is a copy of the current instance.
            </summary>
            <returns>A new Hatch that is a copy of this instance.</returns>
            <remarks>
            If the hatch is associative the referenced boundary entities will not be automatically cloned, its associative property will be set to false.
            Use CreateBoundary if required after cloning.
            </remarks>
        </member>
        <member name="T:netDxf.Entities.HatchBoundaryPath">
            <summary>
            Represent a loop of a <see cref="T:netDxf.Entities.Hatch">hatch</see> boundaries.
            </summary>
            <remarks>
            The entities that make a loop can be any combination of lines, light weight polylines, polylines, circles, arcs, ellipses, and splines.<br />
            The entities that define a loop should define a closed path, they have to be on the same plane as the hatch, and with the same normal;
            if these conditions are not met the result might be unpredictable. <br />
            Entities expressed in 3d coordinates like lines, polylines, and splines will be projected into its local plane.
            All edges that make a HatchBoundaryPath are 2d objects, only have X and Y coordinates.
            This is why to avoid unexpected results, it is important that all entities that define the paths have the same normal, same reference plane.
            </remarks>
        </member>
        <member name="T:netDxf.Entities.HatchBoundaryPath.EdgeType">
            <summary>
            Specifies the type of HatchBoundaryPath.Edge.
            </summary>
        </member>
        <member name="T:netDxf.Entities.HatchBoundaryPath.Edge">
            <summary>
            Base class for all types of HatchBoundaryPath edges.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Edge.Type">
            <summary>
            Gets the HatchBoundaryPath edge type
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Edge.ConvertTo">
            <summary>
            Converts the actual edge to its entity equivalent.
            </summary>
            <returns>An EntityObject equivalent to the actual edge.</returns>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Edge.Clone">
            <summary>
            Clones the actual edge.
            </summary>
            <returns>A copy of the actual edge.</returns>
        </member>
        <member name="T:netDxf.Entities.HatchBoundaryPath.Polyline">
            <summary>
            Represents a polyline edge of a HatchBoundaryPath.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Polyline.Vertexes">
            <summary>
            Gets or sets the list of polyline vertexes.
            </summary>
            <remarks>
            The position of the vertex is defined by the X and Y coordinates, the Z value represents the bulge at that vertex.
            </remarks>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Polyline.IsClosed">
            <summary>
            Gets if the polyline is closed.
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Polyline.#ctor">
            <summary>
            Initializes a new instance of the <c>HatchBoundaryPath.Polyline</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Polyline.#ctor(netDxf.Entities.EntityObject)">
            <summary>
            Initializes a new instance of the <c>HatchBoundaryPath.Polyline</c> class.
            </summary>
            <param name="entity"><see cref="T:netDxf.Entities.EntityObject">Entity</see> that represents the edge.</param>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Polyline.ConvertFrom(netDxf.Entities.EntityObject)">
            <summary>
            Initializes a new instance of the <c>HatchBoundaryPath.Polyline</c> class.
            </summary>
            <param name="entity"><see cref="T:netDxf.Entities.EntityObject">Entity</see> that represents the edge.</param>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Polyline.ConvertTo">
            <summary>
            Converts the actual edge to its entity equivalent.
            </summary>
            <returns>An <see cref="T:netDxf.Entities.EntityObject">entity</see> equivalent to the actual edge.</returns>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Polyline.Clone">
            <summary>
            Clones the actual edge.
            </summary>
            <returns>A copy of the actual edge.</returns>
        </member>
        <member name="T:netDxf.Entities.HatchBoundaryPath.Line">
            <summary>
            Represents a line edge of a HatchBoundaryPath.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Line.Start">
            <summary>
            Gets or sets the start point of the line.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Line.End">
            <summary>
            Gets or sets the end point of the line.
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Line.#ctor">
            <summary>
            Initializes a new instance of the <c>HatchBoundaryPath.Line</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Line.#ctor(netDxf.Entities.EntityObject)">
            <summary>
            Initializes a new instance of the <c>HatchBoundaryPath.Line</c> class.
            </summary>
            <param name="entity"><see cref="T:netDxf.Entities.EntityObject">Entity</see> that represents the edge.</param>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Line.ConvertFrom(netDxf.Entities.EntityObject)">
            <summary>
            Creates a BoundaryBoundaryPath from an <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
            <param name="entity">An <see cref="T:netDxf.Entities.EntityObject">entity</see>.</param>
            <returns>A HatchBoundaryPath line.</returns>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Line.ConvertTo">
            <summary>
            Converts the actual edge to its entity equivalent.
            </summary>
            <returns>An <see cref="T:netDxf.Entities.EntityObject">entity</see> equivalent to the actual edge.</returns>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Line.Clone">
            <summary>
            Clones the actual edge.
            </summary>
            <returns>A copy of the actual edge.</returns>
        </member>
        <member name="T:netDxf.Entities.HatchBoundaryPath.Arc">
            <summary>
            Represents an arc edge of a HatchBoundaryPath.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Arc.Center">
            <summary>
            Gets or set the center of the arc.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Arc.Radius">
            <summary>
            Gets or sets the radius of the arc.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Arc.StartAngle">
            <summary>
            Gets or sets the start angle of the arc.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Arc.EndAngle">
            <summary>
            Gets or sets the end angle of the arc.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Arc.IsCounterclockwise">
            <summary>
            Gets or sets if the arc is counter clockwise.
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Arc.#ctor">
            <summary>
            Initializes a new instance of the <c>HatchBoundaryPath.Arc</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Arc.#ctor(netDxf.Entities.EntityObject)">
            <summary>
            Initializes a new instance of the <c>HatchBoundaryPath.Arc</c> class.
            </summary>
            <param name="entity"><see cref="T:netDxf.Entities.EntityObject">Entity</see> that represents the edge.</param>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Arc.ConvertFrom(netDxf.Entities.EntityObject)">
            <summary>
            Initializes a new instance of the <c>HatchBoundaryPath.Arc</c> class.
            </summary>
            <param name="entity"><see cref="T:netDxf.Entities.EntityObject">Entity</see> that represents the edge.</param>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Arc.ConvertTo">
            <summary>
            Converts the actual edge to its entity equivalent.
            </summary>
            <returns>An <see cref="T:netDxf.Entities.EntityObject">entity</see> equivalent to the actual edge.</returns>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Arc.Clone">
            <summary>
            Clones the actual edge.
            </summary>
            <returns>A copy of the actual edge.</returns>
        </member>
        <member name="T:netDxf.Entities.HatchBoundaryPath.Ellipse">
            <summary>
            Represents a ellipse edge of a HatchBoundaryPath.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Ellipse.Center">
            <summary>
            Gets or sets the center of the ellipse.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Ellipse.EndMajorAxis">
            <summary>
            Gets or sets the position of the end of the major axis.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Ellipse.MinorRatio">
            <summary>
            Gets or sets the scale of the minor axis in respect of the major axis.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Ellipse.StartAngle">
            <summary>
            Gets or sets the start angle of the ellipse.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Ellipse.EndAngle">
            <summary>
            Gets or sets the end angle of the ellipse.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Ellipse.IsCounterclockwise">
            <summary>
            Gets or sets if the ellipse is counter clockwise.
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Ellipse.#ctor">
            <summary>
            Initializes a new instance of the <c>HatchBoundaryPath.Ellipse</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Ellipse.#ctor(netDxf.Entities.EntityObject)">
            <summary>
            Initializes a new instance of the <c>HatchBoundaryPath.Ellipse</c> class.
            </summary>
            <param name="entity"><see cref="T:netDxf.Entities.EntityObject">Entity</see> that represents the edge.</param>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Ellipse.ConvertFrom(netDxf.Entities.EntityObject)">
            <summary>
            Initializes a new instance of the <c>HatchBoundaryPath.Ellipse</c> class.
            </summary>
            <param name="entity"><see cref="T:netDxf.Entities.EntityObject">Entity</see> that represents the edge.</param>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Ellipse.ConvertTo">
            <summary>
            Converts the actual edge to its entity equivalent.
            </summary>
            <returns>An <see cref="T:netDxf.Entities.EntityObject">entity</see> equivalent to the actual edge.</returns>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Ellipse.Clone">
            <summary>
            Clones the actual edge.
            </summary>
            <returns>A copy of the actual edge.</returns>
        </member>
        <member name="T:netDxf.Entities.HatchBoundaryPath.Spline">
            <summary>
            Represents a spline edge of a HatchBoundaryPath.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Spline.Degree">
            <summary>
            Gets or sets the degree of the spline
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Spline.IsRational">
            <summary>
            Gets or sets if the spline is rational.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Spline.IsPeriodic">
            <summary>
            Gets or sets if the spline is periodic.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Spline.Knots">
            <summary>
            Gets or sets the list of knots of the spline.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Spline.ControlPoints">
            <summary>
            Gets or sets the list of control points of the spline.
            </summary>
            <remarks>
            The position of the control point is defined by the X and Y coordinates, the Z value represents its weight.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Spline.#ctor">
            <summary>
            Initializes a new instance of the <c>HatchBoundaryPath.Spline</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Spline.#ctor(netDxf.Entities.EntityObject)">
            <summary>
            Initializes a new instance of the <c>HatchBoundaryPath.Spline</c> class.
            </summary>
            <param name="entity"><see cref="T:netDxf.Entities.EntityObject">Entity</see> that represents the edge.</param>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Spline.ConvertFrom(netDxf.Entities.EntityObject)">
            <summary>
            Initializes a new instance of the <c>HatchBoundaryPath.Spline</c> class.
            </summary>
            <param name="entity"><see cref="T:netDxf.Entities.EntityObject">Entity</see> that represents the edge.</param>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Spline.ConvertTo">
            <summary>
            Converts the actual edge to its entity equivalent.
            </summary>
            <returns>An <see cref="T:netDxf.Entities.EntityObject">entity</see> equivalent to the actual edge.</returns>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Spline.Clone">
            <summary>
            Clones the actual edge.
            </summary>
            <returns>A copy of the actual edge.</returns>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.#ctor(System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject})">
            <summary>
            Initializes a new instance of the <c>Hatch</c> class.
            </summary>
            <param name="edges">List of entities that makes a loop for the hatch boundary paths.</param>
        </member>
        <member name="P:netDxf.Entities.HatchBoundaryPath.Edges">
            <summary>
            Gets the list of edges that makes a loop for the hatch boundary path.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchBoundaryPath.PathType">
            <summary>
            Gets the boundary path type flag.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchBoundaryPath.Entities">
            <summary>
            Gets the list of entities that makes the boundary.
            </summary>
            <remarks>If the boundary path belongs to a non-associative hatch this list will contain zero entities.</remarks>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Update">
            <summary>
            Updates the internal HatchBoundaryPath data. 
            </summary>
            <remarks>
            It is necessary to manually call this method when changes to the boundary entities are made. This is only applicable to associative hatches,
            non-associative hatches has no associated boundary entities.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Clone">
            <summary>
            Creates a new HatchBoundaryPath that is a copy of the current instance.
            </summary>
            <returns>A new HatchBoundaryPath that is a copy of this instance.</returns>
            <remarks>When cloning a HatchBoundaryPath, if it has entities that defines its contour, they will not be cloned.</remarks>
        </member>
        <member name="T:netDxf.Entities.HatchBoundaryPathTypeFlags">
            <summary>
            Defines the boundary path type of the hatch.
            </summary>
            <remarks>Bit flag.</remarks>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPathTypeFlags.Default">
            <summary>
            Default.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPathTypeFlags.External">
            <summary>
            External.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPathTypeFlags.Polyline">
            <summary>
            Polyline.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPathTypeFlags.Derived">
            <summary>
            Derived.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPathTypeFlags.Textbox">
            <summary>
            Text box.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPathTypeFlags.Outermost">
            <summary>
            Outermost.
            </summary>
        </member>
        <member name="T:netDxf.Entities.HatchFillType">
            <summary>
            Hatch pattern fill type.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchFillType.PatternFill">
            <summary>
            Pattern fill.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchFillType.SolidFill">
            <summary>
            Solid fill.
            </summary>
        </member>
        <member name="T:netDxf.Entities.HatchGradientPattern">
            <summary>
            Represents the hatch gradient pattern style.
            </summary>
            <remarks>
            Gradient patterns are only supported by AutoCad2004 and higher DXF versions. It will default to a solid pattern if saved as AutoCad2000.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.HatchGradientPattern.#ctor">
            <summary>
            Initializes a new instance of the <c>HatchGradientPattern</c> class as a default linear gradient. 
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchGradientPattern.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>HatchGradientPattern</c> class as a default linear gradient. 
            </summary>
            <param name="description">Description of the pattern (optional, this information is not saved in the DXF file). By default it will use the supplied name.</param>
        </member>
        <member name="M:netDxf.Entities.HatchGradientPattern.#ctor(netDxf.AciColor,System.Double,netDxf.Entities.HatchGradientPatternType)">
            <summary>
            Initializes a new instance of the <c>HatchGradientPattern</c> class as a single color gradient. 
            </summary>
            <param name="color">Gradient <see cref="T:netDxf.AciColor">color</see>.</param>
            <param name="tint">Gradient tint.</param>
            <param name="type">Gradient <see cref="T:netDxf.Entities.HatchGradientPatternType">type</see>.</param>
        </member>
        <member name="M:netDxf.Entities.HatchGradientPattern.#ctor(netDxf.AciColor,System.Double,netDxf.Entities.HatchGradientPatternType,System.String)">
            <summary>
            Initializes a new instance of the <c>HatchGradientPattern</c> class as a single color gradient. 
            </summary>
            <param name="color">Gradient <see cref="T:netDxf.AciColor">color</see>.</param>
            <param name="tint">Gradient tint.</param>
            <param name="type">Gradient <see cref="T:netDxf.Entities.HatchGradientPatternType">type</see>.</param>
            <param name="description">Description of the pattern (optional, this information is not saved in the DXF file). By default it will use the supplied name.</param>
        </member>
        <member name="M:netDxf.Entities.HatchGradientPattern.#ctor(netDxf.AciColor,netDxf.AciColor,netDxf.Entities.HatchGradientPatternType)">
            <summary>
            Initializes a new instance of the <c>HatchGradientPattern</c> class as a two color gradient. 
            </summary>
            <param name="color1">Gradient <see cref="T:netDxf.AciColor">color</see> 1.</param>
            <param name="color2">Gradient <see cref="T:netDxf.AciColor">color</see> 2.</param>
            <param name="type">Gradient <see cref="T:netDxf.Entities.HatchGradientPatternType">type</see>.</param>
        </member>
        <member name="M:netDxf.Entities.HatchGradientPattern.#ctor(netDxf.AciColor,netDxf.AciColor,netDxf.Entities.HatchGradientPatternType,System.String)">
            <summary>
            Initializes a new instance of the <c>HatchGradientPattern</c> class as a two color gradient. 
            </summary>
            <param name="color1">Gradient <see cref="T:netDxf.AciColor">color</see> 1.</param>
            <param name="color2">Gradient <see cref="T:netDxf.AciColor">color</see> 2.</param>
            <param name="type">Gradient <see cref="T:netDxf.Entities.HatchGradientPatternType">type</see>.</param>
            <param name="description">Description of the pattern (optional, this information is not saved in the DXF file). By default it will use the supplied name.</param>
        </member>
        <member name="P:netDxf.Entities.HatchGradientPattern.GradientType">
            <summary>
            Gets or set the gradient pattern <see cref="T:netDxf.Entities.HatchGradientPatternType">type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchGradientPattern.Color1">
            <summary>
            Gets or sets the gradient <see cref="T:netDxf.AciColor">color</see> 1.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchGradientPattern.Color2">
            <summary>
            Gets or sets the gradient <see cref="T:netDxf.AciColor">color</see> 2.
            </summary>
            <remarks>
            If color 2 is defined, automatically the single color property will be set to false.  
            </remarks>
        </member>
        <member name="P:netDxf.Entities.HatchGradientPattern.SingleColor">
            <summary>
            Gets or sets the gradient pattern color type.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchGradientPattern.Tint">
            <summary>
            Gets or sets the gradient pattern tint.
            </summary>
            <remarks>It only applies to single color gradient patterns.</remarks>
        </member>
        <member name="P:netDxf.Entities.HatchGradientPattern.Centered">
            <summary>
            Gets or sets if the pattern is centered or not.
            </summary>
            <remarks>
            Each gradient has two definitions, shifted and unsifted. A shift value describes the blend of the two definitions that should be used.
            A value of 0.0 (false) means only the unsifted version should be used, and a value of 1.0 (true) means that only the shifted version should be used.
            </remarks>
        </member>
        <member name="T:netDxf.Entities.HatchGradientPatternType">
            <summary>
            Gradient pattern types.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchGradientPatternType.Linear">
            <summary>
            Linear.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchGradientPatternType.Cylinder">
            <summary>
            Cylinder.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchGradientPatternType.InvCylinder">
            <summary>
            Inverse cylinder.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchGradientPatternType.Spherical">
            <summary>
            Spherical.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchGradientPatternType.InvSpherical">
            <summary>
            Inverse spherical.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchGradientPatternType.Hemispherical">
            <summary>
            Hemispherical.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchGradientPatternType.InvHemispherical">
            <summary>
            Inverse hemispherical.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchGradientPatternType.Curved">
            <summary>
            Curved.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchGradientPatternType.InvCurved">
            <summary>
            Inverse curved.
            </summary>
        </member>
        <member name="T:netDxf.Entities.HatchPattern">
            <summary>
            Represents a <see cref="T:netDxf.Entities.Hatch">hatch</see> pattern style.
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchPattern.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>HatchPattern</c> class.
            </summary>
            <param name="name">Pattern name, always stored as uppercase.</param>
        </member>
        <member name="M:netDxf.Entities.HatchPattern.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>HatchPattern</c> class.
            </summary>
            <param name="name">Pattern name, always stored as uppercase.</param>
            <param name="description">Description of the pattern (optional, this information is not saved in the DXF file). By default it will use the supplied name.</param>
        </member>
        <member name="M:netDxf.Entities.HatchPattern.#ctor(System.String,System.Collections.Generic.IEnumerable{netDxf.Entities.HatchPatternLineDefinition})">
            <summary>
            Initializes a new instance of the <c>HatchPattern</c> class.
            </summary>
            <param name="name">Pattern name, always stored as uppercase.</param>
            <param name="lineDefinitions">The definition of the lines that make up the pattern (not applicable in Solid fills).</param>
        </member>
        <member name="M:netDxf.Entities.HatchPattern.#ctor(System.String,System.Collections.Generic.IEnumerable{netDxf.Entities.HatchPatternLineDefinition},System.String)">
            <summary>
            Initializes a new instance of the <c>HatchPattern</c> class.
            </summary>
            <param name="name">Pattern name, always stored as uppercase.</param>
            <param name="lineDefinitions">The definition of the lines that make up the pattern (not applicable in Solid fills).</param>
            <param name="description">Description of the pattern (optional, this information is not saved in the DXF file). By default it will use the supplied name.</param>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Solid">
            <summary>
            Solid hatch pattern.
            </summary>
            <remarks>The predefined pattern values are based on the acad.pat file of AutoCAD.</remarks>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Line">
            <summary>
            Lines hatch pattern.
            </summary>
            <remarks>The predefined pattern values are based on the acad.pat file of AutoCAD.</remarks>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Net">
            <summary>
            Net or squares hatch pattern.
            </summary>
            <remarks>The predefined pattern values are based on the acad.pat file of AutoCAD.</remarks>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Dots">
            <summary>
            Dots hatch pattern.
            </summary>
            <remarks>The predefined pattern values are based on the acad.pat file of AutoCAD.</remarks>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Name">
            <summary>
            Gets or sets the hatch pattern name.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Description">
            <summary>
            Gets or sets the hatch description (optional, this information is not saved in the DXF file).
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Style">
            <summary>
            Gets the hatch style.
            </summary>
            <remarks>Only normal style is implemented.</remarks>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Type">
            <summary>
            Gets or sets the hatch pattern type.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Fill">
            <summary>
            Gets the solid fill flag.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Origin">
            <summary>
            Gets or sets the pattern origin.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Angle">
            <summary>
            Gets or sets the pattern angle in degrees.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Scale">
            <summary>
            Gets or sets the pattern scale (not applicable in Solid fills).
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.LineDefinitions">
            <summary>
            Gets the definition of the lines that make up the pattern (not applicable in Solid fills).
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchPattern.NamesFromFile(System.String)">
            <summary>
            Gets the list of hatch pattern names defined in a PAT file.
            </summary>
            <param name="file">Hatch pattern definitions file.</param>
            <returns>List of hatch pattern names contained in the specified PAT file.</returns>
        </member>
        <member name="M:netDxf.Entities.HatchPattern.Load(System.String,System.String)">
            <summary>
            Creates a new hatch pattern from the definition in a PAT file.
            </summary>
            <param name="file">PAT file where the definition is located.</param>
            <param name="patternName">Name of the pattern definition that wants to be read (ignore case).</param>
            <returns>A Hatch pattern as defined in the PAT file.</returns>
        </member>
        <member name="M:netDxf.Entities.HatchPattern.Save(System.String)">
            <summary>
            Saves the current linetype to the specified file, if the file does not exist it creates a new one.
            </summary>
            <param name="file">File where the current linetype will be saved.</param>
        </member>
        <member name="T:netDxf.Entities.HatchPatternLineDefinition">
            <summary>
            Defines a single line thats is part of a <see cref="T:netDxf.Entities.HatchPattern">hatch pattern</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchPatternLineDefinition.#ctor">
            <summary>
            Initializes a new instance of the <c>HatchPatternLineDefinition</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPatternLineDefinition.Angle">
            <summary>
            Gets or sets the angle of the line.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPatternLineDefinition.Origin">
            <summary>
            Gets or sets the origin of the line.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPatternLineDefinition.Delta">
            <summary>
            Gets or sets the local displacements between lines of the same family.
            </summary>
            <remarks>
            The Delta.X value indicates the displacement between members of the family in the direction of the line. It is used only for dashed lines.
            The Delta.Y value indicates the spacing between members of the family; that is, it is measured perpendicular to the lines. 
            </remarks>
        </member>
        <member name="P:netDxf.Entities.HatchPatternLineDefinition.DashPattern">
            <summary>
            Gets he dash pattern of the line it is equivalent as the segments of a <see cref="T:netDxf.Tables.Linetype">Linetype</see>.
            </summary>
            <remarks>
            Positive values means solid segments and negative values means spaces (one entry per element).
            </remarks>
        </member>
        <member name="M:netDxf.Entities.HatchPatternLineDefinition.Clone">
            <summary>
            Creates a new HatchPatternLineDefinition that is a copy of the current instance.
            </summary>
            <returns>A new HatchPatternLineDefinition that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.HatchStyle">
            <summary>
            Hatch pattern style.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchStyle.Normal">
            <summary>
            Hatch "odd parity" area.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchStyle.Outer">
            <summary>
            Hatch outermost area only.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchStyle.Ignore">
            <summary>
            Hatch through entire area.
            </summary>
        </member>
        <member name="T:netDxf.Entities.HatchType">
            <summary>
            Hatch pattern type.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchType.UserDefined">
            <summary>
            User defined.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchType.Predefined">
            <summary>
            Predefined.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchType.Custom">
            <summary>
            Custom.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Image">
            <summary>
            Represents a raster image <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Image.#ctor(netDxf.Objects.ImageDefinition,netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>Image</c> class.
            </summary>
            <param name="imageDefinition">Image definition.</param>
            <param name="position">Image <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="size">Image <see cref="T:netDxf.Vector2">size</see> in world coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.Image.#ctor(netDxf.Objects.ImageDefinition,netDxf.Vector3,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>Image</c> class.
            </summary>
            <param name="imageDefinition">Image definition.</param>
            <param name="position">Image <see cref="T:netDxf.Vector3">position</see> in world coordinates.</param>
            <param name="size">Image <see cref="T:netDxf.Vector2">size</see> in world coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.Image.#ctor(netDxf.Objects.ImageDefinition,netDxf.Vector2,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>Image</c> class.
            </summary>
            <param name="imageDefinition">Image definition.</param>
            <param name="position">Image <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="width">Image width in world coordinates.</param>
            <param name="height">Image height in world coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.Image.#ctor(netDxf.Objects.ImageDefinition,netDxf.Vector3,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>Image</c> class.
            </summary>
            <param name="imageDefinition">Image definition.</param>
            <param name="position">Image <see cref="T:netDxf.Vector3">position</see> in world coordinates.</param>
            <param name="width">Image width in world coordinates.</param>
            <param name="height">Image height in world coordinates.</param>
        </member>
        <member name="P:netDxf.Entities.Image.Position">
            <summary>
            Gets or sets the image <see cref="T:netDxf.Vector3">position</see> in world coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Image.Uvector">
            <summary>
            Gets or sets the image <see cref="T:netDxf.Vector2">U-vector</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Image.Vvector">
            <summary>
            Gets or sets the image <see cref="T:netDxf.Vector2">V-vector</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Image.Height">
            <summary>
            Gets or sets the height of the image in drawing units.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Image.Width">
            <summary>
            Gets or sets the width of the image in drawing units.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Image.Rotation">
            <summary>
            Gets or sets the image rotation in degrees.
            </summary>
            <remarks>The image rotation is the angle of the U-vector.</remarks>
        </member>
        <member name="P:netDxf.Entities.Image.Definition">
            <summary>
            Gets the <see cref="T:netDxf.Objects.ImageDefinition">image definition</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Image.Clipping">
            <summary>
            Gets or sets the clipping state: false = off, true = on.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Image.Brightness">
            <summary>
            Gets or sets the brightness value (0-100; default = 50)
            </summary>
        </member>
        <member name="P:netDxf.Entities.Image.Contrast">
            <summary>
            Gets or sets the contrast value (0-100; default = 50)
            </summary>
        </member>
        <member name="P:netDxf.Entities.Image.Fade">
            <summary>
            Gets or sets the fade value (0-100; default = 0)
            </summary>
        </member>
        <member name="P:netDxf.Entities.Image.DisplayOptions">
            <summary>
            Gets or sets the image display options.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Image.ClippingBoundary">
            <summary>
            Gets or sets the image clipping boundary.
            </summary>
            <remarks>
            The vertexes coordinates of the clipping boundary are expressed in local coordinates of the image in pixels.
            Set as null to restore the default clipping boundary, full image.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Image.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.Image.Clone">
            <summary>
            Creates a new Image that is a copy of the current instance.
            </summary>
            <returns>A new Image that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.ImageDisplayFlags">
            <summary>
            Image display options.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ImageDisplayFlags.ShowImage">
            <summary>
            Show image.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ImageDisplayFlags.ShowImageWhenNotAlignedWithScreen">
            <summary>
            Show image when not aligned with screen.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ImageDisplayFlags.UseClippingBoundary">
            <summary>
            Use clipping boundary.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ImageDisplayFlags.TransparencyOn">
            <summary>
            Transparency on.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Insert">
            <summary>
            Represents a block insertion <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Insert.#ctor(netDxf.Blocks.Block)">
            <summary>
            Initializes a new instance of the <c>Insert</c> class.
            </summary>
            <param name="block">Insert <see cref="P:netDxf.Entities.Insert.Block">block definition</see>.</param>
        </member>
        <member name="M:netDxf.Entities.Insert.#ctor(netDxf.Blocks.Block,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>Insert</c> class.
            </summary>
            <param name="block">Insert block definition.</param>
            <param name="position">Insert <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.Insert.#ctor(netDxf.Blocks.Block,netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>Insert</c> class.
            </summary>
            <param name="block">Insert block definition.</param>
            <param name="position">Insert <see cref="T:netDxf.Vector3">point</see> in world coordinates.</param>
        </member>
        <member name="P:netDxf.Entities.Insert.DefaultInsUnits">
            <summary>
            Gets or sets the default drawing units to obtain the Insert transformation matrix, when the current Insert entity does not belong to a DXF document.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Insert.Attributes">
            <summary>
            Gets the insert list of <see cref="T:netDxf.Entities.Attribute">attributes</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Insert.Block">
            <summary>
            Gets the insert <see cref="P:netDxf.Entities.Insert.Block">block definition</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Insert.Position">
            <summary>
            Gets or sets the <see cref="T:netDxf.Vector3">position</see> in world coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Insert.Scale">
            <summary>
            Gets or sets the insert <see cref="T:netDxf.Vector3">scale</see>.
            </summary>
            <remarks>None of the vector scale components can be zero.</remarks>
        </member>
        <member name="P:netDxf.Entities.Insert.Rotation">
            <summary>
            Gets or sets the insert rotation along the normal vector in degrees.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Insert.Sync">
            <summary>
            Updates the attribute list of the actual insert with the attribute definition list of the referenced block. This does not affect any value assigned to the Value property.
            </summary>
            <remarks>
            This method will automatically call the TransformAttributes method, to keep all attributes position and orientation up to date.<br />
            This method will does not change the values assigned to attributes in the actual insert, besides the ones modified by the TransformAttributes() method;
            position, normal, rotation, text height, width factor, oblique angle, is backwards, is upside down, and alignment values.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Insert.GetTransformation">
            <summary>
            Gets the insert transformation matrix.
            </summary>
            <returns>The insert transformation matrix.</returns>
            <remarks>
            This method uses the DefaultInsUnits defined by the Insert class to obtain the scale between the drawing and the block units.
            Additionally, if the insert belongs to a block the units to use are the ones defined in the BlockRecord,
            and if the insert belongs to a layout the units to use are the ones defined in the document drawing variable InsUnits.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Insert.GetTransformation(netDxf.Units.DrawingUnits)">
            <summary>
            Calculates the insertion rotation matrix.
            </summary>
            <param name="insertionUnits">The insertion units.</param>
            <returns>The insert transformation matrix.</returns>
        </member>
        <member name="M:netDxf.Entities.Insert.TransformAttributes">
            <summary>
            Recalculate the attributes position, normal, rotation, height, width, width factor, oblique angle, backwards, and upside down properties from the transformation state of the insertion.
            </summary>
            <remarks>
            Making changes to the insert position, rotation, normal, and/or scale;
            when changing the block origin and/or units; or even the document insertion units will require this method to be called manually.<br />
            The attributes position, normal, rotation, text height, width factor, and oblique angle values includes the transformations applied to the insertion,
            if required this method will calculate the proper values according to the ones defined by the attribute definition.<br />
            All the attribute values can be changed manually independently to its definition,
            but, usually, you will want them to be transformed with the insert based on the local values defined by the attribute definition.<br />
            This method only applies to attributes that have a definition, some DXF files might generate attributes that have no definition in the block.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Insert.Explode">
            <summary>
            Explodes the current insert.
            </summary>
            <returns>A list of entities.</returns>
        </member>
        <member name="M:netDxf.Entities.Insert.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>
            Matrix3 adopts the convention of using column vectors to represent a transformation matrix.<br />
            The transformation will also be applied to the insert attributes.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Insert.AssignHandle(System.Int64)">
            <summary>
            Assigns a handle to the object based in a integer counter.
            </summary>
            <param name="entityNumber">Number to assign.</param>
            <returns>Next available entity number.</returns>
            <remarks>
            Some objects might consume more than one, is, for example, the case of polylines that will assign
            automatically a handle to its vertexes. The entity number will be converted to an hexadecimal number.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Insert.Clone">
            <summary>
            Creates a new Insert that is a copy of the current instance.
            </summary>
            <returns>A new Insert that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.Leader">
            <summary>
            Represents a leader <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Leader.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector2})">
            <summary>
            Initializes a new instance of the <c>Leader</c> class.
            </summary>
            <param name="vertexes">List of leader vertexes in local coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.Leader.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector2},netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>Leader</c> class.
            </summary>
            <param name="vertexes">List of leader vertexes in local coordinates.</param>
            <param name="style">Leader style.</param>
        </member>
        <member name="M:netDxf.Entities.Leader.#ctor(System.String,System.Collections.Generic.IEnumerable{netDxf.Vector2})">
            <summary>
            Initializes a new instance of the <c>Leader</c> class.
            </summary>
            <param name="text">Leader text annotation.</param>
            <param name="vertexes">List of leader vertexes in local coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.Leader.#ctor(System.String,System.Collections.Generic.IEnumerable{netDxf.Vector2},netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>Leader</c> class.
            </summary>
            <param name="text">Leader text annotation.</param>
            <param name="vertexes">List of leader vertexes in local coordinates.</param>
            <param name="style">Leader style.</param>
        </member>
        <member name="M:netDxf.Entities.Leader.#ctor(netDxf.Entities.ToleranceEntry,System.Collections.Generic.IEnumerable{netDxf.Vector2})">
            <summary>
            Initializes a new instance of the <c>Leader</c> class.
            </summary>
            <param name="tolerance">Leader tolerance annotation.</param>
            <param name="vertexes">List of leader vertexes in local coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.Leader.#ctor(netDxf.Entities.ToleranceEntry,System.Collections.Generic.IEnumerable{netDxf.Vector2},netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>Leader</c> class.
            </summary>
            <param name="tolerance">Leader tolerance annotation.</param>
            <param name="vertexes">List of leader vertexes in local coordinates.</param>
            <param name="style">Leader style.</param>
        </member>
        <member name="M:netDxf.Entities.Leader.#ctor(netDxf.Blocks.Block,System.Collections.Generic.IEnumerable{netDxf.Vector2})">
            <summary>
            Initializes a new instance of the <c>Leader</c> class.
            </summary>
            <param name="block">Leader block annotation.</param>
            <param name="vertexes">List of leader vertexes in local coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.Leader.#ctor(netDxf.Blocks.Block,System.Collections.Generic.IEnumerable{netDxf.Vector2},netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>Leader</c> class.
            </summary>
            <param name="block">Leader block annotation.</param>
            <param name="vertexes">List of leader vertexes in local coordinates.</param>
            <param name="style">Leader style.</param>
        </member>
        <member name="P:netDxf.Entities.Leader.Style">
            <summary>
            Gets or sets the leader style.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Leader.StyleOverrides">
            <summary>
            Gets the dimension style overrides list.
            </summary>
            <remarks>
            Any dimension style value stored in this list will override its corresponding value in the assigned style.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Leader.ShowArrowhead">
            <summary>
            Gets or sets if the arrowhead is drawn.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Leader.PathType">
            <summary>
            Gets or sets the way the leader is drawn.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Leader.Vertexes">
            <summary>
            Gets the leader vertexes list in local coordinates.
            </summary>
            <remarks>
            The leader vertexes list must have at least two points.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Leader.Annotation">
            <summary>
            Gets or sets the leader annotation entity.
            </summary>
            <remarks>
            Only MText, Text, Tolerance, and Insert entities are supported as a leader annotation.
            Even if AutoCad allows a Text entity to be part of a Leader it is not recommended, always use a MText entity instead.
            <br />
            Set the annotation property to null to create a Leader without annotation.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Leader.Hook">
            <summary>
            Gets or sets the leader hook position (last leader vertex).
            </summary>
            <remarks>
            This property allows easy access to the last leader vertex, aka leader hook position.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Leader.HasHookline">
            <summary>
            Gets if the leader has a hook line.
            </summary>
            <remarks>
            If set to true an additional vertex point (StartHookLine) will be created before the leader end point (hook).
            By default, only leaders with text annotation have hook lines.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Leader.LineColor">
            <summary>
            Gets or sets the leader line color if the style parameter DIMCLRD is set as BYBLOCK.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Leader.Normal">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Vector3">normal</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Leader.Elevation">
            <summary>
            Gets or sets the leader elevation.
            </summary>
            <remarks>This is the distance from the origin to the plane of the leader.</remarks>
        </member>
        <member name="P:netDxf.Entities.Leader.Offset">
            <summary>
            Gets or sets the offset from the last leader vertex (hook) to the annotation position.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Leader.Direction">
            <summary>
            Gets or sets the leader annotation direction.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Leader.Update(System.Boolean)">
            <summary>
            Updates the leader entity to reflect the latest changes made to its properties.
            </summary>
            <param name="resetAnnotationPosition">
            If true the annotation position will be modified according to the position of the leader hook (last leader vertex),
            otherwise the leader hook will be moved according to the actual annotation position.
            </param>
            <remarks>
            This method should be manually called if the annotation position is modified, or the leader properties like Style, Annotation, TextVerticalPosition, and/or Offset.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Leader.ResetHookPosition">
            <summary>
            Resets the leader hook position according to the annotation position.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Leader.ResetAnnotationPosition">
            <summary>
            Resets the annotation position according to the leader hook.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Leader.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.Leader.Clone">
            <summary>
            Creates a new Leader that is a copy of the current instance.
            </summary>
            <returns>A new Leader that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.LeaderPathType">
            <summary>
            Controls the way the leader is drawn.
            </summary>
        </member>
        <member name="F:netDxf.Entities.LeaderPathType.StraightLineSegments">
            <summary>
            Draws the leader line as a set of straight line segments.
            </summary>
        </member>
        <member name="F:netDxf.Entities.LeaderPathType.Spline">
            <summary>
            Draws the leader line as a spline.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Line">
            <summary>
            Represents a line <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Line.#ctor">
            <summary>
            Initializes a new instance of the <c>Line</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Line.#ctor(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>Line</c> class.
            </summary>
            <param name="startPoint">Line <see cref="T:netDxf.Vector2">start point.</see></param>
            <param name="endPoint">Line <see cref="T:netDxf.Vector2">end point.</see></param>
        </member>
        <member name="M:netDxf.Entities.Line.#ctor(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>Line</c> class.
            </summary>
            <param name="startPoint">Line start <see cref="T:netDxf.Vector3">point.</see></param>
            <param name="endPoint">Line end <see cref="T:netDxf.Vector3">point.</see></param>
        </member>
        <member name="P:netDxf.Entities.Line.StartPoint">
            <summary>
            Gets or sets the line <see cref="T:netDxf.Vector3">start point</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Line.EndPoint">
            <summary>
            Gets or sets the line <see cref="T:netDxf.Vector3">end point</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Line.Direction">
            <summary>
            Gets the direction of the line.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Line.Thickness">
            <summary>
            Gets or sets the line thickness.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Line.Reverse">
            <summary>
            Switch the line direction.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Line.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.Line.Clone">
            <summary>
            Creates a new Line that is a copy of the current instance.
            </summary>
            <returns>A new Line that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.LinearDimension">
            <summary>
            Represents a linear or rotated dimension <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.LinearDimension.#ctor">
            <summary>
            Initializes a new instance of the <c>LinearDimension</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.LinearDimension.#ctor(netDxf.Entities.Line,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>LinearDimension</c> class.
            </summary>
            <param name="referenceLine">Reference <see cref="T:netDxf.Entities.Line">line</see> of the dimension.</param>
            <param name="offset">Distance between the reference line and the dimension line.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <remarks>The reference points define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.LinearDimension.#ctor(netDxf.Entities.Line,System.Double,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>LinearDimension</c> class.
            </summary>
            <param name="referenceLine">Reference <see cref="T:netDxf.Entities.Line">line</see> of the dimension.</param>
            <param name="offset">Distance between the reference line and the dimension line.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The reference points define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.LinearDimension.#ctor(netDxf.Entities.Line,System.Double,System.Double,netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>LinearDimension</c> class.
            </summary>
            <param name="referenceLine">Reference <see cref="T:netDxf.Entities.Line">line</see> of the dimension.</param>
            <param name="offset">Distance between the reference line and the dimension line.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <param name="normal">Normal vector of the plane where the dimension is defined.</param>
            <remarks>The reference points define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.LinearDimension.#ctor(netDxf.Entities.Line,System.Double,System.Double,netDxf.Vector3,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>LinearDimension</c> class.
            </summary>
            <param name="referenceLine">Reference <see cref="T:netDxf.Entities.Line">line</see> of the dimension.</param>
            <param name="offset">Distance between the reference line and the dimension line.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <param name="normal">Normal vector of the plane where the dimension is defined.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The reference line define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.LinearDimension.#ctor(netDxf.Vector2,netDxf.Vector2,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>LinearDimension</c> class.
            </summary>
            <param name="firstPoint">First reference <see cref="T:netDxf.Vector2">point</see> of the dimension.</param>
            <param name="secondPoint">Second reference <see cref="T:netDxf.Vector2">point</see> of the dimension.</param>
            <param name="offset">Distance between the mid point reference line and the dimension line.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <remarks>The reference points define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.LinearDimension.#ctor(netDxf.Vector2,netDxf.Vector2,System.Double,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>LinearDimension</c> class.
            </summary>
            <param name="firstPoint">First reference <see cref="T:netDxf.Vector2">point</see> of the dimension.</param>
            <param name="secondPoint">Second reference <see cref="T:netDxf.Vector2">point</see> of the dimension.</param>
            <param name="offset">Distance between the mid point reference line and the dimension line.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The reference points define the distance to be measure.</remarks>
        </member>
        <member name="P:netDxf.Entities.LinearDimension.FirstReferencePoint">
            <summary>
            Gets or sets the first definition point of the dimension in OCS (object coordinate system).
            </summary>
        </member>
        <member name="P:netDxf.Entities.LinearDimension.SecondReferencePoint">
            <summary>
            Gets or sets the second definition point of the dimension in OCS (object coordinate system).
            </summary>
        </member>
        <member name="P:netDxf.Entities.LinearDimension.DimLinePosition">
            <summary>
            Gets the location of the dimension line.
            </summary>
        </member>
        <member name="P:netDxf.Entities.LinearDimension.Rotation">
            <summary>
            Gets or sets the rotation of the dimension line.
            </summary>
        </member>
        <member name="P:netDxf.Entities.LinearDimension.Offset">
            <summary>
            Gets or sets the distance between the mid point of the reference line and the dimension line.
            </summary>
            <remarks>
            The offset value must be equal or greater than zero.<br />
            The side at which the dimension line is drawn depends of its rotation.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.LinearDimension.Measurement">
            <summary>
            Gets the actual measurement.
            </summary>
            <remarks>The dimension is always measured in the plane defined by the normal.</remarks>
        </member>
        <member name="M:netDxf.Entities.LinearDimension.SetDimensionLinePosition(netDxf.Vector2)">
            <summary>
            Calculates the dimension offset from a point along the dimension line.
            </summary>
            <param name="point">Point along the dimension line.</param>
        </member>
        <member name="M:netDxf.Entities.LinearDimension.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
        </member>
        <member name="M:netDxf.Entities.LinearDimension.CalculateReferencePoints">
            <summary>
            Calculate the dimension reference points.
            </summary>
        </member>
        <member name="M:netDxf.Entities.LinearDimension.BuildBlock(System.String)">
            <summary>
            Gets the block that contains the entities that make up the dimension picture.
            </summary>
            <param name="name">Name to be assigned to the generated block.</param>
            <returns>The block that represents the actual dimension.</returns>
        </member>
        <member name="M:netDxf.Entities.LinearDimension.Clone">
            <summary>
            Creates a new LinearDimension that is a copy of the current instance.
            </summary>
            <returns>A new LinearDimension that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.Mesh">
            <summary>
            Represents a mesh <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
            <remarks>
            Use this entity to overcome the limitations of the PolyfaceMesh, but, keep in mind that this entity was first introduced in AutoCad 2010.<br/>
            The maximum number of faces a mesh can have is 16000000 (16 millions).
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Mesh.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector3},System.Collections.Generic.IEnumerable{System.Int32[]})">
            <summary>
            Initializes a new instance of the <c>Mesh</c> class.
            </summary>
            <param name="vertexes">Mesh vertex list.</param>
            <param name="faces">Mesh faces list.</param>
        </member>
        <member name="M:netDxf.Entities.Mesh.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector3},System.Collections.Generic.IEnumerable{System.Int32[]},System.Collections.Generic.IEnumerable{netDxf.Entities.MeshEdge})">
            <summary>
            Initializes a new instance of the <c>Mesh</c> class.
            </summary>
            <param name="vertexes">Mesh vertex list.</param>
            <param name="faces">Mesh faces list.</param>
            <param name="edges">Mesh edges list, this parameter is only really useful when it is required to assign creases values to edges.</param>
        </member>
        <member name="P:netDxf.Entities.Mesh.Vertexes">
            <summary>
            Gets the mesh vertexes list.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Mesh.Faces">
            <summary>
            Gets the mesh faces list.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Mesh.Edges">
            <summary>
            Gets the mesh edges list.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Mesh.SubdivisionLevel">
            <summary>
            Gets or sets the mesh subdivision level.
            </summary>
            <remarks>
            The valid range is from 0 to 255. The recommended range is 0-5 to prevent creating extremely dense meshes.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Mesh.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.Mesh.Clone">
            <summary>
            Creates a new Mesh that is a copy of the current instance.
            </summary>
            <returns>A new Mesh that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.MeshEdge">
            <summary>
            Represents an edge of a <see cref="T:netDxf.Entities.EntityObject">mesh</see> entity.
            </summary>
        </member>
        <member name="M:netDxf.Entities.MeshEdge.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <c>MeshEdge</c> class.
            </summary>
            <param name="startVertexIndex">The edge start vertex index.</param>
            <param name="endVertexIndex">The edge end vertex index.</param>
        </member>
        <member name="M:netDxf.Entities.MeshEdge.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <c>MeshEdge</c> class.
            </summary>
            <param name="startVertexIndex">The edge start vertex index.</param>
            <param name="endVertexIndex">The edge end vertex index.</param>
            <param name="crease">The highest smoothing level at which the crease is retained  (default: 0.0).</param>
        </member>
        <member name="P:netDxf.Entities.MeshEdge.StartVertexIndex">
            <summary>
            Gets or sets the edge start vertex index.
            </summary>
            <remarks>
            This value must be positive represent the position of the vertex in the mesh vertex list.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.MeshEdge.EndVertexIndex">
            <summary>
            Gets or sets the edge end vertex index.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MeshEdge.Crease">
            <summary>
            Get or set the highest smoothing level at which the crease is retained. If the smoothing level exceeds this value, the crease is also smoothed.
            </summary>
            <remarks>
            Enter a value of 0 to remove an existing crease (no edge sharpening).<br/>
            Enter a value of -1 (any negative number will be reset to -1) to specify that the crease is always retained, even if the object or sub-object is smoothed or refined.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.MeshEdge.ToString">
            <summary>
            Obtains a string that represents the mesh edge.
            </summary>
            <returns>A string text.</returns>
        </member>
        <member name="M:netDxf.Entities.MeshEdge.ToString(System.IFormatProvider)">
            <summary>
            Obtains a string that represents the mesh edge.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies culture-specific formatting information. </param>
            <returns>A string text.</returns>
        </member>
        <member name="M:netDxf.Entities.MeshEdge.Clone">
            <summary>
            Creates a new MeshEdge that is a copy of the current instance.
            </summary>
            <returns>A new MeshEdge that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.MLine">
            <summary>
            Represents a multiline <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.MLine.#ctor">
            <summary>
            Initializes a new instance of the <c>MLine</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.MLine.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector2})">
            <summary>
            Initializes a new instance of the <c>MLine</c> class.
            </summary>
            <param name="vertexes">Multiline <see cref="T:netDxf.Vector2">vertex</see> location list in object coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.MLine.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector2},System.Boolean)">
            <summary>
            Initializes a new instance of the <c>MLine</c> class.
            </summary>
            <param name="vertexes">Multiline <see cref="T:netDxf.Vector2">vertex</see> location list in object coordinates.</param>
            <param name="isClosed">Sets if the multiline is closed  (default: false).</param>
        </member>
        <member name="M:netDxf.Entities.MLine.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector2},System.Double)">
            <summary>
            Initializes a new instance of the <c>MLine</c> class.
            </summary>
            <param name="vertexes">Multiline <see cref="T:netDxf.Vector2">vertex</see> location list in object coordinates.</param>
            <param name="scale">Multiline scale.</param>
        </member>
        <member name="M:netDxf.Entities.MLine.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector2},System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>MLine</c> class.
            </summary>
            <param name="vertexes">Multiline <see cref="T:netDxf.Vector2">vertex</see> location list in object coordinates.</param>
            <param name="scale">Multiline scale.</param>
            <param name="isClosed">Sets if the multiline is closed  (default: false).</param>
        </member>
        <member name="M:netDxf.Entities.MLine.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector2},netDxf.Objects.MLineStyle,System.Double)">
            <summary>
            Initializes a new instance of the <c>MLine</c> class.
            </summary>
            <param name="vertexes">MLine <see cref="T:netDxf.Vector2">vertex</see> location list in object coordinates.</param>
            <param name="style">MLine <see cref="T:netDxf.Objects.MLineStyle">style.</see></param>
            <param name="scale">MLine scale.</param>
        </member>
        <member name="M:netDxf.Entities.MLine.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector2},netDxf.Objects.MLineStyle,System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>MLine</c> class.
            </summary>
            <param name="vertexes">MLine <see cref="T:netDxf.Vector2">vertex</see> location list in object coordinates.</param>
            <param name="style">MLine <see cref="T:netDxf.Objects.MLineStyle">style.</see></param>
            <param name="scale">MLine scale.</param>
            <param name="isClosed">Sets if the multiline is closed  (default: false).</param>
        </member>
        <member name="P:netDxf.Entities.MLine.Vertexes">
            <summary>
            Gets the multiline <see cref="T:netDxf.Entities.MLineVertex">vertexes</see> list.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MLine.Elevation">
            <summary>
            Gets or sets the multiline elevation.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MLine.Scale">
            <summary>
            Gets or sets the multiline scale.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MLine.IsClosed">
            <summary>
            Gets or sets if the multiline is closed.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MLine.NoStartCaps">
            <summary>
            Gets or sets the suppression of start caps.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MLine.NoEndCaps">
            <summary>
            Gets or sets the suppression of end caps.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MLine.Justification">
            <summary>
            Gets or sets the multiline justification.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MLine.Style">
            <summary>
            Gets or set the multiline style.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MLine.Flags">
            <summary>
            MLine flags.
            </summary>
        </member>
        <member name="M:netDxf.Entities.MLine.Update">
            <summary>
            Calculates the internal information of the multiline vertexes.
            </summary>
            <remarks>
            <para>
            This function needs to be called manually when any modification is done that affects the final shape of the multiline.
            </para>
            <para>
            If the vertex distance list needs to be edited to represent trimmed multilines this function needs to be called prior to any modification.
            It will calculate the minimum information needed to build a correct multiline.
            </para>
            </remarks>
        </member>
        <member name="M:netDxf.Entities.MLine.Explode">
            <summary>
            Decompose the actual multiline in its internal entities, <see cref="T:netDxf.Entities.Line">lines</see> and <see cref="T:netDxf.Entities.Arc">arcs</see>.
            </summary>
            <returns>A list of <see cref="T:netDxf.Entities.Line">lines</see> and <see cref="T:netDxf.Entities.Arc">arcs</see> that made up the multiline.</returns>
        </member>
        <member name="M:netDxf.Entities.MLine.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>
            Non-uniform scaling is not supported for multilines.
            Explode the entity and, in case round end caps has been applied, convert the arcs into ellipse arcs and transform them instead.<br />
            Matrix3 adopts the convention of using column vectors to represent a transformation matrix.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.MLine.Clone">
            <summary>
            Creates a new MLine that is a copy of the current instance.
            </summary>
            <returns>A new MLine that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.MLineFlags">
            <summary>
            Flags (bit-coded values).
            </summary>
        </member>
        <member name="F:netDxf.Entities.MLineFlags.Has">
            <summary>
            Has at least one vertex (code 72 is greater than 0).
            </summary>
        </member>
        <member name="F:netDxf.Entities.MLineFlags.Closed">
            <summary>
            Closed.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MLineFlags.NoStartCaps">
            <summary>
            Suppress start caps.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MLineFlags.NoEndCaps">
            <summary>
            Suppress end caps.
            </summary>
        </member>
        <member name="T:netDxf.Entities.MLineJustification">
            <summary>
            Justification.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MLineJustification.Top">
            <summary>
            Top.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MLineJustification.Zero">
            <summary>
            Zero.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MLineJustification.Bottom">
            <summary>
            Bottom.
            </summary>
        </member>
        <member name="T:netDxf.Entities.MLineVertex">
            <summary>
            Represents a <see cref="T:netDxf.Entities.MLine">multiline</see> vertex.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MLineVertex.Position">
            <summary>
            Gets the MLine vertex position.
            </summary>
            <remarks>
            If this property is modified the function MLine.CalculateVertexesInfo() will need to be called manually to update the internal information.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.MLineVertex.Direction">
            <summary>
            Gets the MLine vertex direction.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MLineVertex.Miter">
            <summary>
            Gets the MLine vertex miter.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MLineVertex.Distances">
            <summary>
            Gets the <see cref="T:netDxf.Entities.MLine">multiline</see> vertex distances lists.
            </summary>
            <remarks>
            <para>
            There is a list for every MLineStyle element, and every list contains an array of real values
            that parametrize the start and end point of every element of the style.
            </para>
            <para>
            The first value (index 0) represents the distance from the segment vertex along the miter vector to the
            point where the line element's path intersects the miter vector.<br />
            The second value (index 1) is the distance along the line element's direction from the point,
            defined by the first value, to the actual start of the line element.<br />
            The successive values list the start and stop points of the line element breaks or cuts in this segment of the multiline.
            </para>
            </remarks>
        </member>
        <member name="M:netDxf.Entities.MLineVertex.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:netDxf.Entities.MLineVertex.Clone">
            <summary>
            Creates a new MLineVertex that is a copy of the current instance.
            </summary>
            <returns>A new MLineVertex that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.MText">
            <summary>
            Represents a multiline text <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
            <remarks>
            Formatting codes for MText, you can use them directly while setting the text value or use the Write() and EndParagraph() methods.<br />
            \L Start underline<br />
            \l Stop underline<br />
            \O Start overstrike<br />
            \o Stop overstrike<br />
            \K Start strike-through<br />
            \k Stop strike-through<br />
            \P New paragraph (new line)<br />
            \pxi Control codes for bullets, numbered paragraphs and columns<br />
            \X Paragraph wrap on the dimension line (only in dimensions)<br />
            \Q Slanting (obliquing) text by angle - e.g. \Q30;<br />
            \H Text height - e.g. \H3x;<br />
            \W Text width - e.g. \W0.8x;<br />
            \F Font selection<br />
            <br />
            e.g. \Fgdt;o - GDT-tolerance<br />
            e.g. \Fkroeger|b0|i0|c238|p10; - font Kroeger, non-bold, non-italic, code page 238, pitch 10<br />
            <br />
            \S Stacking, fractions<br />
            <br />
            e.g. \SA^B;<br />
            A<br />
            B<br />
            e.g. \SX/Y<br />
            X<br />
            -<br />
            Y<br />
            e.g. \S1#4;<br />
            1/4<br />
            <br />
            \A Alignment<br />
            \A0; = bottom<br />
            \A1; = center<br />
            \A2; = top<br />
            <br />
            \C Color change<br />
            \C1; = red<br />
            \C2; = yellow<br />
            \C3; = green<br />
            \C4; = cyan<br />
            \C5; = blue<br />
            \C6; = magenta<br />
            \C7; = white<br />
            <br />
            \T Tracking, char.spacing - e.g. \T2;<br />
            \~ Non-wrapping space, hard space<br />
            {} Braces - define the text area influenced by the code<br />
            \ Escape character - e.g. \\ = "\", \{ = "{"<br />
            <br />
            Codes and braces can be nested up to 8 levels deep.<br />
            </remarks>
        </member>
        <member name="M:netDxf.Entities.MText.#ctor">
            <summary>
            Initializes a new instance of the <c>MText</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.MText.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>MText</c> class.
            </summary>
            <param name="text">Text string.</param>
        </member>
        <member name="M:netDxf.Entities.MText.#ctor(netDxf.Vector2,System.Double)">
            <summary>
            Initializes a new instance of the <c>MText</c> class.
          